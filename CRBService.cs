#define _NEWSERVER

using System;
using System.IO;
using System.Data;
using System.Linq;
using System.Text;
using AE.Net.Mail;
using VOREmail;
using ZOHOProvider;
using DateResolvers;
using Newtonsoft.Json;
using Microsoft.Win32;
using System.Threading;
using System.Reflection;
using EmailProcessorSDK;
using Zoho.Subscription;
using CRBUtilities.Security;
using CRBUtilities.Utilities;
//using Skylogix.Utilities;
using System.Diagnostics;
using System.Configuration;
using System.ServiceProcess;
using System.ComponentModel;
using MySql.Data.MySqlClient;
using EmailValidationProvider;
using ZOHOProvider.JSON_Classes;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using EmailValidationProvider.Json_Objects;
using System.Security.AccessControl;
using APITrackingProvider;

namespace CRBService
{
    public partial class CRBService : ServiceBase
    {
        private const int INITIAL_VOR = 3;
        private const int TENANT_PHOTO_ID = 9;
        private const int ROOMMATE1_PHOTO_ID = 10;
        private const int ROOMMATE2_PHOTO_ID = 11;
        private const int ROOMMATE3_PHOTO_ID = 12;
        private const int CURRENT_LEASE = 13;
        private const int PAST_LEASE = 14;
        private const int LANDLORD_ID = 16;
        private const int LANDLORD_IDM = 17;
        private const int PROPERTY_TAX_RECORDS = 19;

        private bool gRunning;
        private bool gDebugging;
        private bool gTimerDebugging;
        private bool gErrorOnBlankClosingReason;

        private string gConnectionString;
        private string gClientID = string.Empty;
        private string gClientSecret = string.Empty;
        private string gSubscriptionClientID = string.Empty;
        private string gSubscriptionSecret = string.Empty;
        private string gSubscriptionOrganization = string.Empty;
        private string gEmailValidationAPIKey = string.Empty;
        private List<AddIn> Processors = new List<AddIn>();
        private Queue<APIEntry> APICalls = null;
        private object queueLock = new Object();
        private MonthlyLandlordTypes gMonthlyLandlordSetting;

        private object gBOMJobLock = new object();
        private bool gTestRunBOMJob;
        private bool gProcessBOMJobDebugging;
        private bool gStopProcessingBOMJob;
        private bool gBOMJobIsRunning;
        private AutoResetEvent gGateA;
        private Thread gBOMJobProcessor;
        private RunManager BOMJobProcess = null;

        private object gWeeklyJobLock = new object();
        private bool gTestRunWeeklyJob;
        private bool gProcessWeeklyJobDebugging;
        private bool gStopProcessingWeeklyJob;
        private bool gWeeklyJobIsRunning;
        private AutoResetEvent gGateB;
        private Thread gWeeklyJobProcessor;
        private RunManager WeeklyJobProcess = null;

        private bool gStopProcessingEmails;
        private AutoResetEvent gGate;
        private Thread gEmailProcessor;
        private RunManager EmailProcess = null;

        private bool gStopProcessingCounts;
        private AutoResetEvent gGate3;
        private Thread gCountProcessor;

        private bool gProcessTUFieldsDebugging;
        private bool gStopProcessingTUFields;
        private AutoResetEvent gGate2;
        private Thread gTUFieldsProcessor;
        private RunManager TUFieldsProcess = null;

        private bool gProcessPortalFieldsDebugging;
        private bool gStopProcessingPortalFields;
        private AutoResetEvent gGate4;
        private Thread gPortalProcessor;
        private RunManager PortalFieldsProcess = null;

        private bool gProcessAbandonedCheckoutsDebugging;
        private bool gStopProcessingAbandonedCheckouts;
        private AutoResetEvent gGate5;
        private Thread gCheckoutProcessor;
        private RunManager AbondonedCheckoutProcess = null;

        private bool gProcessClosingAccountsDebugging;
        private bool gStopProcessingClosingAccounts;
        private AutoResetEvent gGate6;
        private Thread gClosingAccountsProcessor;
        private RunManager ClosingAccountsProcess = null;

        private bool gProcessVORsDebugging;
        private bool gStopProcessingVORs;
        private AutoResetEvent gGate7;
        private Thread gVORProcessor;
        private RunManager VORProcess = null;

        private bool gProcessUpgradesDebugging;
        private bool gStopProcessingUpgrades;
        private AutoResetEvent gGate8;
        private Thread gUpgradeProcessor;
        private RunManager UpgradeProcess = null;

        private bool gProcessVettingAssignedDebugging;
        private bool gStopProcessingVettingAssigned;
        private AutoResetEvent gGate9;
        private Thread gVettingAssignedProcessor;
        private RunManager VettingAssignedProcess = null;

        private bool gProcessAnnualRenewalsDebugging;
        private bool gStopProcessingAnnualRenewals;
        private AutoResetEvent gGateC;
        private Thread gAnnualRenewalsProcessor;
        private RunManager AnnualRenewalsProcess = null;

        private bool gProcessEnrollmentSummarysDebugging;
        private bool gStopProcessingEnrollmentSummary;
        private AutoResetEvent gGateD;
        private Thread gEnrollmentSummaryProcessor;
        private RunManager EnrollmentSummaryProcess = null;

        private string[] TemplateReplaceables = { "$tenant~", "$tenant.lastname~", "$tenant.firstname~", "$tenant.firstinitial~", "$tenant.r1lastname~", "$tenant.r1firstname~", "$tenant.r1firstinitial~", "$tenant.r2lastname~", "$tenant.r2firstname~", "$tenant.r2firstinitial~", "$tenant.r3lastname~", "$tenant.r3firstname~", "$tenant.r3firstinitial~", "$root~", "$stamp~", "$filename~" };

        public CRBService()
        {
            InitializeComponent();
        }
        protected override void OnStart(string[] args)
        {
            string theSQL = string.Empty;

            #region Set Security Fields
            this.gConnectionString = this.GetConnectionString();
            this.gClientID = ConfigurationManager.AppSettings["ZohoClientID"];
            this.gClientSecret = ConfigurationManager.AppSettings["ZohoClientSecret"];
            this.gSubscriptionClientID = ConfigurationManager.AppSettings["SubscriptionClientID"];
            this.gSubscriptionSecret = ConfigurationManager.AppSettings["SubscriptionSecret"];
            this.gSubscriptionOrganization = ConfigurationManager.AppSettings["SubscriptionOrganization"];
            this.gEmailValidationAPIKey = ConfigurationManager.AppSettings["EmailVerificationAPIKey"];
            #endregion
            #region Set Flags
            this.gDebugging = ((ConfigurationManager.AppSettings["Debug"] == "true") ? true : false );
            this.gTimerDebugging = ((ConfigurationManager.AppSettings["TimerDebug"] == "true") ? true : false);
            this.gProcessTUFieldsDebugging = ((ConfigurationManager.AppSettings["ProcessTUFieldsDebug"] == "true") ? true : false);
            this.gProcessPortalFieldsDebugging = ((ConfigurationManager.AppSettings["ProcessPortalFieldsDebug"] == "true") ? true : false);
            this.gProcessAbandonedCheckoutsDebugging = ((ConfigurationManager.AppSettings["ProcessAbandonedCheckoutsDebug"] == "true") ? true : false);
            this.gProcessClosingAccountsDebugging = true; // ((ConfigurationManager.AppSettings["ProcessClosingAccountsDebug"] == "true") ? true : false);
            this.gProcessVORsDebugging = ((ConfigurationManager.AppSettings["ProcessVORsDebug"] == "true") ? true : false);
            this.gProcessUpgradesDebugging = ((ConfigurationManager.AppSettings["ProcessUpgradesDebug"] == "true") ? true : false);
            this.gProcessVettingAssignedDebugging = ((ConfigurationManager.AppSettings["ProcessVettingAssignedDebug"] == "true") ? true : false);
            this.gProcessBOMJobDebugging = ((ConfigurationManager.AppSettings["ProcessBOMJobDebug"] == "true") ? true : false);
            this.gProcessWeeklyJobDebugging = ((ConfigurationManager.AppSettings["ProcessWeeklyJobDebug"] == "true") ? true : false);
            this.gErrorOnBlankClosingReason = ((ConfigurationManager.AppSettings["ErrorOnBlankClosingReason"] == "true") ? true : false);
            this.gProcessAnnualRenewalsDebugging = true;
            this.gProcessEnrollmentSummarysDebugging = true;
            this.gTestRunBOMJob = false;
            this.gTestRunWeeklyJob = false;
            this.gBOMJobIsRunning = false;
            this.gWeeklyJobIsRunning = false;
            this.gRunning = false;
            this.gStopProcessingEmails = false;
            this.gStopProcessingTUFields = false;
            this.gStopProcessingCounts = false;
            this.gStopProcessingPortalFields = false;
            this.gStopProcessingAbandonedCheckouts = false;
            this.gStopProcessingClosingAccounts = false;
            this.gStopProcessingVORs = false;
            this.gStopProcessingUpgrades = false;
            this.gStopProcessingVettingAssigned = false;
            this.gStopProcessingBOMJob = false;
            this.gStopProcessingWeeklyJob = false;
            this.gStopProcessingAnnualRenewals = false;
            this.gStopProcessingEnrollmentSummary = false;
            #endregion
            #region Load Schedulers
            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
            {
                dbc.Open();

                #region ProcessEmailsScheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'ProcessEmails';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.EmailProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.EmailProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.EmailProcess = new RunManager("1,2,3,4,5,6,7", "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23", "0,5,10,15,20,25,30,35,40,45,50,55");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("ProcessEmails Scheduler Loaded.\r\n{0}", this.EmailProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region TUFields Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'TUFields';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.TUFieldsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.TUFieldsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.TUFieldsProcess = new RunManager("1,2,3,4,5", "6,7,8,9,10,11,12,13,14,15,16,17,18", "0,15,30,45");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("TUFields Scheduler Loaded.\r\n{0}", this.TUFieldsProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region PortalFields Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'PortalFields';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.PortalFieldsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.PortalFieldsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.PortalFieldsProcess = new RunManager("1,2,3,4,5,6,7", "6,7,8,9,10,11,12,13,14,15,16,17,18", "0,30");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("PortalProcessor Scheduler Loaded.\r\n{0}", this.PortalFieldsProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region Abandons Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'Checkouts';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.AbondonedCheckoutProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.AbondonedCheckoutProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.AbondonedCheckoutProcess = new RunManager("1,2,3,4,5,6,7", "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23", "5,20,35,50");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Checkouts Scheduler Loaded.\r\n{0}", this.AbondonedCheckoutProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region ClossingAccounts Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'ClosingAccounts';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.ClosingAccountsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.ClosingAccountsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.ClosingAccountsProcess = new RunManager("1,2,3,4,5,6,7", "7,8,9,10,11,12,13,14,15,16,17,18,19", "0,5,10,15,20,25,30,35,40,45,50,55");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Closing Accounts Scheduler Loaded.\r\n{0}", this.ClosingAccountsProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region VOR Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'VerifyRents';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.VORProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.VORProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.VORProcess = new RunManager("1,2,3,4,5,6,7", "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23", "0,15,30,45");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Verification Of Rents Scheduler Loaded.\r\n{0}", this.VORProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region Upgrades Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'Upgrades';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.UpgradeProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.UpgradeProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.UpgradeProcess = new RunManager("1,2,3,4,5,6,7", "5", "0");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Upgrades Scheduler Loaded.\r\n{0}", this.UpgradeProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region Vetting Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, active FROM crbdb.mt_runschedules WHERE runname = 'VettingAssigned';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[4].ToString() == "1")
                                this.VettingAssignedProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, true);
                            else
                                this.VettingAssignedProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), string.Empty, false);
                        }
                        else
                        {
                            this.VettingAssignedProcess = new RunManager("1,2,3,4,5,6,7", "00,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23", "00, 30");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("VettingAssigned Scheduler Loaded.\r\n{0}", this.VettingAssignedProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region BOMJob Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, rundates, active FROM crbdb.mt_runschedules WHERE runname = 'BOMJob';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[5].ToString() == "1")
                                this.BOMJobProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), true);
                            else
                                this.BOMJobProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), false);
                        }
                        else
                        {
                            this.BOMJobProcess = new RunManager(string.Empty, "00", "30", "D", "1");
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Beginning Of Month Job (BOMJob) Scheduler Loaded.\r\n{0}", this.BOMJobProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region WeeklyJob Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, rundates, active FROM crbdb.mt_runschedules WHERE runname = 'WeeklyJob';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[5].ToString() == "1")
                                this.WeeklyJobProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), true);
                            else
                                this.WeeklyJobProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), false);
                        }
                        else
                        {
                            this.WeeklyJobProcess = new RunManager("5", "12", "00", "W", string.Empty);
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Weekly Job Scheduler Loaded.\r\n{0}", this.WeeklyJobProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region AnnualRenewals Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, rundates, active FROM crbdb.mt_runschedules WHERE runname = 'AnnualRenewals';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[5].ToString() == "1")
                                this.AnnualRenewalsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), true);
                            else
                                this.AnnualRenewalsProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), false);
                        }
                        else
                        {
                            this.AnnualRenewalsProcess = new RunManager("5", "12", "00", "W", string.Empty);
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Annual Renewals Scheduler Loaded.\r\n{0}", this.AnnualRenewalsProcess.ToString()), EventLogEntryType.Information);
                #endregion

                #region EnrollmentSummary Scheduler
                theSQL = "SELECT rundays, runhours, runminutes, runtype, rundates, active FROM crbdb.mt_runschedules WHERE runname = 'EnrollmentSummary';";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.Read())
                        {
                            if (dbr[5].ToString() == "1")
                                this.EnrollmentSummaryProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), true);
                            else
                                this.EnrollmentSummaryProcess = new RunManager(dbr[0].ToString(), dbr[1].ToString(), dbr[2].ToString(), dbr[3].ToString(), dbr[4].ToString(), false);
                        }
                        else
                        {
                            this.EnrollmentSummaryProcess = new RunManager("1,2,3,4,5,6,7", "00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23", "00,05,10,15,20,25,30,35,40,45,50,55", "W", string.Empty);
                        }
                    }
                }
                EventLog.WriteEntry(string.Format("Enrollment Summary Scheduler Loaded.\r\n{0}", this.EnrollmentSummaryProcess.ToString()), EventLogEntryType.Information);
                #endregion

            }
            #endregion
            #region Load Addins
            EventLog.WriteEntry("CRBService Loading Email AddIns.", EventLogEntryType.Information);
            string AddInDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
            if (AddInDirectory.EndsWith("\\"))
                AddInDirectory += "Addins";
            else
                AddInDirectory += "\\Addins";
            string[] AddInAssemblies = Directory.GetFiles(AddInDirectory, "*.dll");
            EventLog.WriteEntry(string.Format("CRBService processing AddIns from {0}.", AddInDirectory), EventLogEntryType.Information);
            foreach (string FileName in AddInAssemblies)
            {
                AddIn AI = new AddIn();
                try
                {
                    Assembly AddInAssembly = Assembly.LoadFrom(FileName);
                    AI.AssemblyFile = FileName;
                    foreach (Type item in AddInAssembly.GetExportedTypes())
                    {
                        if (item.IsClass && typeof(IEmailProcessor).IsAssignableFrom(item))
                        {
                            AI.AssemblyType = item;
                            AI.AssemblyObject = (IEmailProcessor)Activator.CreateInstance(item);
                            AI.AssemblyObject.ClientID = this.gClientID;
                            AI.AssemblyObject.ClientSecret = this.gClientSecret;
                            AI.AssemblyObject.DatabaseInfo = this.gConnectionString;
                            AI.AssemblyObject.SubscriptionOrganization = this.gSubscriptionOrganization;
                            AI.AssemblyObject.SubscriptionClientID = this.gSubscriptionClientID;
                            AI.AssemblyObject.SubscriptionSecret = this.gSubscriptionSecret;
                            this.Processors.Add(AI);
                            EventLog.WriteEntry(string.Format("CRBService Loaded {0} AddIn.", AI.AssemblyFile), EventLogEntryType.Information);
                        }
                    }
                }
                catch (Exception ce) { string dummy = ce.Message; }
            }
            EventLog.WriteEntry("CRBService Loading Email AddIns Complete.", EventLogEntryType.Information);
            #endregion
            #region Build Internal Processes
            this.APICalls = new Queue<APIEntry>();

            this.gGate = new AutoResetEvent(false);
            this.gGate2 = new AutoResetEvent(false);
            this.gGate3 = new AutoResetEvent(false);
            this.gGate4 = new AutoResetEvent(false);
            this.gGate5 = new AutoResetEvent(false);
            this.gGate6 = new AutoResetEvent(false);
            this.gGate7 = new AutoResetEvent(false);
            this.gGate8 = new AutoResetEvent(false);
            this.gGate9 = new AutoResetEvent(false);
            this.gGateA = new AutoResetEvent(false);
            this.gGateB = new AutoResetEvent(false);
            this.gGateC = new AutoResetEvent(false);
            this.gGateD = new AutoResetEvent(false);

            this.gEmailProcessor = new Thread(new ThreadStart(ProcessEmails));
            this.gTUFieldsProcessor = new Thread(new ThreadStart(ProcessTUFields));
            this.gCountProcessor = new Thread(new ThreadStart(ProcessCount));
            this.gPortalProcessor = new Thread(new ThreadStart(ProcessPortalFields));
            this.gCheckoutProcessor = new Thread(new ThreadStart(ProcessAbandonedCheckouts));
            this.gClosingAccountsProcessor = new Thread(new ThreadStart(ProcessClosingAccountsEx));
            this.gVORProcessor = new Thread(new ThreadStart(ProcessVORs));
            this.gUpgradeProcessor = new Thread(new ThreadStart(ProcessUpgrades));
            this.gVettingAssignedProcessor = new Thread(new ThreadStart(ProcessVettingAssigned));
            this.gBOMJobProcessor = new Thread(new ThreadStart(ProcessBOMJob));
            this.gWeeklyJobProcessor = new Thread(new ThreadStart(ProcessWeeklyJob));
            this.gAnnualRenewalsProcessor = new Thread(new ThreadStart(ProcessRenewalEmails));
            this.gEnrollmentSummaryProcessor = new Thread(new ThreadStart(ProcessEnrollmentSummary));

            this.gEmailProcessor.Start();
            this.gTUFieldsProcessor.Start();
            this.gCountProcessor.Start();
            this.gPortalProcessor.Start();
            this.gCheckoutProcessor.Start();
            this.gClosingAccountsProcessor.Start();
            this.gVORProcessor.Start();
            this.gUpgradeProcessor.Start();
            this.gVettingAssignedProcessor.Start();
            this.gBOMJobProcessor.Start();
            this.gWeeklyJobProcessor.Start();
            this.gAnnualRenewalsProcessor.Start();
            this.gEnrollmentSummaryProcessor.Start();
            #endregion

            this.gRunTimer.Enabled = true;

            if (gTimerDebugging)
                EventLog.WriteEntry("CRBService Timer Enabled.", EventLogEntryType.Warning);
        }
        protected override void OnStop()
        {
            #region Signal Kill For Internal Processes
            this.gRunTimer.Enabled = false;
            this.gStopProcessingEmails = true;
            this.gStopProcessingTUFields = true;
            this.gStopProcessingCounts = true;
            this.gStopProcessingPortalFields = true;
            this.gStopProcessingAbandonedCheckouts = true;
            this.gStopProcessingClosingAccounts = true;
            this.gStopProcessingVORs = true;
            this.gStopProcessingUpgrades = true;
            this.gStopProcessingVettingAssigned = true;
            this.gStopProcessingBOMJob = true;
            this.gStopProcessingWeeklyJob = true;
            this.gStopProcessingAnnualRenewals = true;
            this.gStopProcessingEnrollmentSummary = true;

            this.gGate.Set();
            this.gGate2.Set();
            this.gGate3.Set();
            this.gGate4.Set();
            this.gGate5.Set();
            this.gGate6.Set();
            this.gGate7.Set();
            this.gGate8.Set();
            this.gGate9.Set();
            this.gGateA.Set();
            this.gGateB.Set();
            this.gGateC.Set();
            this.gGateD.Set();
            #endregion

            if (gTimerDebugging)
                EventLog.WriteEntry("CRBService Timer Disabled.", EventLogEntryType.Warning);
        }
        protected override void OnCustomCommand(int command)
        {
            // can only be between 128 and 255
            EventLog.WriteEntry(string.Format("CRBService received {0} command.", command), EventLogEntryType.Warning);

            switch (command)
            {
                case 128: // BOM Job Production Run Request
                    lock (this.gBOMJobLock)
                    {
                        this.gTestRunBOMJob = false;
                    }
                    if (!this.gBOMJobIsRunning)
                    {
                        EventLog.WriteEntry("BOMJob Gate was Opened for Production.", EventLogEntryType.Warning);
                        this.gGateA.Set();
                    }
                    else
                        EventLog.WriteEntry("BOMJob Open Gate for Production request ignored, process is currently running.", EventLogEntryType.Warning);
                    break;
                case 129: // BOM Job Test Run Request
                    lock (this.gBOMJobLock)
                    {
                        this.gTestRunBOMJob = true;
                    }
                    if (!this.gBOMJobIsRunning)
                    {
                        EventLog.WriteEntry("BOMJob Gate was Opened for Test.", EventLogEntryType.Warning);
                        this.gGateA.Set();
                    }
                    else
                        EventLog.WriteEntry("BOMJob Open Gate for Test request ignored, process is currently running.", EventLogEntryType.Warning);
                    break;
                case 200: // Weekly Job Production Run Request
                    lock (this.gWeeklyJobLock)
                    {
                        this.gTestRunWeeklyJob = false;
                    }
                    if (!this.gWeeklyJobIsRunning)
                    {
                        EventLog.WriteEntry("WeeklyJob Gate was Opened for Production.", EventLogEntryType.Warning);
                        this.gGateB.Set();
                    }
                    else
                        EventLog.WriteEntry("WeeklyJob Open Gate for Production request ignored, process is currently running.", EventLogEntryType.Warning);
                    break;
                case 210: // Weekly Job Test Run Request
                    lock (this.gWeeklyJobLock)
                    {
                        this.gTestRunWeeklyJob = true;
                    }
                    if (!this.gWeeklyJobIsRunning)
                    {
                        EventLog.WriteEntry("WeeklyJob Gate was Opened for Test.", EventLogEntryType.Warning);
                        this.gGateB.Set();
                    }
                    else
                        EventLog.WriteEntry("WeeklyJob Open Gate for Test request ignored, process is currently running.", EventLogEntryType.Warning);
                    break;
                default:
                    break;
            }
        }

        private void gRunTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (gTimerDebugging)
                EventLog.WriteEntry("CRBService Timer Fired.", EventLogEntryType.Warning);

            if (this.gRunning) return;
            this.gRunning = true;

            if (EmailProcess.IsTimeToRun())
            {
                this.gGate.Set();     // Signal Email Processing
                this.gGate3.Set();    // Update API Counts
            }

            if (TUFieldsProcess.IsTimeToRun()) this.gGate2.Set(); // Signal TU Fields Processing

            if (PortalFieldsProcess.IsTimeToRun()) this.gGate4.Set(); // Signal Portal Processing

            if (AbondonedCheckoutProcess.IsTimeToRun()) this.gGate5.Set(); // Signal Abandoned Checkouts Processing

            if (ClosingAccountsProcess.IsTimeToRun()) this.gGate6.Set(); // Signal Closing Accounts Processing

            if (VORProcess.IsTimeToRun()) this.gGate7.Set(); // Signal VOR Processing

            if (VettingAssignedProcess.IsTimeToRun()) this.gGate9.Set(); // Signal VettingAssigned processing

            if (BOMJobProcess.IsTimeToRun())
            {
                if (!this.gBOMJobIsRunning) this.gGateA.Set(); // Signal BOM Job
            }

            if (WeeklyJobProcess.IsTimeToRun())
            {
                if (!this.gWeeklyJobIsRunning) this.gGateB.Set(); // Signal Weekly Job
            }

            if (AnnualRenewalsProcess.IsTimeToRun()) this.gGateC.Set(); // Signal Annual Renewals

            if (EnrollmentSummaryProcess.IsTimeToRun()) this.gGateD.Set(); // Signal Annual Renewals

            int minute = DateTime.Now.Minute;

            string theSQL = string.Empty;
            string LeadID = string.Empty;
            DataTable Captures = new DataTable();

            theSQL = "SELECT * FROM crbdb.tt_visitors WHERE (i_reported = 0);";

            if (gTimerDebugging)
                EventLog.WriteEntry("CRBService Timer Running.", EventLogEntryType.Warning);

            try
            {
                if (gTimerDebugging)
                    EventLog.WriteEntry("CRBService Opening Database using [" + this.gConnectionString + "].", EventLogEntryType.Warning);
                using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                {
                    dbc.Open();
                    //
                    // Get unprocessed captures
                    //
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        using (MySqlDataAdapter dba = new MySqlDataAdapter(dbcc))
                        {
                            dba.Fill(Captures);
                        }
                    }

                    if (gTimerDebugging)
                        EventLog.WriteEntry(string.Format("CRBService::Captures Populated. {0} Records Found.", Captures.Rows.Count), EventLogEntryType.Warning);

                    //
                    // Process the captures
                    //
                    if (Captures.Rows.Count > 0)
                    {
                        DateTime TestStamp = DateTime.MinValue;
                        DateTime Benchmark = DateTime.Now.AddMinutes(-60.0);
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        if (gTimerDebugging)
                            EventLog.WriteEntry("CRBService::Items 60 minutes or older being Processed.", EventLogEntryType.Warning);
                        foreach (DataRow dr in Captures.Rows)
                        {
                            //
                            // Get correct Test Stamp
                            //
                            TestStamp = DateTime.MinValue;
                            LeadID = string.Empty;
                            string RecordID = dr["id"].ToString();
                            string abandonedPage = dr["i_pageleft"].ToString();
                            string PageDate = string.Empty;
                            try
                            {
                                switch (abandonedPage)
                                {
                                    case "P1":
                                        PageDate = dr["i_stamp1"].ToString();
                                        break;
                                    case "P2":
                                        PageDate = dr["i_stamp2"].ToString();
                                        break;
                                    case "P3":
                                        PageDate = dr["i_stamp3"].ToString();
                                        break;
                                    case "P4":
                                        PageDate = dr["i_stamp4"].ToString();
                                        break;
                                    case "P5":
                                        PageDate = dr["i_stamp5"].ToString();
                                        break;
                                    case "P6":
                                        PageDate = dr["i_stamp6"].ToString();
                                        break;
                                    case "PC":
                                        break;
                                }
                                TestStamp = DateTime.Parse(PageDate);
                            }
                            catch (Exception ce)
                            {
                                //EventLog.WriteEntry(string.Format("CRBService::Error:: {0} \r\n {1}-{2}-{3}.", ce.Message, RecordID, abandonedPage, PageDate));
                                TestStamp = DateTime.Parse(dr["i_stamp1"].ToString()); //DateTime.Now;
                                string dummy = ce.Message;
                            }
                            //
                            // If record is old enough, process it
                            //
                            if ((TestStamp <= Benchmark) || (dr["i_savedforlater"].ToString() == "1"))
                            {
                                switch (abandonedPage)
                                {
                                    case "P1": // No data for lead creation
                                        ReportThisRecord(RecordID, dbc);
                                        break;
                                    case "P2": // Least avaiable for lead creation - should have some contact info
                                        ProcessThisRecord(RecordID, LeadID, dr, ZM, dbc);
                                        break;
                                    case "P3": // Contact and possible address info
                                        ProcessThisRecord(RecordID, LeadID, dr, ZM, dbc);
                                        break;
                                    case "P4": // Contact, possible address, and possible landlord info
                                        ProcessThisRecord(RecordID, LeadID, dr, ZM, dbc);
                                        break;
                                    case "P5": // Contact, possible address, possible landlord, product and payment info
                                        ProcessThisRecord(RecordID, LeadID, dr, ZM, dbc);
                                        break;
                                    case "P6": // Contact, possible address, possible landlord, product and payment info
                                        ProcessThisRecord(RecordID, LeadID, dr, ZM, dbc);
                                        break;
                                    case "PC": // No lead creation - should be enrolled via proessing
                                        ReportThisRecord(RecordID, dbc);
                                        break;
                                }
                            }
                        }
                    }
                }

                // Make sure we eat up the whole minute
                while (minute == DateTime.Now.Minute)
                {
                    Thread.Sleep(30000);
                }
            }
            catch (Exception ce)
            {
                EventLog.WriteEntry(string.Format("CRBService::Error:: {0} \r\n {1}.", ce.Message, ce.StackTrace), EventLogEntryType.Error);
            }
            finally
            {
                this.gRunning = false;
            }

            if (gTimerDebugging)
                EventLog.WriteEntry("CRBService Timer Run Completed.", EventLogEntryType.Warning);

        }
        private void ProcessThisRecord(string RecordID, string LeadID, DataRow dr, ZOHOCRMProvider ZM, MySqlConnection dbc)
        {
            if (dr["t_tenants"].ToString() != "0")
            {
                if (dr["t1_firstname"].ToString().Trim() != "")
                {
                    if (dr["t1_lastname"].ToString().Trim() != "")
                    {
                        if (dr["t1_email"].ToString().Trim() != "")
                        {
                            if (!IsThereADuplicate(RecordID, dr["t1_firstname"].ToString(), dr["t1_lastname"].ToString(), dr["t1_phone"].ToString(), dr["t1_email"].ToString(), dbc))
                            {
                                // Put this info in Zoho
                                LeadID = ZM.CreateLead(this.AssembleZohoData(dr));
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessThisRecord", "CRM", APITracker.APICalls.CreateLead);
                                CountAPICall("createlead");
                                if (!string.IsNullOrEmpty(LeadID))
                                {
                                    // Update Finish Later Link
                                    ZM.UpdateLead(LeadID, this.AssembleZohoData(dr, LeadID));
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessThisRecord", "CRM", APITracker.APICalls.UpdateLead);
                                    CountAPICall("updatelead");
                                    // Report This Record
                                    ReportThisRecord(RecordID, LeadID, dbc);

                                    if (gTimerDebugging)
                                        EventLog.WriteEntry(string.Format("Record {0} reported as Lead {1}", RecordID, LeadID), EventLogEntryType.Warning);
                                }
                                else
                                {
                                    ReportThisRecord(RecordID, dbc);
                                    if (gTimerDebugging)
                                        EventLog.WriteEntry(string.Format("Create Lead Failed For {0}. Debug Text:: {1}", RecordID, ZM.DebugText), EventLogEntryType.Warning);
                                }
                                SaveThisRecord(RecordID, dbc);
                            }
                            else
                                ReportThisRecordAsDuplicate(RecordID, dbc);
                        }
                        else
                            ReportThisRecord(RecordID, dbc);
                    }
                    else
                        ReportThisRecord(RecordID, dbc);
                }
                else
                    ReportThisRecord(RecordID, dbc);
            }
            else
                ReportThisRecord(RecordID, dbc);
        }
        private string AssembleZohoData(DataRow dr, string LeadID)
        {
            //string URL = string.Format("https://www.950crb.com/FinishSignup.aspx?tracker={0}&lead={1}", dr["id"], LeadID);
            string URL = string.Format("https://www.creditrentboost.com/enrollment/FinishSignup.aspx?tracker={0}&lead={1}", dr["id"], LeadID);
            StringBuilder sb = new StringBuilder("{ \"data\": [");
            sb.Append("{ ");
            sb.Append("\"Layout\":{\"id\":\"2558861000001894216\"},");
            //sb.Append("\"Owner\":{\"name\":\"Andrew Jemmett\",\"id\":\"2558861000000120009\"},");
            //sb.Append(string.Format("\"SA_Form_Link\": \"{0}\"", URL));
            sb.Append(string.Format("\"SA_Form_Link\": \"{0}\",", URL));
            sb.Append(string.Format("\"T_ID\": \"{0}\"", LeadID));
            sb.Append(" }");
            sb.Append("], \"trigger\":[\"workflow\"]}");

            return sb.ToString();
        }
        private string AssembleZohoData(DataRow dr)
        {
            StringBuilder sb = new StringBuilder("{ \"data\": [");
            sb.Append("{ ");
            sb.Append("\"Layout\":{\"id\":\"2558861000001894216\"},");
            //sb.Append("\"Owner\":{\"name\":\"Andrew Jemmett\",\"id\":\"2558861000000120009\"},");
            sb.Append("\"Owner\":{\"name\":\"Admin 950 Credit\",\"id\":\"2558861000003084093\"},");

            // Tenant 1
            sb.Append(string.Format("\"First_Name\": \"{0}\",", dr["t1_firstname"]));
            sb.Append(string.Format("\"Last_Name\": \"{0}\",", dr["t1_lastname"]));
            if (Validator.EmailIsValid(dr["t1_email"].ToString().Trim()))
                sb.Append(string.Format("\"Email\": \"{0}\",", dr["t1_email"]));
            else
                sb.Append("\"Email\": \"\",");
            if (Validator.PhoneNumberIsReasonable(this.parseOnlyNumbers(dr["t1_phone"].ToString())))
                sb.Append(string.Format("\"Phone\": \"{0}\",", this.parseOnlyNumbers(dr["t1_phone"].ToString())));
            else
                sb.Append("\"Phone\": \"\",");
            if (dr["i_savedforlater"].ToString() == "1")
                sb.Append("\"Lead_Source\": \"Finish Later\",");
            else
                sb.Append("\"Lead_Source\": \"Incomplete Signup\",");
            switch (dr["i_pageleft"].ToString())
            {
                case "P1":
                    sb.Append("\"Signup_Page_Left\": \"Page 1:  Your Info\",");
                    break;
                case "P2":
                    sb.Append("\"Signup_Page_Left\": \"Page 2:  Property Info\",");
                    break;
                case "P3":
                    sb.Append("\"Signup_Page_Left\": \"Page 3:  PMC Info\",");
                    break;
                case "P4":
                    sb.Append("\"Signup_Page_Left\": \"Page 4:  Product & Pymt\",");
                    break;
                case "P5":
                case "P6":
                    sb.Append("\"Signup_Page_Left\": \"Page 5:  Sig & Uploads\",");
                    break;
            }
/*            if (Validator.DateIsValid(dr["t1_dob"].ToString()))
                sb.Append(string.Format("\"Tenant_1_Date_of_Birth\": \"{0}\",", dr["t1_dob"]));
            else
                sb.Append("\"Tenant_1_Date_of_Birth\": \"\",");
            sb.Append(string.Format("\"Tenant_1_Last_4_of_Social\": \"{0}\",", dr["t1_ssn"]));

            // Tenant 2
            if (int.Parse(dr["t_tenants"].ToString()) > 1)
            {
                // Tenant 2
                sb.Append(string.Format("\"Tenant_2_First_Name\": \"{0}\",", dr["t2_firstname"]));
                sb.Append(string.Format("\"Tenant_2_Last_Name\": \"{0}\",", dr["t2_lastname"]));
                if (Validator.PhoneNumberIsReasonable(this.parseOnlyNumbers(dr["t2_phone"].ToString())))
                    sb.Append(string.Format("\"Tenant_2_Phone\": \"{0}\",", this.parseOnlyNumbers(dr["t2_phone"].ToString())));
                else
                    sb.Append("\"Tenant_2_Phone\": \"\",");
                if (Validator.EmailIsValid(dr["t2_email"].ToString()))
                    sb.Append(string.Format("\"Secondary_Email\": \"{0}\",", dr["t2_email"]));
                else
                    sb.Append("\"Secondary_Email\": \"\",");
                if (Validator.DateIsValid(dr["t2_dob"].ToString()))
                    sb.Append(string.Format("\"R1_DOB\": \"{0}\",", dr["t2_dob"]));
                else
                    sb.Append("\"R1_DOB\": \"\",");
                sb.Append(string.Format("\"Tenant_2_SS\": \"{0}\",", dr["t2_ssn"]));
            }

            if (int.Parse(dr["t_tenants"].ToString()) > 2)
            {
                // Tenant 3
                sb.Append(string.Format("\"Tenant_3_First_Name\": \"{0}\",", dr["t3_firstname"]));
                sb.Append(string.Format("\"Tenant_3_Last_Name\": \"{0}\",", dr["t3_lastname"]));
                if (Validator.PhoneNumberIsReasonable(this.parseOnlyNumbers(dr["t3_phone"].ToString())))
                    sb.Append(string.Format("\"Tenant_3_Phone\": \"{0}\",", this.parseOnlyNumbers(dr["t3_phone"].ToString())));
                else
                    sb.Append("\"Tenant_3_Phone\": \"\",");
                if (Validator.EmailIsValid(dr["t3_email"].ToString()))
                    sb.Append(string.Format("\"R2_Email\": \"{0}\",", dr["t3_email"].ToString()));
                else
                    sb.Append("\"R2_Email\": \"\",");
                if (Validator.DateIsValid(dr["t3_dob"].ToString()))
                    sb.Append(string.Format("\"R2_DOB\": \"{0}\",", dr["t3_dob"]));
                else
                    sb.Append("\"R2_DOB\": \"\",");
                sb.Append(string.Format("\"Tenant_3_SS\": \"{0}\",", dr["t3_ssn"]));
            }
            // Property Address
            sb.Append(string.Format("\"Street\": \"{0}\",", this.parseNoPunctuation(dr["a1_line"].ToString())));
            sb.Append(string.Format("\"City\": \"{0}\",", this.parseNoPunctuation(dr["a1_city"].ToString())));
            sb.Append(string.Format("\"State1\": \"{0}\",", dr["a1_state"]));
            sb.Append(string.Format("\"Zip_Code\": \"{0}\",", dr["a1_zip"]));
            sb.Append("\"Country2\": \"US\",");
            if (dr["a_addresses"].ToString() == "2")
            {
                // Property Address
                sb.Append(string.Format("\"Past_Street\": \"{0}\",", this.parseNoPunctuation(dr["a2_line"].ToString())));
                sb.Append(string.Format("\"Past_City\": \"{0}\",", this.parseNoPunctuation(dr["a2_city"].ToString())));
                sb.Append(string.Format("\"Past_State\": \"{0}\",", dr["a2_state"]));
                sb.Append(string.Format("\"Past_Zip\": \"{0}\",", dr["a2_zip"]));
            }

            // Landlord Info
            sb.Append(string.Format("\"Company\": \"{0}\",", dr["l1_company"]));
            sb.Append(string.Format("\"Additional_Contact\": \"{0}\",", dr["l1_contact"]));
            if (Validator.PhoneNumberIsReasonable(this.parseOnlyNumbers(dr["l1_phone"].ToString())))
                sb.Append(string.Format("\"Landlord_Telephone\": \"{0}\",", this.parseOnlyNumbers(dr["l1_phone"].ToString())));
            else
                sb.Append("\"Landlord_Telephone\": \"\",");
            if (Validator.EmailIsValid(dr["l1_email"].ToString()))
                sb.Append(string.Format("\"Landlord_Email\": \"{0}\",", dr["l1_email"]));
            else
                sb.Append("\"Landlord_Email\": \"\",");

            if (dr["l_landlords"].ToString() == "2")
            {
                sb.Append(string.Format("\"Past_Company\": \"{0}\",", dr["l2_company"]));
                sb.Append(string.Format("\"Past_Contact_Name\": \"{0}\",", dr["l2_contact"]));

                if (Validator.EmailIsValid(dr["l2_email"].ToString()))
                    sb.Append(string.Format("\"Past_Landlord_Email\": \"{0}\",", dr["l2_email"]));
                else
                    sb.Append("\"Past_Landlord_Email\": \"\",");

                if (Validator.PhoneNumberIsReasonable(this.parseOnlyNumbers(dr["l2_phone"].ToString())))
                    sb.Append(string.Format("\"Past_Landlord_Phone\": \"{0}\",", this.parseOnlyNumbers(dr["l2_phone"].ToString())));
                else
                    sb.Append("\"Past_Landlord_Phone\": \"\",");
            }

            if (dr["p_subscription"].ToString() == "1")
            {
                sb.Append("\"Monthly_Subscription\": \"Yes\",");
                sb.Append("\"Original_Status_Yr_1\": \"Subscription\",");
                sb.Append(string.Format("\"Date_of_Pymt_or_Decline\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
            }
            else
            {
                sb.Append("\"Monthly_Subscription\": \"No\",");
                sb.Append("\"Original_Status_Yr_1\": \"Paid\",");
                sb.Append(string.Format("\"Date_of_Pymt_or_Decline\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
            }

            string products = string.Empty;
            if (dr["p_subscription"].ToString() == "1")
            {
                products = "'Current Rent Only'";
                if (dr["p_past12"].ToString() == "1")
                {
                    products = "'Current & Past 12 Months'";
                }
                if (dr["p_past24"].ToString() == "1")
                {
                    products = "'Current & Past 24 Months'";
                }
            }
            else
            {
                if (dr["p_current"].ToString() == "1")
                {
                    products = "'Current Rent Only'";
                    if (dr["p_past12"].ToString() == "1")
                    {
                        products = "'Current & Past 12 Months'";
                    }
                    if (dr["p_past24"].ToString() == "1")
                    {
                        products = "'Current & Past 24 Months'";
                    }
                }
                else
                {
                    if (dr["p_past12"].ToString() == "1")
                    {
                        products = "'Past 12 Months Only'";
                    }
                    if (dr["p_past24"].ToString() == "1")
                    {
                        products = "'Past 24 Months Only'";
                    }
                }
            }
            sb.Append(string.Format("\"Reporting_Requested\": [{0}],", products));

            if (dr["p_expedited"].ToString() == "1")
                sb.Append("\"Expedited_Service\": \"Yes\",");
            else
                sb.Append("\"Expedited_Service\": \"No\",");

            
            sb.Append("\"Website_Tenant\": \"Yes\",");
            sb.Append("\"Lead_Status\": \"01a. New\",");
            sb.Append("\"Landlord_From_Tenant\": \"Yes\",");
            sb.Append("\"Reporting\": \"Not Reporting\",");
            sb.Append(string.Format("\"Discount_Code\": \"{0}\",", dr["m_promo"]));
            sb.Append(string.Format("\"TSA\": \"{0}\",", dr["p_tsa"]));
            sb.Append(string.Format("\"$gclid\": \"{0}\",", dr["i_gclid"]));
            sb.Append("\"Rental_Lease_Duration\": \"001\",");  */
            sb.Append("\"Lead_Type\": \"Tenant\",");
            sb.Append(string.Format("\"IP_Address\": \"{0}\"", dr["i_ipaddress"]));
            sb.Append(" }");
            sb.Append("], \"trigger\":[\"workflow\"]}");

            return sb.ToString();
        }
        private bool SaveThisRecord(string RecordID, MySqlConnection dbc)
        {
            bool theResult = false;
            string theSQL = string.Format("INSERT INTO crbdb.tt_visitorszub SELECT * FROM tt_visitors WHERE id = {0};", RecordID);
            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                int recordaffected = dbcc.ExecuteNonQuery();
                if (recordaffected == 1) theResult = true;
            }

            return theResult;
        }
        private bool IsThereADuplicate(string recordid, string firstname, string lastname, string phonenumber, string email, MySqlConnection dbc)
        {
            bool theResult = false;
            string theSQL = string.Empty;

            try
            {
                theSQL = string.Format("SELECT id FROM crbdb.tt_visitors WHERE (id != {0}) AND (i_reported = 1) AND (UCASE(t1_firstname) = '{1}') AND (UCASE(t1_lastname) = '{2}')", recordid, firstname.ToUpper().Replace("'", "''"), lastname.ToUpper().Replace("'", "''"));
                if (!string.IsNullOrEmpty(email))
                    theSQL += string.Format(" AND (t1_email = '{0}')", email);
                else
                    theSQL += string.Format(" AND (t1_phone = '{0}')", phonenumber);
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.HasRows) theResult = true;
                    }
                }

                if (!theResult)
                {
                    theSQL = string.Format("SELECT id FROM crbdb.tt_visitors WHERE (id != {0}) AND (i_reported = 1) AND (UCASE(t2_firstname) = '{1}') AND (UCASE(t2_lastname) = '{2}')", recordid, firstname.ToUpper().Replace("'", "''"), lastname.ToUpper().Replace("'", "''"));
                    if (!string.IsNullOrEmpty(email))
                        theSQL += string.Format(" AND (t2_email = '{0}')", email);
                    else
                        theSQL += string.Format(" AND (t2_phone = '{0}')", phonenumber);
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                        {
                            if (dbr.HasRows) theResult = true;
                        }
                    }
                }

                if (!theResult)
                {
                    theSQL = string.Format("SELECT id FROM crbdb.tt_visitors WHERE (id != {0}) AND (i_reported = 1) AND (UCASE(t3_firstname) = '{1}') AND (UCASE(t3_lastname) = '{2}')", recordid, firstname.ToUpper().Replace("'", "''"), lastname.ToUpper().Replace("'", "''"));
                    if (!string.IsNullOrEmpty(email))
                        theSQL += string.Format(" AND (t3_email = '{0}')", email);
                    else
                        theSQL += string.Format(" AND (t3_phone = '{0}')", phonenumber);
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                        {
                            if (dbr.HasRows) theResult = true;
                        }
                    }
                }
            }
            catch (Exception ce)
            {
                EventLog.WriteEntry("CRBService Error::Problem executing SQL[" + theSQL + "]\r\n\r\n" + ce.Message + "\r\n\r\n" + ce.StackTrace, EventLogEntryType.Error);
            }
            return theResult;
        }
        private void ReportThisRecord(string recordid, MySqlConnection dbc)
        {
            string theSQL = string.Format("UPDATE crbdb.tt_visitors SET i_reported = 1, i_reportedon = '{1:yyyy-MM-dd HH:mm:ss}' WHERE id = {0};", recordid, DateTime.Now);
            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                dbcc.ExecuteNonQuery();
            }

            if (gTimerDebugging)
                EventLog.WriteEntry(string.Format("CRBService::Record {0} being reported. No Zoho Lead created.", recordid), EventLogEntryType.Warning);

        }
        private void ReportThisRecordAsDuplicate(string recordid, MySqlConnection dbc)
        {
            string theSQL = string.Format("UPDATE crbdb.tt_visitors SET i_reported = 1, i_reportedon = '{1:yyyy-MM-dd HH:mm:ss}', i_duplicate = 1 WHERE id = {0};", recordid, DateTime.Now);
            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                dbcc.ExecuteNonQuery();
            }

            if (gTimerDebugging)
                EventLog.WriteEntry(string.Format("CRBService::Record {0} being reported. No Zoho Lead created.", recordid), EventLogEntryType.Warning);

        }
        private void ReportThisRecord(string recordid, string ZohoID, MySqlConnection dbc)
        {
            string theSQL = string.Format("UPDATE crbdb.tt_visitors SET i_reported = 1, i_reportedon = '{1:yyyy-MM-dd HH:mm:ss}', i_zohoid = '{2}' WHERE id = {0};", recordid, DateTime.Now, ZohoID);
            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                dbcc.ExecuteNonQuery();
            }

            if (gTimerDebugging)
                EventLog.WriteEntry(string.Format("CRBService::Record {0} being reported after creating Zoho Lead {1}.", recordid, ZohoID), EventLogEntryType.Warning);

        }
        private string GetConnectionString()
        {
            RegistryKey rKey = Registry.LocalMachine.OpenSubKey(@"Software\Skylogix");
            return (string)rKey.GetValue("crbconnection");
        }
        private string parseOnlyNumbers(string FromData)
        {
            string numbers = "0123456789";
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < FromData.Length; idx++)
            {
                char thisCharacter = FromData[idx];
                if (numbers.Contains(thisCharacter))
                    sb.Append(FromData[idx]);
            }
            return sb.ToString();
        }
        private string parseNoPunctuation(string FromData, bool ReplaceHyphens = false)
        {
            string numbers = "0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz ";
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < FromData.Length; idx++)
            {
                char thisCharacter = FromData[idx];
                if ((thisCharacter == '-') && ReplaceHyphens)
                    sb.Append(' ');
                else
                {
                    if (numbers.Contains(thisCharacter))
                        sb.Append(FromData[idx]);
                }
            }
            return sb.ToString();
        }

        private void ProcessEmails()
        {
            bool continueRunning = true;
            string AIName = string.Empty;
            string SentTo = string.Empty;

            // Wait to start for the first time until a minute of 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
            this.gGate.WaitOne();
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingEmails)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int emailcount = 0;
                    // special loop for processing Subscription Renewals
                    try
                    {
                        using (ImapClient ic = new ImapClient("imap.gmail.com", "forms@creditrentboost.com", "NewCrb$!950", AuthMethods.Login, 993, true))
                        {
                            ic.SelectMailbox("INBOX");
                            int maxmessages = ic.GetMessageCount();

                            if (maxmessages > 0)
                            {
                                SubRenewalProcessor.SubRenewalProcessor SRP = new SubRenewalProcessor.SubRenewalProcessor();
                                SRP.ClientID = this.gClientID;
                                SRP.ClientSecret = this.gClientSecret;
                                SRP.DatabaseInfo = this.gConnectionString;
                                SRP.SubscriptionOrganization = this.gSubscriptionOrganization;
                                SRP.SubscriptionClientID = this.gSubscriptionClientID;
                                SRP.SubscriptionSecret = this.gSubscriptionSecret;

                                int fromMessage = maxmessages - 60; // changed from 30 to 60
                                int toMessage = (maxmessages - 1);

                                if (fromMessage < 0)
                                    fromMessage = 0;

                                MailMessage[] icml = ic.GetMessages(fromMessage, toMessage, false, false);
                                foreach (MailMessage mm in icml)
                                {
                                    bool Handled = false;

                                    if (mm.Subject.ToLower() == "subscription renewal trigger")
                                    {
                                        string Sender = string.Empty;
                                        if (mm.Sender == null)
                                            Sender = mm.From.DisplayName + "(" + mm.From.Address + ")";
                                        else
                                            Sender = mm.Sender.DisplayName + "(" + mm.Sender.Address + ")";

                                        string emailBody = string.Empty;
                                        Attachment ahtml = mm.AlternateViews.GetHtmlView();
                                        if (ahtml != null)
                                            emailBody = ahtml.Body;
                                        else
                                        {
                                            ahtml = mm.AlternateViews.GetTextView();
                                            if (ahtml != null)
                                                emailBody = ahtml.Body;
                                            else
                                                emailBody = mm.Body;
                                        }

                                        if (mm.From != null)
                                            SRP.EmailFrom = mm.From.DisplayName + "::" + mm.From.Address;
                                        else
                                            SRP.EmailFrom = string.Empty;
                                        if (mm.Sender != null)
                                            SRP.EmailSender = mm.Sender.DisplayName + "::" + mm.Sender.Address;
                                        else
                                            SRP.EmailSender = string.Empty;
                                        SRP.EmailSubject = mm.Subject;

                                        AIName = "SubRenewalProcessor.dll";

                                        foreach (System.Net.Mail.MailAddress recipient in mm.To)
                                        {
                                            SentTo = recipient.Address;
                                            break;
                                        }

                                        if (!string.IsNullOrEmpty(SentTo))
                                        {
                                            try
                                            {
                                                SRP.EmailRecipient = SentTo;
                                            }
                                            catch (MissingMethodException mme)
                                            {
                                                EventLog.WriteEntry(mme.Message + "\r\n\r\n\r\n" + mme.StackTrace, EventLogEntryType.Error);
                                            }
                                        }

                                        try
                                        {
                                            if (SRP.ProcessEmail(emailBody))
                                            {
                                                //EventLog.WriteEntry("CRBService::Processed Email - Moving to Processed.");
                                                try
                                                {
                                                    Handled = true;
                                                    ic.MoveMessage(mm.Uid, "Processed");
                                                }
                                                catch (Exception ce)
                                                {
                                                    EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Renewal Email to Processed Folder:: {0}", ce.Message), EventLogEntryType.Error, 990);
                                                }
                                            }
                                            else
                                            {
                                                if (!string.IsNullOrEmpty(SRP.ProcessingErrorMessage)) emailBody = SRP.ProcessingErrorMessage;

                                                // Send Error Email
                                                EmailProvider ep = new EmailProvider();
                                                FileData fd = new FileData();
                                                fd.FileContents = SRP.PDFData;
                                                fd.FileName = "FormData.PDF";
                                                fd.FileType = "application/pdf";
                                                ep.Send("cpolson@skylogix.com", mm.Subject, emailBody, fd);
                                                ep = null;
                                                try
                                                {
                                                    ic.MoveMessage(mm.Uid, "Errors");
                                                }
                                                catch (Exception ce)
                                                {
                                                    EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Renewal Email to Errors Folder:: {0}", ce.Message), EventLogEntryType.Error, 900);
                                                }
                                            }
                                        }
                                        catch (Exception ce)
                                        {
                                            EventLog.WriteEntry(string.Format("CRBService::Error Trapped Processing Renewal Email using {0}:: {1}", AIName, ce.Message), EventLogEntryType.Error, 950);
                                        }

                                        if (!Handled)
                                        {
                                            try
                                            {
                                                ic.MoveMessage(mm.Uid, "To Be Managed");
                                            }
                                            catch (Exception ce)
                                            {
                                                EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Renewal Email to 'To Be Managed' Folder:: {0}", ce.Message), EventLogEntryType.Error, 970);
                                            }
                                        }

                                        emailcount++;

                                    }
                                } // foreach mail message

                                SRP = null;
                            }
                        }
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Renewal Emails Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1}\r\n\r\n", DateTime.Now, ce.Message), EventLogEntryType.Error);
                    }

                    // Do Work
                    // EventLog.WriteEntry(string.Format("CRBService::Process Emails Signalled at {0:yyyy-MM-dd HH:mm:ss}.", DateTime.Now));
                    try
                    {
                        using (ImapClient ic = new ImapClient("imap.gmail.com", "forms@creditrentboost.com", "NewCrb$!950", AuthMethods.Login, 993, true))
                        {
                            ic.SelectMailbox("INBOX");
                            int maxmessages = ic.GetMessageCount();

                            if (maxmessages > 0)
                            {
                                int fromMessage = maxmessages - 60; // changed from 30 to 60
                                int toMessage = (maxmessages - 1);

                                if (fromMessage < 0)
                                    fromMessage = 0;

                                //EventLog.WriteEntry(string.Format("CRBService::Process Emails Max-Messages: {0}. From-Message: {1}. To-Message: {2}.", maxmessages, fromMessage, toMessage));

                                MailMessage[] icml = ic.GetMessages(fromMessage, toMessage, false, false);
                                foreach (MailMessage mm in icml)
                                {
                                    bool Handled = false;

                                    //EventLog.WriteEntry(string.Format("CRBService::Processing Email Subject: {0}", mm.Subject));
                                    foreach (AddIn AI in Processors)
                                    {
                                        string Sender = string.Empty;
                                        if (mm.Sender == null)
                                            Sender = mm.From.DisplayName + "(" + mm.From.Address + ")";
                                        else
                                            Sender = mm.Sender.DisplayName + "(" + mm.Sender.Address + ")";

                                        //if (AI.AssemblyObject.CanProcess(mm.Subject))
                                        if (AI.AssemblyObject.CanProcess(mm.Subject, Sender))
                                        {
                                            string emailBody = string.Empty;
                                            Attachment ahtml = mm.AlternateViews.GetHtmlView();
                                            if (ahtml != null)
                                                emailBody = ahtml.Body;
                                            else
                                            {
                                                ahtml = mm.AlternateViews.GetTextView();
                                                if (ahtml != null)
                                                    emailBody = ahtml.Body;
                                                else
                                                    emailBody = mm.Body;
                                            }

                                            if (mm.From != null)
                                                AI.AssemblyObject.EmailFrom = mm.From.DisplayName + "::" + mm.From.Address;
                                            else
                                                AI.AssemblyObject.EmailFrom = string.Empty;
                                            if (mm.Sender != null)
                                                AI.AssemblyObject.EmailSender = mm.Sender.DisplayName + "::" + mm.Sender.Address;
                                            else
                                                AI.AssemblyObject.EmailSender = string.Empty;
                                            AI.AssemblyObject.EmailSubject = mm.Subject;

                                            AIName = AI.AssemblyFile;

                                            foreach (System.Net.Mail.MailAddress recipient in mm.To)
                                            {
                                                SentTo = recipient.Address;
                                                break;
                                            }

                                            if (!string.IsNullOrEmpty(SentTo))
                                            {
                                                try
                                                {
                                                    AI.AssemblyObject.EmailRecipient = SentTo;
                                                }
                                                catch (MissingMethodException mme)
                                                {
                                                    EventLog.WriteEntry(mme.Message + "\r\n\r\n\r\n" + mme.StackTrace, EventLogEntryType.Error);
                                                }
                                            }

                                            try
                                            {
                                                if (AI.AssemblyObject.ProcessEmail(emailBody))
                                                {
                                                    //EventLog.WriteEntry("CRBService::Processed Email - Moving to Processed.");
                                                    try
                                                    {
                                                        Handled = true;
                                                        ic.MoveMessage(mm.Uid, "Processed");
                                                    }
                                                    catch (Exception ce)
                                                    {
                                                        EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Email to Processed Folder:: {0}", ce.Message), EventLogEntryType.Error, 990);
                                                    }
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrEmpty(AI.AssemblyObject.ProcessingErrorMessage)) emailBody = AI.AssemblyObject.ProcessingErrorMessage;
                                                    // Send Error Email
                                                    EmailProvider ep = new EmailProvider();
                                                    FileData fd = new FileData();
                                                    fd.FileContents = AI.AssemblyObject.PDFData;
                                                    fd.FileName = "FormData.PDF";
                                                    fd.FileType = "application/pdf";
                                                    ep.Send("cpolson@skylogix.com", mm.Subject, emailBody, fd);
                                                    ep = null;
                                                    try
                                                    {
                                                        ic.MoveMessage(mm.Uid, "Errors");
                                                    }
                                                    catch (Exception ce)
                                                    {
                                                        EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Email to Errors Folder:: {0}", ce.Message), EventLogEntryType.Error, 900);
                                                    }
                                                }
                                            }
                                            catch (Exception ce)
                                            {
                                                EventLog.WriteEntry(string.Format("CRBService::Error Trapped Processing Email using {0}:: {1}", AI.AssemblyFile, ce.Message), EventLogEntryType.Error, 950);
                                            }
                                            finally
                                            {
                                                APICounts AE = AI.AssemblyObject.APICount;
                                                if (AE.createleads > 0) { CountAPICall("createlead", AE.createleads); }
                                                if (AE.getaccounts > 0) { CountAPICall("getaccount", AE.getaccounts); }
                                                if (AE.notecontacts > 0) { CountAPICall("notecontact", AE.notecontacts); }
                                                if (AE.noteleads > 0) { CountAPICall("notelead", AE.noteleads); }
                                                if (AE.searchcontacts > 0) { CountAPICall("searchcontact", AE.searchcontacts); }
                                                if (AE.searchleads > 0) { CountAPICall("searchlead", AE.searchleads); }
                                                if (AE.updateaccounts > 0) { CountAPICall("updateaccount", AE.updateaccounts); }
                                                if (AE.updatecontacts > 0) { CountAPICall("updatecontact", AE.updatecontacts); }
                                                if (AE.updateleads > 0) { CountAPICall("updatelead", AE.updateleads); }
                                                if (AE.uploadcontacts > 0) { CountAPICall("uploadcontact", AE.uploadcontacts); }
                                                if (AE.uploadleads > 0) { CountAPICall("uploadlead", AE.uploadleads); }
                                            }
                                        } // if can.process
                                    }  // foreach mail provider

                                    if (!Handled)
                                    {
                                        if (mm.Subject.ToLower() != "subscription renewal trigger")
                                        {
                                            try
                                            {
                                                ic.MoveMessage(mm.Uid, "To Be Managed");
                                            }
                                            catch (Exception ce)
                                            {
                                                EventLog.WriteEntry(string.Format("CRBService::Error Trapped Moving Email to 'To Be Managed' Folder:: {0}", ce.Message), EventLogEntryType.Error, 970);
                                            }
                                        }
                                    }

                                    emailcount++;
                                } // foreach mail message
                            }
                        }
                        //EventLog.WriteEntry(string.Format("CRBService::Process Emails read (0) emails.", emailcount));
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Emails Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1}\r\n\r\n{2}", DateTime.Now, ce.Message, AIName), EventLogEntryType.Error);
                    }
                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    this.gGate.WaitOne();
                    if (this.gStopProcessingEmails) continueRunning = false;
                }
            }
        }
        private void ProcessTUFields()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 0, 15, 30, 45
            if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate2.WaitOne();
            if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingTUFields)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool skipthisrecord = false;
                    bool EOF = false;
                    bool complianceError = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;

                    PaymentHistoryDate RunDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    PaymentHistoryDate RptDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    RptDate.DecrementDate();

                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Update Started.", EventLogEntryType.Warning);
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        ContactsFeedBack Tenants = null;
                        // Process Tenants that are in status '04. TU Fields'
                        #region Status 04 Processing
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            //if (ZM.SearchContacts("Contact_Status:starts_with:04.", Page, out CRMFeedback))
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Contact_Status:starts_with:04", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    if (CRMFeedback.Length <= 30000)
                                    {
                                        EventLog.WriteEntry(string.Format("TU Fields::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    }
                                    else
                                    {
                                        using (StreamWriter EL = new StreamWriter(string.Format(@"C:\IIS_App_Logs\ProcessTUFields_{0:yyyyMMdd}.log", DateTime.Now), true, Encoding.UTF8))
                                        {
                                            EL.WriteLine(string.Format("{2:HHmmss} - TU Fields::JSON Deserializing Error::{0} \r\n {1} \r\n\r\n", ce.Message, CRMFeedback, DateTime.Now));
                                        }
                                    }
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        ErrorLines = string.Empty;
                                        complianceError = false;

                                        if (Tenant.Contact_Status == "04. TU Fields")
                                        {
                                            #region TU Fields Processing
                                            string PIN = string.Empty;
                                            string RLN = string.Empty;
                                            string RLB = string.Empty;
                                            string RRC = string.Empty;
                                            string R1C = string.Empty;
                                            string R2C = string.Empty;
                                            string R3C = string.Empty;
                                            string NXV = string.Empty;
                                            string MLL = string.Empty;
                                            string RLS = string.Empty;
                                            string PRG = string.Empty;
                                            string DCL = string.Empty;
                                            string DCD = string.Empty;
                                            string PHT = string.Empty;
                                            string RPA = string.Empty;
                                            string RPC = string.Empty;
                                            bool fPIN = true;
                                            bool fRRF = true;
                                            bool fPHT = true;
                                            bool fRPA = true;
                                            bool fRPC = true;
                                            bool fRLS = true;
                                            bool noteRequired = false;
                                            bool fRSD = true;
                                            bool updateCloseDate = true;
                                            skipthisrecord = false;
                                            string[] PaymentHistorySegments = new string[2];
                                            PaymentHistory ph = null;

                                            if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                            {
                                                PaymentHistoryDate ROLS = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                if (ROLS.IsValid)
                                                {
                                                    if (ROLS.CompareYearMonthOnlyTo(RptDate) >= 0)
                                                        ph = new PaymentHistory(ROLS.PayMonth, ROLS.PayYear);
                                                    else
                                                        ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);
                                                }
                                                else
                                                    ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);
                                            }
                                            else
                                            {
                                                ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);
                                                fRSD = false;
                                                ErrorLines += string.Format("Zoho Tenant {0} doesn't have Rental Obligation Lease Start Date.", Tenant.id);
                                            }

                                            PaymentHistoryEntry pe = null;
                                            int monthcount = 0;
                                            #region Account PIN Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Account PIN Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                            AccountsFeedBack Accounts = null;
                                            CRMFeedback = string.Empty;

                                            if (Tenant.Account_Name != null)
                                            {
                                                CountAPICall("getaccount");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.GetAccount);
                                                if (ZM.GetAccount(Tenant.Account_Name.id, out CRMFeedback))
                                                {
                                                    try
                                                    {
                                                        Accounts = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                                    }
                                                    catch (Exception ce)
                                                    {
                                                        // Couldn't get Account - Tell Somebody
                                                        string dummy = ce.Message;
                                                        fPIN = false;
                                                        ErrorLines += "Zoho Account Retrieval Parse Failed. Property Identification Number Not Updated.";
                                                        Accounts = null;
                                                    }

                                                    if (Accounts != null)
                                                    {
                                                        if (string.IsNullOrEmpty(Accounts.data[0].Property_Identification_Number))
                                                        {
                                                            // PIN = "CR RENTBOOST";
                                                            string[] nameelements = Accounts.data[0].Account_Name.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                                                            if (nameelements.Length == 1)
                                                            {
                                                                if (nameelements[0].Length >= 9)
                                                                    PIN = nameelements[0].Substring(0, 9) + Accounts.data[0].Landlord_State;
                                                                else
                                                                    PIN = nameelements[0] + Accounts.data[0].Landlord_State;
                                                            }
                                                            else
                                                            {
                                                                if (nameelements[0].Length >= 5)
                                                                    PIN = nameelements[0].Substring(0, 5);
                                                                else
                                                                    PIN = nameelements[0];

                                                                if (nameelements[1].Length >= 4)
                                                                    PIN += nameelements[1].Substring(0, 4);
                                                                else
                                                                    PIN += nameelements[1];

                                                                if (PIN.Length < 9)
                                                                {
                                                                    if (nameelements.Length >= 3)
                                                                    {
                                                                        int whatsleft = 9 - PIN.Length;
                                                                        int howmanyperword = (whatsleft / (nameelements.Length - 2));
                                                                        for (int idx = 2; idx < nameelements.Length; idx++)
                                                                        {
                                                                            if (nameelements[idx].Length <= howmanyperword)
                                                                                PIN += nameelements[idx];
                                                                            else
                                                                                PIN += nameelements[idx].Substring(0, howmanyperword);
                                                                        }

                                                                        if (PIN.Length > 9)
                                                                            PIN = PIN.Substring(0, 9);
                                                                    }
                                                                }

                                                                PIN += Accounts.data[0].Landlord_State;
                                                            }

                                                            PIN = PIN.ToUpper().Trim();
                                                            PIN = ScrubItem(PIN);
                                                        }
                                                        else
                                                        {
                                                            PIN = Accounts.data[0].Property_Identification_Number;
                                                            if (PIN == "CR RENTBOOST")
                                                            {
                                                                string[] nameelements = Accounts.data[0].Account_Name.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                                                                if (nameelements.Length == 1)
                                                                {
                                                                    if (nameelements[0].Length >= 9)
                                                                        PIN = nameelements[0].Substring(0, 9) + Accounts.data[0].Landlord_State;
                                                                    else
                                                                        PIN = nameelements[0] + Accounts.data[0].Landlord_State;
                                                                }
                                                                else
                                                                {
                                                                    if (nameelements[0].Length >= 5)
                                                                        PIN = nameelements[0].Substring(0, 5);
                                                                    else
                                                                        PIN = nameelements[0];

                                                                    if (nameelements[1].Length >= 4)
                                                                        PIN += nameelements[1].Substring(0, 4);
                                                                    else
                                                                        PIN += nameelements[1];

                                                                    if (PIN.Length < 9)
                                                                    {
                                                                        if (nameelements.Length >= 3)
                                                                        {
                                                                            int whatsleft = 9 - PIN.Length;
                                                                            int howmanyperword = (whatsleft / (nameelements.Length - 2));
                                                                            for (int idx = 2; idx < nameelements.Length; idx++)
                                                                            {
                                                                                if (nameelements[idx].Length <= howmanyperword)
                                                                                    PIN += nameelements[idx];
                                                                                else
                                                                                    PIN += nameelements[idx].Substring(0, howmanyperword);
                                                                            }

                                                                            if (PIN.Length > 9)
                                                                                PIN = PIN.Substring(0, 9);
                                                                        }
                                                                    }

                                                                    PIN += Accounts.data[0].Landlord_State;
                                                                }

                                                                PIN = PIN.ToUpper().Trim();
                                                                PIN = ScrubItem(PIN);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        fPIN = false;
                                                        ErrorLines += " - Zoho Account Is NULL. Property Identification Number Not Updated.";
                                                    }
                                                }
                                                else
                                                {
                                                    // Couldn't get Account - Tell Somebody
                                                    fPIN = false;
                                                    ErrorLines += " - Zoho Account API Retrieval Failed. Property Identification Number Not Updated.";
                                                }
                                            }
                                            else
                                            {
                                                // Tenant Doesn't have an Account - Tell Somebody
                                                fPIN = false;
                                                ErrorLines += " - Zoho Tenant doesn't have an Account. Property Identification Number Not Updated.";
                                            }
                                            #endregion
                                            #region Miscellaneous Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Miscellaneous Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                            if (string.IsNullOrEmpty(Tenant.Rental_Lease_Number))
                                            {
                                                string tempstreetnumber = extractStreetNumber(Tenant.Street);
                                                RLN = Tenant.First_Name.Substring(0, 1).ToUpper() + Tenant.Last_Name.Substring(0, 1).ToUpper() + tempstreetnumber + string.Format("{0:HHmm}", DateTime.Now);
                                            }
                                            else
                                                RLN = Tenant.Rental_Lease_Number;

                                            if (string.IsNullOrEmpty(Tenant.Total_Rental_Obligation_Amount))
                                            {
                                                fRPA = false;
                                                ErrorLines += " - Total Rental Obligation Amount is missing.";
                                                fRPC = false;
                                                ErrorLines += " - Total Rental Obligation Amount Confirmed is missing.";
                                            }
                                            else
                                            {
                                                RPA = Tenant.Total_Rental_Obligation_Amount;
                                                RPC = Tenant.Total_Rental_Obligation_Amount;
                                            }

                                            if (string.IsNullOrEmpty(Tenant.Rental_Lease_Balance))
                                                RLB = "0";
                                            else
                                                RLB = Tenant.Rental_Lease_Balance;

                                            if (string.IsNullOrEmpty(Tenant.Rental_Lease_Relationship_Code))
                                            {
                                                if (hasRoommate(Tenant))
                                                {
                                                    RRC = "2";
                                                    if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                        R1C = "2";
                                                    if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                        R2C = "2";
                                                    if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                        R3C = "2";
                                                }
                                                else
                                                {
                                                    RRC = "1";
                                                    R1C = " ";
                                                    R2C = " ";
                                                    R3C = " ";
                                                }
                                            }
                                            else
                                            {
                                                RRC = Tenant.Rental_Lease_Relationship_Code;
                                                R1C = Tenant.R1_ECOA_Code;
                                                R2C = Tenant.R21_ECOA_Code;
                                                R3C = Tenant.R3_EOCA_Code;
                                            }

                                            if (Tenant.Reporting_Requested.Length > 0)
                                            {
                                                if (Tenant.Reporting_Requested[0].Contains("Current"))
                                                {
                                                    PaymentHistoryEntry le = ph[0];
                                                    string leDate = string.Format("{0:000000}", le.EntryDate);
                                                    int Month = int.Parse(leDate.Substring(4, 2)); //RunDate.PayMonth; // int.Parse(tbxRunDate.Text.Substring(0, 2));
                                                    int Year = int.Parse(leDate.Substring(0, 4)); //RunDate.PayYear; // int.Parse(tbxRunDate.Text.Substring(4, 4));
                                                    int NXVMonth = (Month + 1);
                                                    int NXVYear = Year;

                                                    if (NXVMonth > 12)
                                                    {
                                                        NXVMonth = 1;
                                                        NXVYear++;
                                                    }
                                                    NXV = string.Format("{2:0000}-{0:00}-{1:00}", NXVMonth, 5, NXVYear);

                                                    if (string.IsNullOrEmpty(Tenant.Monthly_Landlord))
                                                        MLL = "Yes";
                                                    else
                                                        MLL = Tenant.Monthly_Landlord;

                                                    if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status))
                                                        RLS = "11";
                                                    else
                                                        RLS = Tenant.A_Rental_Lease_Status;
                                                }
                                                else
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Monthly_Landlord))
                                                        MLL = "No";
                                                    else
                                                        MLL = Tenant.Monthly_Landlord;

                                                    if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = string.Empty;
                                                        if (!string.IsNullOrEmpty(Tenant.Still_Live_in_Home))
                                                        {
                                                            if (Tenant.Still_Live_in_Home.ToLower() == "yes")
                                                                RLS = "05";
                                                            else
                                                                RLS = "13";
                                                        }
                                                        else
                                                        {
                                                            RLS = Tenant.A_Rental_Lease_Status;
                                                            fRLS = false;
                                                            ErrorLines += " - Still Live In Home is missing.";
                                                            //if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment))
                                                            //    RLS = "13";
                                                            //else
                                                            //{
                                                            //    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Making PaymentHistory Date For {0}.", "Tenant.Date_of_Last_Payment"), EventLogEntryType.Warning);
                                                            //    PaymentHistoryDate DateOfLastPayment = new PaymentHistoryDate(Tenant.Date_of_Last_Payment);

                                                            //    if (RptDate.PayDate == DateOfLastPayment.PayDate)
                                                            //    {
                                                            //        if (Tenant.Still_Live_in_Home.ToLower() == "no")
                                                            //            RLS = "13";
                                                            //        else
                                                            //            RLS = "05";
                                                            //    }
                                                            //    else
                                                            //        RLS = "13";
                                                            //}
                                                        }
                                                    }
                                                    else
                                                        RLS = Tenant.A_Rental_Lease_Status;
                                                }

                                                if (Tenant.Reporting_Requested.Length > 1)
                                                {
                                                    fRRF = false;
                                                    ErrorLines += " - Reporting requested has more than one item.";
                                                }
                                            }
                                            else
                                            {
                                                fRRF = false;
                                                ErrorLines += " - Reporting requested is missing.";
                                            }

                                            if ((RLS == "05") || (RLS == "13"))
                                                PRG = "0";

                                            DCL = Tenant.Date_Closed;
                                            DCD = Tenant.Date_Closed;

                                            if (RLS == "05")
                                            {
                                                
                                                if (Tenant.Reporting_Requested.Length > 0)
                                                {
                                                    if (RequestedProductsContains(Tenant.Reporting_Requested, "Past 12 Months Only") || RequestedProductsContains(Tenant.Reporting_Requested, "Past 24 Months Only"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = string.Empty;
                                                        if (Tenant.Still_Live_in_Home.ToLower() == "no")
                                                            updateCloseDate = false;
                                                    }
                                                }

                                                if (updateCloseDate)
                                                {
                                                    DateTime thisMonth = DateTime.Parse(string.Format("{0:00}/01/{1:0000}", RunDate.PayMonth, RunDate.PayYear)); //DateTime.Parse(tbxRunDate.Text.Substring(0, 2) + "/01/" + tbxRunDate.Text.Substring(4, 4));
                                                    DCL = string.Format("{0:MMddyyyy}", thisMonth.AddDays(-1.0));
                                                    DCD = DCL.Replace("/", "");
                                                }
                                                else
                                                {
                                                    DCL = Tenant.Date_Closed;
                                                    DCD = Tenant.Date_Closed;
                                                }
                                            }
                                            #endregion
                                            #region Rental Lease Obligation Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::RLOD Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                            if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                            {
                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Making PaymentHistory Date For {0}.", "Tenant.Rental_Obligation_Lease_Start_Date"), EventLogEntryType.Warning);
                                                PaymentHistoryDate RentalStartDate = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);

                                                if (RentalStartDate.IsValid)
                                                {
                                                    if (Tenant.Reporting_Requested.Length > 0)
                                                    {
                                                        switch (RLS)
                                                        {
                                                            case "05":  // Transferred
                                                                switch (Tenant.Reporting_Requested[0])
                                                                {
                                                                    case "Past 12 Months Only":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                break;
                                                                            if (monthcount > 12)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    case "Past 24 Months Only":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    default:    // Reporting we don't know how to handle - tell somebody
                                                                        ErrorLines += " - Rental Lease Status is 05 but reporting requested not past 12 or 24 months.";
                                                                        fPHT = false;
                                                                        skipthisrecord = true;
                                                                        break;
                                                                }
                                                                if (!skipthisrecord)
                                                                {
                                                                    PHT = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                                                                    if (!ph.ToString().Contains("0"))
                                                                    {
                                                                        fPHT = false;
                                                                        ErrorLines += " - Payment History does not contain at least 1 ZERO (0).";
                                                                    }
                                                                }
                                                                break;
                                                            case "11":  // Current - never have closed date, never have Ds
                                                                switch (Tenant.Reporting_Requested[0])
                                                                {
                                                                    case "Current Rent Only":
                                                                        pe = ph[0];
                                                                        pe.EntryState = "0";
                                                                        break;
                                                                    case "Current & Past 12 Months":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                break;
                                                                            if (monthcount > 12)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    case "Current & Past 24 Months":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                                                                        ErrorLines += " - Rental Lease Status is 11 but reporting requested is not current, current and past 12, or current and past 24 months.";
                                                                        fPHT = false;
                                                                        skipthisrecord = true;
                                                                        break;
                                                                }
                                                                if (!skipthisrecord)
                                                                {
                                                                    PHT = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                                                                    if (!ph.ToString().Contains("0"))
                                                                    {
                                                                        fPHT = false;
                                                                        ErrorLines += " - Payment History does not contain at least 1 ZERO (0).";
                                                                    }
                                                                }
                                                                break;
                                                            case "13":  // Paid Closed 
                                                                string replacement = "D";
                                                                if (!string.IsNullOrEmpty(DCD))
                                                                {
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("Making PaymentHistory Date For {0}.", "DCD"), EventLogEntryType.Warning);
                                                                    PaymentHistoryDate ClosedDate = new PaymentHistoryDate(DCD);
                                                                    if (ClosedDate.IsValid)
                                                                    {
                                                                        switch (Tenant.Reporting_Requested[0])
                                                                        {
                                                                            case "Past 12 Months Only":
                                                                                for (int idx = 0; idx < 24; idx++)
                                                                                {
                                                                                    pe = ph[idx];
                                                                                    if (pe.EntryDate <= ClosedDate.PayDate)
                                                                                        replacement = "0";
                                                                                    if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                        break;
                                                                                    if (monthcount > 12)
                                                                                        break;
                                                                                    pe.EntryState = replacement;
                                                                                    monthcount++;
                                                                                }
                                                                                break;
                                                                            case "Past 24 Months Only":
                                                                                for (int idx = 0; idx < 24; idx++)
                                                                                {
                                                                                    pe = ph[idx];
                                                                                    if (pe.EntryDate <= ClosedDate.PayDate)
                                                                                        replacement = "0";
                                                                                    if (pe.EntryDate < RentalStartDate.PayDate)
                                                                                        break;
                                                                                    pe.EntryState = replacement;
                                                                                    monthcount++;
                                                                                }
                                                                                break;
                                                                            default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                                                                                ErrorLines += " - Rental Lease Status is 13 but reporting requested is not past 12 or past 24 months.";
                                                                                fPHT = false;
                                                                                skipthisrecord = true;
                                                                                break;
                                                                        }
                                                                        if (!skipthisrecord)
                                                                        {
                                                                            PHT = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                                                                            if (!ph.ToString().Contains("0"))
                                                                            {
                                                                                fPHT = false;
                                                                                ErrorLines += " - Payment History does not contain at least 1 ZERO (0).";
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        // Date Closed is bad - tell somebody
                                                                        fPHT = false;
                                                                        ErrorLines += string.Format("Tenant Status uses Closed Date to calculate Payment History but it is not valid. Actual Date Value[{0}]. Payment History Not Updated.", DCL);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    // Date Closed is bad - tell somebody
                                                                    fPHT = false;
                                                                    ErrorLines += " - Tenant Status uses Closed Date to calculate Payment History but it is not set. Payment History Not Updated.";
                                                                }
                                                                break;
                                                            default:    // Status is one I'm NOT touching right now
                                                                break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    fPHT = false;
                                                    ErrorLines += " - Tenant Rental Obligation Lease Start Date is invalid. Payment History Not Updated.";
                                                }
                                            }
                                            else
                                            {
                                                fPHT = false;
                                                ErrorLines += " - Tenant Rental Obligation Lease Start Date is empty. Payment History Not Updated.";
                                            }
                                            #endregion
                                            #region Property Identification Number Update
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::PIN Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                            if (Accounts != null)
                                            {
                                                if (!string.IsNullOrEmpty(PIN))
                                                {
                                                    StringBuilder au = new StringBuilder("{ \"data\": [");
                                                    au.Append("{ ");
                                                    au.Append(string.Format("\"Landlord_from_Tenant\": [\"{0}\"],", Tenant.Landlord_From_Tenant));
                                                    au.Append("\"Account_Type\":\"Landlord\",");
                                                    au.Append(string.Format("\"Property_Identification_Number\":\"{0}\"", PIN));
                                                    au.Append(" }");
                                                    au.Append("], \"trigger\":[]}");

                                                    // Update Account
                                                    CountAPICall("updateaccount");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateAccount);
                                                    if (!ZM.UpdateAccount(Tenant.Account_Name.id, au.ToString()))
                                                    {
                                                        // Failed Account Update  - Tell Somebody
                                                        fPIN = false;
                                                        ErrorLines += " - Zoho Account Update Failed";
                                                        ErrorLines += ZM.DebugText;
                                                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::CRM API Error::UpdateAccount::{0}", ZM.DebugText), EventLogEntryType.Warning);
                                                    }
                                                }
                                            }
                                            #endregion
                                            #region Age Group Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Age Group Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                            // Primary Tenant
                                            bool updatePTAgeGroup = true;
                                            string PTAgeGroup = "- None -";
                                            DateTime PTDOB = DateTime.MinValue;
                                            if (string.IsNullOrEmpty(Tenant.Tenant_Date_of_Birth))
                                                updatePTAgeGroup = false;
                                            else
                                            {
                                                string tempPTDOB = Tenant.Tenant_Date_of_Birth.Substring(0, 2) + "/" + Tenant.Tenant_Date_of_Birth.Substring(2, 2) + "/" + Tenant.Tenant_Date_of_Birth.Substring(4);
                                                if (DateTime.TryParse(tempPTDOB, out PTDOB))
                                                {
                                                    int PTAgeInYears = DateTime.Now.Year - PTDOB.Year;
                                                    if (DateTime.Now.Month < PTDOB.Month) PTAgeInYears--;
                                                    PTAgeGroup = DetermineAgeGroup(PTAgeInYears);
                                                }
                                                else
                                                    updatePTAgeGroup = false;
                                            }
                                            // First Roommate
                                            bool updateR1AgeGroup = true;
                                            string R1AgeGroup = "- None -";
                                            DateTime R1DOB = DateTime.MinValue;
                                            if (string.IsNullOrEmpty(Tenant.R1_DOB))
                                                updateR1AgeGroup = false;
                                            else
                                            {
                                                string tempR1DOB = Tenant.R1_DOB.Substring(0, 2) + "/" + Tenant.R1_DOB.Substring(2, 2) + "/" + Tenant.R1_DOB.Substring(4);
                                                if (DateTime.TryParse(tempR1DOB, out R1DOB))
                                                {
                                                    int R1AgeInYears = DateTime.Now.Year - R1DOB.Year;
                                                    if (DateTime.Now.Month < R1DOB.Month) R1AgeInYears--;
                                                    R1AgeGroup = DetermineAgeGroup(R1AgeInYears);
                                                }
                                                else
                                                    updateR1AgeGroup = false;
                                            }
                                            #endregion
                                            #region Update Contact
                                            // Update Contact
                                            StringBuilder cu = new StringBuilder("{ \"data\": [");
                                            cu.Append("{ ");
                                            cu.Append("\"Property_Identification_Number\":\"CR RENTBOOST\",");
                                            cu.Append(string.Format("\"Rental_Lease_Number\":\"{0}\",", RLN));
                                            cu.Append(string.Format("\"Rental_Lease_Balance\":\"{0}\",", RLB));
                                            cu.Append(string.Format("\"Rental_Lease_Relationship_Code\":\"{0}\",", RRC));
                                            if (updatePTAgeGroup)
                                                cu.Append(string.Format("\"Age_Group\":\"{0}\",", PTAgeGroup));
                                            if (updateR1AgeGroup)
                                                cu.Append(string.Format("\"R1_Age_Group\":\"{0}\",", R1AgeGroup));
                                            cu.Append(string.Format("\"R1_ECOA_Code\":\"{0}\",", R1C));
                                            cu.Append(string.Format("\"R21_ECOA_Code\":\"{0}\",", R2C));
                                            cu.Append(string.Format("\"R3_EOCA_Code\":\"{0}\",", R3C));
                                            cu.Append(string.Format("\"Monthly_Landlord\":\"{0}\",", MLL));
                                            cu.Append(string.Format("\"A_Rental_Lease_Status\":\"{0}\",", RLS));
                                            cu.Append(string.Format("\"B_Payment_Rating\":\"{0}\",", PRG));
                                            if (fRPA) cu.Append(string.Format("\"Rental_Lease_Payment_Amount\":\"{0}\",", RPA));
                                            if (fRPC) cu.Append(string.Format("\"Rental_Lease_Payment_Amount_Confirmed\":\"{0}\",", RPC));
                                            if (!string.IsNullOrEmpty(PHT))
                                            {
                                                if (fPHT) cu.Append(string.Format("\"Payment_History\": \"{0}\",", PHT));
                                            }
                                            if (updateCloseDate)
                                                cu.Append(string.Format("\"Date_Closed\":\"{0}\",", DCL));
                                            if (!string.IsNullOrEmpty(NXV))
                                                cu.Append(string.Format("\"Last_Verify\":\"{0}\",", NXV));

                                            //if (fPIN && fRLN && fRLB && fRRC && fR1C && fR2C && fR3C && fNXV && fMLL && fRLS && fPRG && fDCL && fPHT && fRPA && fRPC && fRSD)
                                            if (fPIN && fPHT && fRPA && fRPC && fRSD && fRRF & fRLS)
                                                cu.Append("\"Contact_Status\":\"04a. Compliance Review\""); //cu.Append(",\"Contact_Status\":\"05.  IDM\"");
                                            else
                                            {
                                                //cu.Append(",\"Contact_Status\":\"07b. File Rejected\"");
                                                cu.Append("\"Contact_Status\":\"04. TU Field Error\"");
                                                noteRequired = true;
                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Contact Rejected::{0}", ErrorLines), EventLogEntryType.Warning);
                                            }

                                            cu.Append(" }");
                                            cu.Append("], \"trigger\":[\"workflow\"]}");

                                            CountAPICall("updatecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                            if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                            {
                                                ErrorLines += " - Zoho Contact Update Failed";
                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::{0} - Zoho Contact Update TU Fields Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                            }
                                            else
                                            {
                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::{0} - Zoho Contact Updated TU Fields.", Tenant.id), EventLogEntryType.Warning);
                                            }
                                            #endregion
                                            #region Write Notes
                                            if (noteRequired)
                                            {
                                                CountAPICall("notecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                ZM.AddToContactNotes(Tenant.id, "TU Fields Update Error", ErrorLines);
                                            }
                                            #endregion
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Compliance Review Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::Processing {0}.", Tenant.id), EventLogEntryType.Warning);
                                            if (string.IsNullOrEmpty(Tenant.API_Data)) Tenant.API_Data = string.Empty;
                                            
                                            //if ((Tenant.Contact_Status == "04a. Compliance Review") && (Tenant.API_Data.ToLower() == "test"))
                                            if (Tenant.Contact_Status == "04a. Compliance Review")
                                            {
                                                string Landlord_Completed = string.Empty;

                                                #region 1) Reporting Field Check
                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::Reporting Field Check For {0}.", Tenant.id), EventLogEntryType.Warning);
                                                if (string.IsNullOrEmpty(Tenant.Reporting))
                                                {
                                                    complianceError = true;
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");
                                                    cu.Append("\"Contact_Status\":\"04b. Compliance Error\"");
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        // Failed Contact Update  - Tell Somebody
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                                    }
                                                    else
                                                    {
                                                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                    }

                                                    CountAPICall("notecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                    ZM.AddToContactNotes(Tenant.id, "Compliance Review Error", "ERROR:  Reporting was not set to Not Reporting during Compliance Review.");
                                                }
                                                else
                                                {
                                                    if (Tenant.Reporting.ToLower() != "not reporting")
                                                    {
                                                        complianceError = true;
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        cu.Append("\"Contact_Status\":\"04b. Compliance Error\"");
                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            // Failed Contact Update  - Tell Somebody
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                                        }
                                                        else
                                                        {
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                        }

                                                        CountAPICall("notecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                        ZM.AddToContactNotes(Tenant.id, "Compliance Review Error", "ERROR:  Reporting was not set to Not Reporting during Compliance Review.");
                                                    }
                                                }
                                                #endregion

                                                if (!complianceError)
                                                {
                                                    complianceError = false; // reset to start all over after hard error with reporting field error

                                                    #region 2) Account Info
                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::Account Info Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                                    AccountsFeedBack Accounts = null;
                                                    CRMFeedback = string.Empty;
                                                    CountAPICall("getaccount");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.GetAccount);
                                                    if (ZM.GetAccount(Tenant.Account_Name.id, out CRMFeedback))
                                                    {
                                                        try
                                                        {
                                                            Accounts = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                                        }
                                                        catch (Exception ce)
                                                        {
                                                            // Couldn't get Account - Tell Somebody
                                                            string dummy = ce.Message;
                                                            ErrorLines += "Zoho Account Retrieval Parse Failed. Property Identification Number Not Updated.";
                                                            Accounts = null;
                                                        }

                                                        if (Accounts != null)
                                                        {
                                                            if (Accounts.data.Length > 0)
                                                            {
                                                                Account thisAccount = Accounts.data[0];

                                                                if (string.IsNullOrEmpty(thisAccount.Landlord_Completed)) thisAccount.Landlord_Completed = "No";

                                                                Landlord_Completed = thisAccount.Landlord_Completed;

                                                                StringBuilder au = new StringBuilder("{ \"data\": [");
                                                                au.Append("{ ");
                                                                au.Append("\"Account_Status\":\"08. Completed\",");
                                                                au.Append("\"Account_Type\":\"Landlord\",");
                                                                au.Append(string.Format("\"Landlord_from_Tenant\": [\"{0}\"],", Tenant.Landlord_From_Tenant));

                                                                if (!string.IsNullOrEmpty(Tenant.Landlord_Vetting))
                                                                {
                                                                    if ((Tenant.Landlord_Vetting.ToLower() == "gregg") || (Tenant.Landlord_Vetting.ToLower() == "done - il"))
                                                                    {
                                                                        au.Append("\"Landlord_Type\":\"Individual Owner - Own Name\",");
                                                                        thisAccount.Landlord_Type = "Individual Owner - Own Name";
                                                                    }
                                                                    else
                                                                    {
                                                                        if ((Tenant.Landlord_Vetting.ToLower() == "gary") || (Tenant.Landlord_Vetting.ToLower() == "done - pmc"))
                                                                        {
                                                                            au.Append("\"Landlord_Type\":\"PM 50+\",");
                                                                            thisAccount.Landlord_Type = "PM 50+";
                                                                        }
                                                                    }
                                                                }

                                                                if (string.IsNullOrEmpty(thisAccount.Property_Identification_Number))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Landlord Property Identification Number is Blank.";
                                                                    complianceError = true;
                                                                }
                                                                
                                                                if (string.IsNullOrEmpty(thisAccount.Landlord_Type))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Landlord Size is Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (!string.IsNullOrEmpty(thisAccount.Landlord_Type))
                                                                {
                                                                    if (thisAccount.Landlord_Type.ToLower() == "pm 50+")
                                                                    {
                                                                        if (string.IsNullOrEmpty(thisAccount.Website))
                                                                        {
                                                                            ErrorLines += "ERROR during Compliance Review:  There is no PMC/Landlord Website.";
                                                                            complianceError = true;
                                                                        }
                                                                    }
                                                                }

                                                                if (string.IsNullOrEmpty(thisAccount.Landlord_Street))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Landlord Address is Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (thisAccount.Landlord_from_Tenant.Length > 0)
                                                                {
                                                                    bool HasYesOrNo = false;
                                                                    foreach (string lftValue in thisAccount.Landlord_from_Tenant)
                                                                    {
                                                                        if ((lftValue.ToLower() == "yes") || (lftValue.ToLower() == "no"))
                                                                        {
                                                                            HasYesOrNo = true;
                                                                        }
                                                                    }

                                                                    if (!HasYesOrNo)
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  Account Landlord From Tenant is not Yes or No.";
                                                                        complianceError = true;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Account Landlord From Tenant is Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (!HasCurrentProduct(Tenant.Reporting_Requested))
                                                                {
                                                                    gMonthlyLandlordSetting = MonthlyLandlordTypes.TenantNo;
                                                                }
                                                                else
                                                                {
                                                                    if (AccountHasCurrentTenants(Tenant.Account_Name.id, Tenant.id, ZM) > 1)
                                                                    {
                                                                        gMonthlyLandlordSetting = MonthlyLandlordTypes.TenantNoLandlordYes;
                                                                        au.Append("\"Monthly_Email\":\"Yes\",");
                                                                        au.Append(string.Format("\"Next_Verify\":\"{1:0000}-{0:00}-05\",", DateTime.Now.Month, DateTime.Now.Year));
                                                                        string[] UpdatedList = ResolveTenantList(thisAccount.Tenants, thisAccount.Tenant_List_2, thisAccount.Tenant_List_3, TenantAccountListEntry(Tenant));
                                                                        // List 1 or List 2 processing
                                                                        string List1 = string.Empty;
                                                                        string List2 = string.Empty;
                                                                        string List3 = string.Empty;

                                                                        foreach (string Entry in UpdatedList)
                                                                        {
                                                                            if ((List1.Length + 1 + Entry.Length) > 2000)
                                                                            {
                                                                                if ((List2.Length + 1 + Entry.Length) > 2000)
                                                                                {
                                                                                    if ((List3.Length + 1 + Entry.Length) > 2000)
                                                                                    {
                                                                                        // catastrophic Error - no room for this tenant
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        // add to list3
                                                                                        List3 += "\n" + Entry;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    // add to list2
                                                                                    List2 += "\n" + Entry;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                // add to list1
                                                                                List1 += "\n" + Entry;
                                                                            }
                                                                        }

                                                                        //if (List1 != string.Empty)
                                                                        //    au.Append(string.Format("\"Tenants\":\"{0}\",", List1));

                                                                        //if (List2 != string.Empty)
                                                                        //    au.Append(string.Format("\"Tenants_List_2\":\"{0}\",", List2));

                                                                        //if (List3 != string.Empty)
                                                                        //    au.Append(string.Format("\"Tenants_List_3\":\"{0}\",", List1));
                                                                    }
                                                                    else
                                                                    {
                                                                        gMonthlyLandlordSetting = MonthlyLandlordTypes.TenantYes;
                                                                    }
                                                                }

                                                                string tempTest = au.ToString();
                                                                if (tempTest.EndsWith(","))
                                                                {
                                                                    tempTest = tempTest.Substring(0, (tempTest.Length - 1));
                                                                    au = new StringBuilder(tempTest);
                                                                }

                                                                au.Append(" }");
                                                                au.Append("], \"trigger\":[]}");

                                                                // Update Account
                                                                CountAPICall("updateaccount");
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateAccount);
                                                                if (!ZM.UpdateAccount(Tenant.Account_Name.id, au.ToString()))
                                                                {
                                                                    // Failed Account Update  - Tell Somebody
                                                                    ErrorLines += " - Zoho Account Update Failed";
                                                                    ErrorLines += ZM.DebugText;
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::CRM API Error::UpdateAccount(Compliance Review)::{0}", ZM.DebugText), EventLogEntryType.Warning);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ErrorLines += " - Zoho Account Is NULL. Property Identification Number Not Updated.";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // Couldn't get Account - Tell Somebody
                                                        ErrorLines += " - Zoho Account API Retrieval Failed. Property Identification Number Not Updated.";
                                                    }
                                                    #endregion

                                                    #region 3) Miscellaneous Info
                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::Miscellaneous Info Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                                    // 3a
                                                    if ((!string.IsNullOrEmpty(Tenant.Missing_Doc_1)) || (!string.IsNullOrEmpty(Tenant.Missing_Doc_2)) || (!string.IsNullOrEmpty(Tenant.Missing_Doc_3)) || (!string.IsNullOrEmpty(Tenant.Missing_Doc_4)) || (!string.IsNullOrEmpty(Tenant.Missing_Doc_5)) || (!string.IsNullOrEmpty(Tenant.Missing_Doc_6)) ||
                                                        (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) || (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) || (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) || (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) || (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) || (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)))
                                                    {
                                                        #region 3a Processing
                                                        ErrorLines += "ERROR during Compliance Review:  Missing Doc was not Blank.";
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        cu.Append("\"Contact_Status\":\"04b. Compliance Error\"");
                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            // Failed Contact Update  - Tell Somebody
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                                        }
                                                        else
                                                        {
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                        }

                                                        CountAPICall("notecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                        ZM.AddToContactNotes(Tenant.id, "Compliance Review Error", ErrorLines);
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        // 3e
                                                        #region 3e Processing
                                                        if (!string.IsNullOrEmpty(Tenant.VOR_Needed))
                                                        {
                                                            if (Tenant.VOR_Needed.ToLower() != "vor completed")
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  VOR Needed was not set to VOR Completed.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  VOR Needed was not set to VOR Completed.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // 3f
                                                        #region 3f Processing
                                                        if (!string.IsNullOrEmpty(Tenant.Date_Closed))
                                                        {
                                                            bool found_current_product = false;
                                                            foreach (string product in Tenant.Reporting_Requested)
                                                            {
                                                                if ((product.ToLower() == "current rent only") || (product.ToLower() == "current & past 12 months") || (product.ToLower() == "current & past 24 months")) found_current_product = true;
                                                            }

                                                            if (found_current_product)
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  There is a Date Closed date when Reporting Requested includes Current Reporting.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            bool found_pastonly_product = false;
                                                            foreach (string product in Tenant.Reporting_Requested)
                                                            {
                                                                if ((product.ToLower() == "past 12 months only") || (product.ToLower() == "past 24 months only")) found_pastonly_product = true;
                                                            }

                                                            if (found_pastonly_product)
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  There is no Date Closed when Reporting Requested is for Past Reporting only.";
                                                                complianceError = true;
                                                            }
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Date of Last Payment is Blank.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // 3g
                                                        #region 3g Processing
                                                        if (!string.IsNullOrEmpty(Tenant.Landlord_From_Tenant))
                                                        {
                                                            if (Tenant.Landlord_From_Tenant.ToLower() != "no")
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Male_Female))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Tenant Demographic Info (Male / Female) were Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (string.IsNullOrEmpty(Tenant.Ethnicity))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Tenant Demographic Info (Ethnicity) were Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (string.IsNullOrEmpty(Tenant.Age_Group))
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  Tenant Demographic Info (Age Group) were Blank.";
                                                                    complianceError = true;
                                                                }

                                                                if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.R1_Male_Female))
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  Roommate Demographic Info (Male / Female) were Blank.";
                                                                        complianceError = true;
                                                                    }

                                                                    if (Tenant.R1_Ethnicity.Length == 0)
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  Roommate Demographic Info (Ethnicity) were Blank.";
                                                                        complianceError = true;
                                                                    }

                                                                    if (string.IsNullOrEmpty(Tenant.R1_Age_Group))
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  Roommate Demographic Info (Age Group) were Blank.";
                                                                        complianceError = true;
                                                                    }
                                                                }
                                                            }

                                                            if (Tenant.Landlord_From_Tenant.ToLower() == "yes")
                                                            {
                                                                if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Monthly_Sub_Number) && string.IsNullOrEmpty(Tenant.Subscription_Number) && string.IsNullOrEmpty(Tenant.Annual_Sub_Number))
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  A Subscription Number(Monthly_Sub_Number, Subscription_Number, Annual_Sub_Number) is missing.";
                                                                        complianceError = true;
                                                                    }
                                                                }
                                                            }

                                                            if ((Tenant.Landlord_From_Tenant.ToLower() != "yes") && (Tenant.Landlord_From_Tenant.ToLower() != "no"))
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Landlord From Tenant is not Yes or No.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Landlord From Tenant is missing.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // 3h
                                                        #region 3h Processing
                                                        bool NeedToChangeRolsd = false;
                                                        string newRolsd = string.Empty;
                                                        int numberofmonths18plus1 = (18 * 12) + 1;
                                                        if (!string.IsNullOrEmpty(Tenant.Tenant_Date_of_Birth))
                                                        {
                                                            if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                            {
                                                                string rolsdMonth = Tenant.Rental_Obligation_Lease_Start_Date.Substring(0, 2);
                                                                string rolsdDay = Tenant.Rental_Obligation_Lease_Start_Date.Substring(2, 2);
                                                                string rolsdYear = Tenant.Rental_Obligation_Lease_Start_Date.Substring(4);
                                                                DateTime rolsdDate = DateTime.Parse(string.Format("{0}/{1}/{2}", rolsdMonth, rolsdDay, rolsdYear));
                                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review:: {0} ROLSD is {1:MM/dd/yyyy}.", Tenant.id, rolsdDate), EventLogEntryType.Warning);

                                                                string dobMonth = Tenant.Tenant_Date_of_Birth.Substring(0, 2);
                                                                string dobDay = Tenant.Tenant_Date_of_Birth.Substring(2, 2);
                                                                string dobYear = Tenant.Tenant_Date_of_Birth.Substring(4);
                                                                DateTime dobDate = DateTime.Parse(string.Format("{0}/{1}/{2}", dobMonth, dobDay, dobYear));
                                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::{0} DOB is {1:MM/dd/yyyy}.", Tenant.id, dobDate), EventLogEntryType.Warning);

                                                                DateTime plsDate = dobDate.AddMonths(numberofmonths18plus1);
                                                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::{0} 18yrs + 1 month is {1:MM/dd/yyyy}.", Tenant.id, plsDate), EventLogEntryType.Warning);

                                                                if (plsDate > rolsdDate)
                                                                {
                                                                    // Tenant too young
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::{0} 18yrs + 1 month is < ROLSD.", Tenant.id), EventLogEntryType.Warning);
                                                                    if (hasRoommate(Tenant))
                                                                    {
                                                                        // Roommate 1
                                                                        if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R1_DOB))
                                                                            {
                                                                                string r1Month = Tenant.R1_DOB.Substring(0, 2);
                                                                                string r1Day = Tenant.R1_DOB.Substring(2, 2);
                                                                                string r1Year = Tenant.R1_DOB.Substring(4);
                                                                                DateTime r1Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r1Month, r1Day, r1Year));
                                                                                DateTime r1pDate = r1Date.AddMonths(numberofmonths18plus1);

                                                                                if (r1pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 1 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 1 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                        // Roommate 2
                                                                        if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R2_DOB))
                                                                            {
                                                                                string r2Month = Tenant.R1_DOB.Substring(0, 2);
                                                                                string r2Day = Tenant.R1_DOB.Substring(2, 2);
                                                                                string r2Year = Tenant.R1_DOB.Substring(4);
                                                                                DateTime r2Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r2Month, r2Day, r2Year));
                                                                                DateTime r2pDate = r2Date.AddMonths(numberofmonths18plus1);

                                                                                if (r2pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 2 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 2 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                        // Roommate 3
                                                                        if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R3_DOB))
                                                                            {
                                                                                string r3Month = Tenant.R3_DOB.Substring(0, 2);
                                                                                string r3Day = Tenant.R3_DOB.Substring(2, 2);
                                                                                string r3Year = Tenant.R3_DOB.Substring(4);
                                                                                DateTime r3Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r3Month, r3Day, r3Year));
                                                                                DateTime r3pDate = r3Date.AddMonths(numberofmonths18plus1);

                                                                                if (r3pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 3 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 3 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        NeedToChangeRolsd = true;
                                                                        newRolsd = string.Format("{0:00}{1:00}{2:0000}", plsDate.Month, plsDate.Day, plsDate.Year);
                                                                        CountAPICall("notecontact");
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                                        ZM.AddToContactNotes(Tenant.id, "Compliance Review Error", "Rental_Obligation_Lease_Start_Date was changed due to Tenant not being 18yrs and 1 month at time of original Lease Start Date.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    // Tenant is old enough
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::{0} 18yrs + 1 month is < ROLSD.", Tenant.id), EventLogEntryType.Warning);
                                                                    if (hasRoommate(Tenant))
                                                                    {
                                                                        // Roommate 1
                                                                        if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R1_DOB))
                                                                            {
                                                                                string r1Month = Tenant.R1_DOB.Substring(0, 2);
                                                                                string r1Day = Tenant.R1_DOB.Substring(2, 2);
                                                                                string r1Year = Tenant.R1_DOB.Substring(4);
                                                                                DateTime r1Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r1Month, r1Day, r1Year));
                                                                                DateTime r1pDate = r1Date.AddMonths(numberofmonths18plus1);

                                                                                if (r1pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 1 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 1 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                        // Roommate 2
                                                                        if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R2_DOB))
                                                                            {
                                                                                string r2Month = Tenant.R2_DOB.Substring(0, 2);
                                                                                string r2Day = Tenant.R2_DOB.Substring(2, 2);
                                                                                string r2Year = Tenant.R2_DOB.Substring(4);
                                                                                DateTime r2Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r2Month, r2Day, r2Year));
                                                                                DateTime r2pDate = r2Date.AddMonths(numberofmonths18plus1);

                                                                                if (r2pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 2 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 2 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                        // Roommate 3
                                                                        if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                                        {
                                                                            if (!string.IsNullOrEmpty(Tenant.R3_DOB))
                                                                            {
                                                                                string r3Month = Tenant.R3_DOB.Substring(0, 2);
                                                                                string r3Day = Tenant.R3_DOB.Substring(2, 2);
                                                                                string r3Year = Tenant.R3_DOB.Substring(4);
                                                                                DateTime r3Date = DateTime.Parse(string.Format("{0}/{1}/{2}", r3Month, r3Day, r3Year));
                                                                                DateTime r3pDate = r3Date.AddMonths(numberofmonths18plus1);

                                                                                if (r3pDate > rolsdDate)
                                                                                {
                                                                                    ErrorLines += "ERROR during Compliance Review:  Roommate 3 not 18 yrs old at Least Start Date.";
                                                                                    complianceError = true;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 3 Date Of Birth is missing.";
                                                                                complianceError = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Obligation Start Date is missing.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Date Of Birth is missing.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // 3i
                                                        #region 3i Processing
                                                        if (!string.IsNullOrEmpty(Tenant.Monthly_Subscription))
                                                        {
                                                            if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                            {
                                                                if (!string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_1))
                                                                {
                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() != "subscription") && (Tenant.Renewal_Status_Yr_1.ToLower() != "subscription yearly"))
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  The Monthly Subscription is 'YES' and Original Status Yr 1 is NOT 'subscription' nor 'subscription yearly'.";
                                                                        complianceError = true;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    ErrorLines += "ERROR during Compliance Review:  The Monthly Subscription is 'YES' and Original Status Yr 1 is EMPTY.";
                                                                    complianceError = true;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (Tenant.Monthly_Subscription.ToLower() == "no")
                                                                {
                                                                    if (!string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_1))
                                                                    {
                                                                        if ((Tenant.Renewal_Status_Yr_1.ToLower() != "free") && (Tenant.Renewal_Status_Yr_1.ToLower() != "paid") && (Tenant.Renewal_Status_Yr_1.ToLower() != "subscription yearly"))
                                                                        {
                                                                            ErrorLines += "ERROR during Compliance Review:  The Monthly Subscription is 'NO' and Original Status Yr 1 has something other than 'Paid', 'Free', nor 'Subscription Yearly' written.";
                                                                            complianceError = true;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        ErrorLines += "ERROR during Compliance Review:  The Monthly Subscription is 'NO' and Original Status Yr 1 is EMPTY.";
                                                                        complianceError = true;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    // maybe an error if it's not YES or NO
                                                                }
                                                            }
                                                        }
                                                        #endregion

                                                        // 3j
                                                        #region 3j Processing
                                                        if (!string.IsNullOrEmpty(Tenant.Payment_Declined))
                                                        {
                                                            if ((Tenant.Payment_Declined.ToLower() == "yes") || (Tenant.Payment_Declined.ToLower() == "cancelled"))
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  File has Collections.";
                                                                complianceError = true;
                                                            }
                                                        }

                                                        if ((!string.IsNullOrEmpty(Tenant.Invoice_1)) || (!string.IsNullOrEmpty(Tenant.Invoice_2)) || (!string.IsNullOrEmpty(Tenant.Invoice_3)) || (!string.IsNullOrEmpty(Tenant.Invoice_4)))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  File has Collections.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // 3l
                                                        #region 3l Processing
                                                        bool InTheFuture = false;
                                                        if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                        {
                                                            string rolsdMonth = Tenant.Rental_Obligation_Lease_Start_Date.Substring(0, 2);
                                                            string rolsdDay = Tenant.Rental_Obligation_Lease_Start_Date.Substring(2, 2);
                                                            string rolsdYear = Tenant.Rental_Obligation_Lease_Start_Date.Substring(4);
                                                            DateTime rolsdDate = DateTime.Parse(string.Format("{0}/{1}/{2}", rolsdMonth, rolsdDay, rolsdYear));
                                                            DateTime nowDate = DateTime.Parse(string.Format("{0}/{1}/{2}", DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Year));
                                                            if (rolsdDate > nowDate)
                                                                InTheFuture = true;
                                                            else
                                                            {
                                                                if ((rolsdDate.Year == nowDate.Year) && (rolsdDate.Month == nowDate.Month))
                                                                    InTheFuture = true;
                                                            }
                                                        }
                                                        #endregion

                                                        // 3 Miscellaneous Checks Addendum
                                                        #region 3 Miscellaneous Checks Addendum
                                                        if (string.IsNullOrEmpty(Tenant.Payment_History))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Tradeline is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Total_Rental_Obligation_Amount))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Total Rental Obligation Amount is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Still Live in Home is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Number))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Number is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Duration))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Duration is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Status is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Payment_Amount))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Payment Amount is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Payment_Amount_Confirmed))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Payment Amount Confirmed is missing.";
                                                            complianceError = true;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Relationship_Code))
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Tenant Rental Lease Relationship Code is missing.";
                                                            complianceError = true;
                                                        }
                                                        #endregion

                                                        // Update Contact
                                                        #region Update Contact
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        if (!string.IsNullOrEmpty(Tenant.First_Name))
                                                        {
                                                            cu.Append(string.Format("\"First_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.First_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.Last_Name))
                                                        {
                                                            cu.Append(string.Format("\"Last_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.Last_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.Street))
                                                        {
                                                            cu.Append(string.Format("\"Street\":\"{0}\",", TextProcessingProvider.TitleCase(parseNoPunctuation(Tenant.Street))));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.City))
                                                        {
                                                            cu.Append(string.Format("\"City\":\"{0}\",", TextProcessingProvider.TitleCase(parseNoPunctuation(Tenant.City))));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Country_Code_New))
                                                        {
                                                            if (Tenant.Country_Code_New.ToLower() != "us")
                                                                cu.Append("\"Country_Code_New\":\"US\","); 
                                                        }
                                                        else
                                                            cu.Append("\"Country_Code_New\":\"US\",");

                                                        if (!string.IsNullOrEmpty(Tenant.R1_First_Name))
                                                        {
                                                            cu.Append(string.Format("\"R1_First_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R1_First_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                        {
                                                            cu.Append(string.Format("\"R1_Last_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R1_Last_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.R2_First_Name))
                                                        {
                                                            cu.Append(string.Format("\"R2_First_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R2_First_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                        {
                                                            cu.Append(string.Format("\"R2_Last_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R2_Last_Name, true)))));
                                                        }
                                                        
                                                        if (!string.IsNullOrEmpty(Tenant.R3_First_Name))
                                                        {
                                                            cu.Append(string.Format("\"R3_First_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R3_First_Name, true)))));
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                        {
                                                            cu.Append(string.Format("\"R3_Last_Name\":\"{0}\",", TextProcessingProvider.TitleCase(RemoveGenerationalCodes(parseNoPunctuation(Tenant.R3_Last_Name, true)))));
                                                        }
                                                        
                                                        if (!string.IsNullOrEmpty(Tenant.Phone))
                                                        {
                                                            cu.Append(string.Format("\"Phone\":\"{0}\",", parseOnlyNumbers(Tenant.Phone)));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Past_Landlord_Phone))
                                                        {
                                                            cu.Append(string.Format("\"Past_Landlord_Phone\":\"{0}\",", parseOnlyNumbers(Tenant.Past_Landlord_Phone)));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R1_Phone))
                                                        {
                                                            cu.Append(string.Format("\"R1_Phone\":\"{0}\",", parseOnlyNumbers(Tenant.R1_Phone)));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R2_Phone))
                                                        {
                                                            cu.Append(string.Format("\"R2_Phone\":\"{0}\",", parseOnlyNumbers(Tenant.R2_Phone)));  // 3k
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R3_Phone))
                                                        {
                                                            cu.Append(string.Format("\"R3_Phone\":\"{0}\",", parseOnlyNumbers(Tenant.R3_Phone)));  // 3k
                                                        }
                                                        
                                                        if (!string.IsNullOrEmpty(Tenant.Tenant_Date_of_Birth))
                                                        {
                                                            if (Tenant.Tenant_Date_of_Birth.Contains("-") || Tenant.Tenant_Date_of_Birth.Contains("/"))
                                                                Tenant.Tenant_Date_of_Birth = parseOnlyNumbers(Tenant.Tenant_Date_of_Birth);
                                                            PaymentHistoryDate td = new PaymentHistoryDate(Tenant.Tenant_Date_of_Birth);
                                                            if (td.IsValid)
                                                                cu.Append(string.Format("\"Tenant_Date_of_Birth\":\"{0}\",", parseOnlyNumbers(Tenant.Tenant_Date_of_Birth)));  // 3k
                                                            else
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Tenant DOB is invalid.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R1_DOB))
                                                        {
                                                            if (Tenant.R1_DOB.Contains("-") || Tenant.R1_DOB.Contains("/"))
                                                                Tenant.R1_DOB = parseOnlyNumbers(Tenant.R1_DOB);
                                                            PaymentHistoryDate td = new PaymentHistoryDate(Tenant.R1_DOB);
                                                            if (td.IsValid)
                                                                cu.Append(string.Format("\"R1_DOB\":\"{0}\",", parseOnlyNumbers(Tenant.R1_DOB)));  // 3k
                                                            else
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 1 DOB is invalid.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R2_DOB))
                                                        {
                                                            if (Tenant.R2_DOB.Contains("-") || Tenant.R2_DOB.Contains("/"))
                                                                Tenant.R2_DOB = parseOnlyNumbers(Tenant.R2_DOB);
                                                            PaymentHistoryDate td = new PaymentHistoryDate(Tenant.R2_DOB);
                                                            if (td.IsValid)
                                                                cu.Append(string.Format("\"R2_DOB\":\"{0}\",", parseOnlyNumbers(Tenant.R2_DOB)));  // 3k
                                                            else
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 2 DOB is invalid.";
                                                                complianceError = true;
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R3_DOB))
                                                        {
                                                            if (Tenant.R3_DOB.Contains("-") || Tenant.R3_DOB.Contains("/"))
                                                                Tenant.R3_DOB = parseOnlyNumbers(Tenant.R3_DOB);
                                                            PaymentHistoryDate td = new PaymentHistoryDate(Tenant.R3_DOB);
                                                            if (td.IsValid)
                                                                cu.Append(string.Format("\"R3_DOB\":\"{0}\",", parseOnlyNumbers(Tenant.R3_DOB)));  // 3k
                                                            else
                                                            {
                                                                ErrorLines += "ERROR during Compliance Review:  Roommate 3 DOB is invalid.";
                                                                complianceError = true;
                                                            }
                                                        }
 
                                                        if (!string.IsNullOrEmpty(Tenant.State1))
                                                            cu.Append(string.Format("\"State1\":\"{0}\",", ResolveStateCode(Tenant.State1)));

                                                        cu.Append("\"Start_Date\":\"\",");                                          // 3b
                                                        cu.Append("\"Last_Touch_Landlord\":\"\",");                                 // 3b
                                                        cu.Append("\"Last_Touch\":\"\",");                                          // 3b
                                                        cu.Append("\"Last_Batch_EQ\":\"\",");                                       // 3b
                                                        cu.Append("\"Last_Batch\":\"\",");                                          // 3b
                                                        cu.Append("\"Rental_Lease_Duration\":\"001\",");                            // 3c
                                                        if (!string.IsNullOrEmpty(Tenant.Landlord_Vetting))
                                                        {
                                                            if (Tenant.Landlord_Vetting.ToLower() == "gregg")
                                                                cu.Append("\"Landlord_Vetting\":\"Done - IL\",");                        // 3d
                                                        }
                                                        if (hasRoommate(Tenant))
                                                        {
                                                            cu.Append("\"Rental_Lease_Relationship_Code\":\"2\",");                 // 3g
                                                            if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                                cu.Append("\"R1_ECOA_Code\":\"2\",");                               // 3g
                                                            if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                                cu.Append("\"R21_ECOA_Code\":\"2\",");                              // 3g
                                                            if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                                cu.Append("\"R3_ECOA_Code\":\"2\",");                               // 3g
                                                        }
                                                        else
                                                            cu.Append("\"Rental_Lease_Relationship_Code\":\"1\",");                 // 3g
                                                        
                                                        if (NeedToChangeRolsd)
                                                            cu.Append(string.Format("\"Rental_Obligation_Lease_Start_Date\":\"{0}\",", newRolsd));  // 3h

                                                        switch (gMonthlyLandlordSetting)
                                                        {
                                                            case MonthlyLandlordTypes.TenantNo:
                                                                cu.Append("\"Monthly_Landlord\":\"No\",");
                                                                cu.Append("\"Next_Verify\":\"\",");
                                                                break;
                                                            case MonthlyLandlordTypes.TenantNoLandlordYes:
                                                                cu.Append("\"Monthly_Landlord\":\"No\",");
                                                                break;
                                                            case MonthlyLandlordTypes.TenantYes:
                                                                cu.Append("\"Monthly_Landlord\":\"Yes\",");
                                                                cu.Append(string.Format("\"Next_Verify\":\"{1:0000}-{0:00}-05\",", DateTime.Now.AddMonths(1).Month, DateTime.Now.AddMonths(1).Year));
                                                                break;
                                                        }

                                                        // Gregg Email 8/19/2021 Subject: Refining the Open Items list of this week as of 8/19/2021 (and some new!)
                                                        if (Landlord_Completed.ToLower() == "no")
                                                        {
                                                            ErrorLines += "ERROR during Compliance Review:  Landlord Completed = NO;  Check Landlord information/details and set Tenant Status to Compliance Review when completed.";
                                                            complianceError = true;
                                                        }

                                                        if (complianceError)                                                        // 3m
                                                            cu.Append("\"Contact_Status\":\"04b. Compliance Error\"");              // 3m
                                                        else                                                                        // 3m
	                                                    {                                                                           // 3m
                                                            if (InTheFuture)                                                        // 3l
                                                            {
                                                                cu.Append("\"Contact_Status\":\"07a. Future Reporting\"");          // 3l
                                                            }
                                                            else                                                                    // 3m
                                                                cu.Append("\"Contact_Status\":\"05.  IDM\"");                       // 3m
                                                        }                                                                           // 3m

                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            // Failed Contact Update  - Tell Somebody
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                                        }
                                                        else
                                                        {
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review {0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                        }

                                                        if (complianceError)
                                                        {
                                                            CountAPICall("notecontact");
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.AddContactNote);
                                                            ZM.AddToContactNotes(Tenant.id, "Compliance Review Error", ErrorLines);
                                                        }
                                                        #endregion

                                                        // 3o - send email
                                                        #region 3o Processing
                                                        if (!complianceError)
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.IDM_Done)) Tenant.IDM_Done = "No";
                                                            if (Tenant.IDM_Done.ToLower() == "no")
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Landlord_From_Tenant)) Tenant.Landlord_From_Tenant = "No";
                                                                if (Tenant.Landlord_From_Tenant.ToLower() == "yes")
                                                                {
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Compliance Review::Email Processing For {0}.", Tenant.id), EventLogEntryType.Warning);
                                                                    EmailProvider EP = new EmailProvider();
                                                                    EP.SendComplianceReview(string.Empty, Tenant);
                                                                }
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                            }
                                            #endregion
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Warning);
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        Tenants = null;
                        Page = 1;
                        EOF = false;
                        // Process Tenants that are in status '07a. Future Reporting'
                        #region Status 07 Processing
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Contact_Status:starts_with:07a.", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    //EventLog.WriteEntry(string.Format("TU Fields::07 Future JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    if (CRMFeedback.Length <= 30000)
                                    {
                                        EventLog.WriteEntry(string.Format("TU Fields::07 Future JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    }
                                    else
                                    {
                                        using (StreamWriter EL = new StreamWriter(string.Format(@"C:\IIS_App_Logs\ProcessTUFields_{0:yyyyMMdd}.log", DateTime.Now), true, Encoding.UTF8))
                                        {
                                            EL.WriteLine(string.Format("{2:HHmmss} - TU Fields::07 Future JSON Deserializing Error::{0} \r\n {1} \r\n\r\n", ce.Message, CRMFeedback, DateTime.Now));
                                        }
                                    }

                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields 07a Status {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        ErrorLines = string.Empty;
                                        PaymentHistoryEntry pe = null;

                                        if (Tenant.Contact_Status == "07a. Future Reporting")
                                        {
                                            #region Future Reoprting Processing
                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields Future Reporting::Processing {0}.", Tenant.id), EventLogEntryType.Warning);
                                            PaymentHistory ph = null;
                                            int monthcount = 0;

                                            if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                            {
                                                PaymentHistoryDate ROLS = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                if (ROLS.IsValid)
                                                {
                                                    if ((ROLS.PayYear < RunDate.PayYear) || (ROLS.PayYear == RunDate.PayYear) && (ROLS.PayMonth < RunDate.PayMonth))
                                                    {
                                                        //ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);
                                                        ph = new PaymentHistory(RunDate.PayMonth, RunDate.PayYear);

                                                        switch (Tenant.A_Rental_Lease_Status)
                                                        {
                                                            case "05":  // Transferred
                                                                switch (Tenant.Reporting_Requested[0])
                                                                {
                                                                    case "Past 12 Months Only":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < ROLS.PayDate)
                                                                                break;
                                                                            if (monthcount > 12)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    case "Past 24 Months Only":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < ROLS.PayDate)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    default:    // Reporting we don't know how to handle - tell somebody
                                                                        break;
                                                                }
                                                                break;
                                                            case "11":  // Current - never have closed date, never have Ds
                                                                switch (Tenant.Reporting_Requested[0])
                                                                {
                                                                    case "Current Rent Only":
                                                                        pe = ph[0];
                                                                        pe.EntryState = "0";
                                                                        break;
                                                                    case "Current & Past 12 Months":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < ROLS.PayDate)
                                                                                break;
                                                                            if (monthcount > 12)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    case "Current & Past 24 Months":
                                                                        for (int idx = 0; idx < 24; idx++)
                                                                        {
                                                                            pe = ph[idx];
                                                                            if (pe.EntryDate < ROLS.PayDate)
                                                                                break;
                                                                            pe.EntryState = "0";
                                                                            monthcount++;
                                                                        }
                                                                        break;
                                                                    default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                                                                        break;
                                                                }
                                                                break;
                                                            case "13":  // Paid Closed 
                                                                string replacement = "D";
                                                                if (!string.IsNullOrEmpty(Tenant.Date_Closed))
                                                                {
                                                                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("07 Future Reporting Making PaymentHistory Date For {0}.", "DCD"), EventLogEntryType.Warning);
                                                                    PaymentHistoryDate ClosedDate = new PaymentHistoryDate(Tenant.Date_Closed);
                                                                    if (ClosedDate.IsValid)
                                                                    {
                                                                        switch (Tenant.Reporting_Requested[0])
                                                                        {
                                                                            case "Past 12 Months Only":
                                                                                for (int idx = 0; idx < 24; idx++)
                                                                                {
                                                                                    pe = ph[idx];
                                                                                    if (pe.EntryDate <= ClosedDate.PayDate)
                                                                                        replacement = "0";
                                                                                    if (pe.EntryDate < ROLS.PayDate)
                                                                                        break;
                                                                                    if (monthcount > 12)
                                                                                        break;
                                                                                    pe.EntryState = replacement;
                                                                                    monthcount++;
                                                                                }
                                                                                break;
                                                                            case "Past 24 Months Only":
                                                                                for (int idx = 0; idx < 24; idx++)
                                                                                {
                                                                                    pe = ph[idx];
                                                                                    if (pe.EntryDate <= ClosedDate.PayDate)
                                                                                        replacement = "0";
                                                                                    if (pe.EntryDate < ROLS.PayDate)
                                                                                        break;
                                                                                    pe.EntryState = replacement;
                                                                                    monthcount++;
                                                                                }
                                                                                break;
                                                                            default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                                                                                break;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        // Date Closed is bad - tell somebody
                                                                        ErrorLines += string.Format("Tenant Status uses Closed Date to calculate Payment History but it is not valid. Actual Date Value[{0}]. Payment History Not Updated.", Tenant.Date_Closed);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    // Date Closed is bad - tell somebody
                                                                    ErrorLines += " - Tenant Status uses Closed Date to calculate Payment History but it is not set. Payment History Not Updated.";
                                                                }
                                                                break;
                                                            default:    // Status is one I'm NOT touching right now
                                                                break;
                                                        }

                                                        // Update Contact
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        cu.Append(string.Format("\"Date_of_Last_Payment\":\"{0}\",", Tenant.Rental_Obligation_Lease_Start_Date));
                                                        cu.Append(string.Format("\"Payment_History\": \"{0}\",", ph.ToAsString()));
                                                        cu.Append("\"Contact_Status\":\"05.  IDM\"");
                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessTUFields", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::{0} - Zoho Contact Update 07 Future Reporting Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                        }
                                                        else
                                                        {
                                                            if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::{0} - Zoho Contact Updated 07 Future Reporting.", Tenant.id), EventLogEntryType.Warning);
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::CRM API Error:: Status=07 {0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Update Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process TU Fields Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate2.WaitOne();
                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingTUFields)
                    {
                        continueRunning = false;
                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry("TU Fields gStopProcessingTUFields Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingTUFields

        } // ProcessTUFields
        private void ProcessPortalFields()
        {
            bool continueRunning = true;
            string LogText = string.Empty;

            // Wait to start for the first time until a minute of 0, 15, 30, 45
            if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate4.WaitOne();
            if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingTUFields)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool thisrecordhaserrors = false;
                    bool EOF = false;
                    string New0017A = string.Empty;
                    DateTime DateOfFirstDelinquency = DateTime.MinValue;
                    bool updateDelinquencyDate = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;
                    PaymentHistory PHT = null;
                    int MonthsLate = 0;
                    double RentalLeaseBalance = 0.00;
                    bool skipthisrecord = false;

                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields Update Started.", EventLogEntryType.Warning);
                    //LogItem("------ Portal Fields Update Started -----------------------------------------");
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        ContactsFeedBack Tenants = null;

                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            // 1) If Portal Update = yes, then update as follows
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessPortalFields", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Portal_Update:equals:Yes", false, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry("Portal_Update::" + ce.Message);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(string.Format("Portal_Update:: {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        ErrorLines = string.Empty;
                                        thisrecordhaserrors = false;
                                        updateDelinquencyDate = false;

                                        //LogItem(string.Format("--> Contact {0} processing <--", Tenant.id));

                                        if (Tenant.Contact_Status == "08. Reporting")
                                        {
                                            if (Tenant.Reporting == "Reporting")
                                            {
                                                if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(string.Format("Portal_Update::Processing Contact {0}'s Rental Lease Balance.", Tenant.id), EventLogEntryType.Warning);

                                                RentalLeaseBalance = 0.00;
                                                if (!string.IsNullOrEmpty(Tenant.Rental_Lease_Balance))
                                                {
                                                    double.TryParse(Tenant.Rental_Lease_Balance, out RentalLeaseBalance);
                                                }

                                                if (RentalLeaseBalance > 0)
                                                {
                                                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(string.Format("Portal_Update::Calculating Contact {0}'s Date Of First Delinquency.", Tenant.id), EventLogEntryType.Warning);
                                                    // 2)   If 0025 Date of First Delinquency is blank, then calculate; else don't update  (Note:  will have a reversal and need to handle payments in next iteration)
                                                    if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                    {
                                                        MonthsLate = (int)Math.Ceiling((double.Parse(Tenant.Rental_Lease_Balance) / double.Parse(Tenant.Rental_Lease_Payment_Amount)));
                                                        //LogItem(string.Format("Months Late is {0} with Lease Balance of {1} and Payment Amount of {2}.", MonthsLate, Tenant.Rental_Lease_Balance, Tenant.Rental_Lease_Payment_Amount));

                                                        if (MonthsLate > 6)
                                                        {
                                                            thisrecordhaserrors = true;
                                                            ErrorLines += "Months Late is calculated to be older than 6 months.";
                                                            //LogItem(ErrorLines);
                                                        }
                                                        else
                                                        {
                                                            updateDelinquencyDate = true;
                                                            DateTime TempDate = DateTime.Now.AddMonths((int)(-1.0 * MonthsLate));
                                                            DateOfFirstDelinquency = new DateTime(TempDate.Year, TempDate.Month, DateTime.DaysInMonth(TempDate.Year, TempDate.Month));
                                                            //LogItem(string.Format("Date Of First Delinquency is calculated to be {0:MM-dd-yyyy}", DateOfFirstDelinquency));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        PaymentHistoryDate TempPayDate = new PaymentHistoryDate(Tenant.Date_of_First_Delinquency);
                                                        DateOfFirstDelinquency = new DateTime(TempPayDate.PayYear, TempPayDate.PayMonth, TempPayDate.PayDay);
                                                        //LogItem(string.Format("Date Of First Delinquency from tenant record is {0:MM-dd-yyyy}", DateOfFirstDelinquency));
                                                    }


                                                    if (!thisrecordhaserrors)
                                                    {
                                                        if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(string.Format("Portal_Update::Calculating Contact {0}'s Rental Lease Status.", Tenant.id), EventLogEntryType.Warning);
                                                        New0017A = Tenant.A_Rental_Lease_Status;
                                                        //LogItem(string.Format("Current Lease Status is {0}", New0017A));

                                                        MonthsLate = (int)Math.Ceiling((double.Parse(Tenant.Rental_Lease_Balance) / double.Parse(Tenant.Rental_Lease_Payment_Amount)));

                                                        // 3)  Comment:  0017A. Rental/Lease Status – needs to update based on 0025. Date of First Delinquency
                                                        if (MonthsLate == 0)
                                                        {
                                                            skipthisrecord = true;
                                                            //LogItem("Months Late is 0 - skipping record.");
                                                        }
                                                        else
                                                        {
                                                            if (MonthsLate > 6)
                                                            {
                                                                skipthisrecord = true;
                                                                //LogItem("Months Late is > 6 - skipping record.");
                                                            }
                                                            else
                                                            {
                                                                switch (MonthsLate)
                                                                {
                                                                    case 1:
                                                                        New0017A = "71";
                                                                        break;
                                                                    case 2:
                                                                        New0017A = "78";
                                                                        break;
                                                                    case 3:
                                                                        New0017A = "80";
                                                                        break;
                                                                    case 4:
                                                                        New0017A = "82";
                                                                        break;
                                                                    case 5:
                                                                        New0017A = "83";
                                                                        break;
                                                                    case 6:
                                                                        New0017A = "84";
                                                                        break;
                                                                }
                                                                //LogItem(string.Format("Months Late is {0}, changed lease status to {1}.", MonthsLate, New0017A));
                                                            }
                                                        }
                                                    }

                                                    // 3)  Comment:  The A - Payment History field (PHF) needs to 
                                                    if (!thisrecordhaserrors)
                                                    {
                                                        MonthsLate = (int)Math.Ceiling((double.Parse(Tenant.Rental_Lease_Balance) / double.Parse(Tenant.Rental_Lease_Payment_Amount)));

                                                        if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(string.Format("Portal_Update::Calculating Contact {0}'s Payment History.", Tenant.id), EventLogEntryType.Warning);
                                                        PaymentHistoryDate PHD = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                                                        PHT = new PaymentHistory(Tenant.Payment_History);

                                                        if (PHT.PaymentHistoryDate == PHD.PayDate)
                                                            PHT.ApplyLateMonths(MonthsLate);
                                                        else
                                                        {
                                                            PHD.DecrementDate();
                                                            if (PHT.PaymentHistoryDate == PHD.PayDate)
                                                            {
                                                                string PaymentMatrix = PHT.ToString();
                                                                PaymentMatrix = string.Format("{0:yyyyMM}:0{1}", DateTime.Now, PaymentMatrix.Substring(0, 23));
                                                                PHT = new PaymentHistory(PaymentMatrix);
                                                                PHT.ApplyLateMonths(MonthsLate);
                                                            }
                                                            else
                                                            {
                                                                // error
                                                                thisrecordhaserrors = true;
                                                                ErrorLines += "Payment History Date is not current month or previous month.";
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    skipthisrecord = true;
                                                    //LogItem("Contact's Rental Lease Balance is zero or less.");
                                                }
                                            }
                                            else
                                            {
                                                // Error
                                                thisrecordhaserrors = true;
                                                ErrorLines += "Contact Reporting Field does not equal 'Reporting'.";
                                                //LogItem(ErrorLines);
                                            }
                                        }
                                        else
                                        {
                                            // Error
                                            thisrecordhaserrors = true;
                                            ErrorLines += "Contact Status Field does not equal '08. Reporting'.";
                                            //LogItem(ErrorLines);
                                        }

                                        // 4) Other Field Updates (unless Moved To Next Tenant in above sequences): 
                                        // Perform Actual Contact Update...
                                        if (!thisrecordhaserrors)
                                        {
                                            if (!skipthisrecord)
                                            {
                                                // Update Contact
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                cu.Append("\"Portal_Update\":\"Processed\",");
                                                cu.Append(string.Format("\"Amount_Past_Due\":\"{0}\",", Tenant.Rental_Lease_Balance));
                                                cu.Append(string.Format("\"A_Rental_Lease_Status\":\"{0}\",", New0017A));
                                                cu.Append(string.Format("\"Last_Verify\":\"{0:yyyy-MM-dd}\",", new DateTime(DateTime.Now.Year, DateTime.Now.Month, 5)));
                                                cu.Append("\"Rental_Lease_Comment_Code\":\"\",");
                                                //cu.Append("\"Last_BatchEQ\": null,");
                                                //cu.Append("\"Last_BatchTU\": null,");
                                                if (updateDelinquencyDate)
                                                    cu.Append(string.Format("\"Date_of_First_Delinquency\": \"{0:MMddyyyy}\",", DateOfFirstDelinquency));
                                                if (!(PHT == null))
                                                    cu.Append(string.Format("\"Payment_History\": \"{0}\",", PHT.ToAsString()));

                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[\"workflow\"]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessPortalFields", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    // Failed Contact Update  - Tell Somebody
                                                    LogText = string.Format("Portal_Update::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString());
                                                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Error);
                                                    //LogItem(LogText);
                                                }
                                                else
                                                {
                                                    LogText = string.Format("Portal_Update::{0} - Zoho Contact Updated.", Tenant.id);
                                                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Warning);
                                                    //LogItem(LogText);
                                                }
                                            }
                                            else
                                            {
                                                LogText = string.Format("Portal_Update::{0} - Zoho Contact skipped. Rental Lease Balance is <= 0.", Tenant.id);
                                                if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Warning);
                                                //LogItem(LogText);
                                            }
                                        }
                                        else
                                        {
                                            // Update Contact
                                            StringBuilder cu = new StringBuilder("{ \"data\": [");
                                            cu.Append("{ ");
                                            cu.Append("\"Portal_Update\":\"Error\"");
                                            cu.Append(" }");
                                            cu.Append("], \"trigger\":[\"workflow\"]}");

                                            CountAPICall("updatecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessPortalFields", "CRM", APITracker.APICalls.UpdateContact);
                                            if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                            {
                                                // Failed Contact Update  - Tell Somebody
                                                LogText = string.Format("Portal_Update::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString());
                                                if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Error);
                                                //LogItem(LogText);
                                            }
                                            else
                                            {
                                                LogText = string.Format("Portal_Update::{0} - Zoho Contact Updated.", Tenant.id);
                                                if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Warning);
                                                //LogItem(LogText);
                                            }
                                            // Add Contact Note
                                            CountAPICall("notecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessPortalFields", "CRM", APITracker.APICalls.AddContactNote);
                                            ZM.AddToContactNotes(Tenant.id, "Portal Fields Update Error", ErrorLines);
                                            //LogItem(ErrorLines);
                                        }
                                        //LogItem(string.Format("--> Contact {0} complete <--", Tenant.id));
                                    } // for each Contact

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                LogText = string.Format("Portal_Update::CRM API Error::{0}", ZM.DebugText);
                                if (gProcessPortalFieldsDebugging) EventLog.WriteEntry(LogText, EventLogEntryType.Error);
                                //LogItem(LogText);
                                EOF = true;
                            }

                        } //while !EOF

                        //EventLog.WriteEntry("Portal Fields Update Completed.");
                        //LogItem("------ Portal Fields Update Completed -----------------------------------------");
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Portal Fields Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate4.WaitOne();
                    if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingPortalFields)
                    {
                        continueRunning = false;
                        if (gProcessPortalFieldsDebugging) EventLog.WriteEntry("Portal Fields gStopProcessingPortal Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingTUFields

        } // ProcessPortalFields
        private void ProcessAbandonedCheckouts()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 5, 20, 35, 50
            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate5.WaitOne();
            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingAbandonedCheckouts)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    //bool skipthisrecord = false;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;

                    PaymentHistoryDate RunDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));

                    if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandoned Checkouts Processing Started.", EventLogEntryType.Warning);
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        LeadsFeedBack Tenants = null;
                        LeadsFeedBack LeadsIn01aNew = null;

                        string LogFile = string.Format("C:\\IIS_App_Logs\\ZOHOCRM_OAuth\\AbandonedCheckouts_{0:yyyyMMdd}.log", DateTime.Now);
                        using (StreamWriter tw = new StreamWriter(LogFile, true, System.Text.Encoding.UTF8))
                        {
                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, "Abandonded Checkouts Processing Started.");
                            while (!EOF)
                            {
                                CountAPICall("searchlead");
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.SearchLeads);
                                if (ZM.SearchLeads("Lead_Status:starts_with:00. Pend", Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Tenants = JsonConvert.DeserializeObject<LeadsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        EventLog.WriteEntry(ce.Message, EventLogEntryType.Error);
                                        Tenants = null;
                                    }

                                    if (Tenants != null)
                                    {
                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandoned Checkouts::{0} Leads Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandoned Checkouts::{0} Leads Found to Process.", Tenants.data.Length));

                                        DateTime BenchMark = DateTime.Now.AddHours(-36.0D);
                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandoned Checkouts::Benchmark is {0:MM-dd-yyyy HH:mm:ss}.", BenchMark));
                                        foreach (Lead Tenant in Tenants.data)
                                        {
                                            ErrorLines = string.Empty;
                                            DateTime CreatedAT = DateTime.Now; // DateTimeOffset.Parse(Tenant.Created_Time).DateTime;

                                            if (!string.IsNullOrEmpty(Tenant.API_Data))
                                            {
                                                DateTime.TryParse(Tenant.API_Data, out CreatedAT);
                                            }

                                            // Must be 36 hours or older
                                            if (CreatedAT <= BenchMark)
                                            {
                                                if (string.IsNullOrEmpty(Tenant.Email)) Tenant.Email = string.Empty;
                                                // Delete OO Pending with email begins with 'x.' -> second address leads
                                                if ((Tenant.Email.Length >= 2) && (Tenant.Email.Substring(0, 2).ToLower() == "x."))
                                                {
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.DeleteLead);
                                                    if (ZM.DeleteLead(Tenant.id))
                                                    {
                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandoned Checkouts::Pending Record {0} is a secondary address lead and has been deleted.", Tenant.id), EventLogEntryType.Warning);
                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandoned Checkouts::Pending Record {0} is a secondary address lead and has been deleted.", Tenant.id));
                                                    }
                                                    else
                                                    {
                                                        EventLog.WriteEntry(string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText));
                                                    }
                                                }
                                                else
                                                {
                                                    string SearchCriteria = string.Format("(Lead_Status:starts_with:01a. New)AND(First_Name:equals:{0})AND(Last_Name:equals:{1})", Tenant.First_Name, Tenant.Last_Name);
                                                    if (!string.IsNullOrEmpty(Tenant.Email)) SearchCriteria = string.Format("{0}AND(Email:equals:{1})", SearchCriteria, Tenant.Email);

                                                    string SearchFeedBack = string.Empty;

                                                    // look for previous unfinished visits
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.SearchLeads);
                                                    if (ZM.SearchLeads(SearchCriteria, 1, out SearchFeedBack))
                                                    {
                                                        try
                                                        {
                                                            LeadsIn01aNew = JsonConvert.DeserializeObject<LeadsFeedBack>(SearchFeedBack);
                                                        }
                                                        catch (Exception ce)
                                                        {
                                                            EventLog.WriteEntry("Abandonded Checkouts::JsonConvert Error::" + ce.Message, EventLogEntryType.Error);
                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::JsonConvert Error::{0}", ce.Message));
                                                            LeadsIn01aNew = null;
                                                        }

                                                        if (LeadsIn01aNew != null)
                                                        {
                                                            foreach (Lead thisLead in LeadsIn01aNew.data)
                                                            {
                                                                if (thisLead.Lead_Source == "Finish Later")
                                                                {
                                                                    // Extract tracker
                                                                    int startingposition = thisLead.SA_Form_Link.IndexOf("tracker=") + 8;
                                                                    string tempid = thisLead.SA_Form_Link.Substring(startingposition);
                                                                    string recordid = tempid.Substring(0, tempid.IndexOf("&"));
                                                                    // Get record and update with current Tenant.id
                                                                    using (MySqlConnection dbc = new MySqlConnection(gConnectionString))
                                                                    {
                                                                        dbc.Open();

                                                                        string theSQL = string.Format("UPDATE crbdb.tt_visitors SET i_zohoid = '{0}' WHERE id = {1};", Tenant.id, recordid);
                                                                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                                                        {
                                                                            dbcc.CommandType = CommandType.Text;
                                                                            dbcc.ExecuteNonQuery();
                                                                        }
                                                                    }
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append("\"Lead_Status\": \"01a. New\",");
                                                                    cu.Append("\"Original_Status_Yr_1\": \"\",");
                                                                    cu.Append("\"Lead_Source\": \"Incomplete Signup\"");
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                                    CountAPICall("updatelead");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.UpdateLead);
                                                                    if (!ZM.UpdateLead(Tenant.id, cu.ToString()))
                                                                    {
                                                                        // Failed Contact Update  - Tell Somebody
                                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()));
                                                                    }
                                                                    else
                                                                    {
                                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated. Using {1}", Tenant.id, cu.ToString()));
                                                                    }

                                                                    // Delete matched lead
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.DeleteLead);
                                                                    if (ZM.DeleteLead(thisLead.id))
                                                                    {
                                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::Matched 'Finish Later' lead {0} has been deleted.", thisLead.id), EventLogEntryType.Warning);
                                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::Matched 'Finish Later' lead {0} has been deleted.", thisLead.id));
                                                                    }
                                                                    else
                                                                    {
                                                                        EventLog.WriteEntry(string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText));
                                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (thisLead.Lead_Source == "Incomplete Signup")
                                                                    {
                                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                        cu.Append("{ ");
                                                                        cu.Append("\"Lead_Status\": \"01a. New\",");
                                                                        cu.Append("\"Original_Status_Yr_1\": \"\",");
                                                                        cu.Append("\"Lead_Source\": \"Incomplete Signup\"");
                                                                        cu.Append(" }");
                                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                                        CountAPICall("updatelead");
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.UpdateLead);
                                                                        if (!ZM.UpdateLead(Tenant.id, cu.ToString()))
                                                                        {
                                                                            // Failed Contact Update  - Tell Somebody
                                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                                            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandoned Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandoned Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()));
                                                                        }
                                                                        else
                                                                    {
                                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandoned Checkouts::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandoned Checkouts::{0} - Zoho Contact Updated. Using {1}", Tenant.id, cu.ToString()));
                                                                    }

                                                                        // Delete matched lead
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.DeleteLead);
                                                                        if (ZM.DeleteLead(thisLead.id))
                                                                        {
                                                                            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::Matched 'Incomplete Signup' lead {0} has been deleted.", thisLead.id), EventLogEntryType.Warning);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::Matched 'Incomplete Signup' lead {0} has been deleted.", thisLead.id));
                                                                        }
                                                                        else
                                                                        {
                                                                            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText));
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                        cu.Append("{ ");
                                                                        cu.Append("\"Lead_Status\": \"01a. New\",");
                                                                        cu.Append("\"Original_Status_Yr_1\": \"\",");
                                                                        cu.Append("\"Lead_Source\": \"Incomplete Signup\"");
                                                                        cu.Append(" }");
                                                                        cu.Append("], \"trigger\":[\"workflow\"]}");

                                                                        CountAPICall("updatelead");
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.UpdateLead);
                                                                        if (!ZM.UpdateLead(Tenant.id, cu.ToString()))
                                                                        {
                                                                            // Failed Contact Update  - Tell Somebody
                                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                                            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()));
                                                                        }
                                                                        else
                                                                        {
                                                                            if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated. Using {1}", Tenant.id, cu.ToString()));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                            cu.Append("{ ");
                                                            cu.Append("\"Lead_Status\": \"01a. New\",");
                                                            cu.Append("\"Original_Status_Yr_1\": \"\",");
                                                            cu.Append("\"Lead_Source\": \"Incomplete Signup\"");
                                                            cu.Append(" }");
                                                            cu.Append("], \"trigger\":[\"workflow\"]}");

                                                            CountAPICall("updatelead");
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessAbandonedCheckouts", "CRM", APITracker.APICalls.UpdateLead);
                                                            if (!ZM.UpdateLead(Tenant.id, cu.ToString()))
                                                            {
                                                                // Failed Contact Update  - Tell Somebody
                                                                ErrorLines += " - Zoho Contact Update Failed";
                                                                if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()));
                                                            }
                                                            else
                                                            {
                                                                if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                                tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::{0} - Zoho Contact Updated. Using {1}", Tenant.id, cu.ToString()));
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry(string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                                        tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText));
                                                    }
                                                } // if Email starts with x.
                                            } // if CreatedAT
                                        } // foreach

                                        if (Tenants.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    EventLog.WriteEntry(string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                    tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, string.Format("Abandonded Checkouts::CRM API Error::{0}", ZM.DebugText));
                                    EOF = true;
                                }

                            } //while !EOF
                            tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, "Abandonded Checkouts Processing Completed.");
                            tw.Flush();
                        }
                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts Processing Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Abandonded Checkouts Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate5.WaitOne();
                    if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingAbandonedCheckouts)
                    {
                        continueRunning = false;
                        if (gProcessAbandonedCheckoutsDebugging) EventLog.WriteEntry("Abandonded Checkouts gStopProcessingCheckouts Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingTUFields
        } // ProcessAbandonedCheckouts
        private void ProcessClosingAccountsEx()
        {
            bool continueRunning = true;

            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Reaching Gate (initial).", EventLogEntryType.Warning, 8000);
            this.gGate6.WaitOne();
            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Gate Opened (initial).", EventLogEntryType.Warning, 8000);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingClosingAccounts)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;
                    PaymentHistoryDate RunDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));

                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Processing Started.", EventLogEntryType.Warning, 8000);
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        ContactsFeedBack Tenants = null;

                        ZohoSubscriptionManager ZS = new ZohoSubscriptionManager(this.gConnectionString, gSubscriptionOrganization, gSubscriptionSecret, gSubscriptionClientID);
                        ZS.UsingCRBServer = true;
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Entering Loop.", EventLogEntryType.Warning, 8000);
                        while (!EOF)
                        {
                            //CountAPICall("searchcontact");
                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Running Contact Search.", EventLogEntryType.Warning, 8000);
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessClosingAccountsEx", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Pending_Close:equals:Yes", Page, out CRMFeedback))
                            {
                                //if (CRMFeedback.Length > 32000)
                                //    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts Got [{0}].", CRMFeedback.Substring(0, 3100)), EventLogEntryType.Warning, 8800);
                                //else
                                //    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts Got [{0}].", CRMFeedback), EventLogEntryType.Warning, 8800);
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(ce.Message, EventLogEntryType.Error, 8900);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning, 8100);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        if (string.IsNullOrEmpty(Tenant.Date_to_Close)) Tenant.Date_to_Close = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Reason_Closing)) Tenant.Reason_Closing = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Subscription_Number)) Tenant.Subscription_Number = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Sub_Number)) Tenant.Monthly_Sub_Number = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Annual_Sub_Number)) Tenant.Annual_Sub_Number = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Subscription)) Tenant.Monthly_Subscription = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_1)) Tenant.Renewal_Status_Yr_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_2)) Tenant.Renewal_Status_Yr_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_3)) Tenant.Renewal_Status_Yr_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Payment_History)) Tenant.Payment_History = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Collection_Last_Touch)) Tenant.Collection_Last_Touch = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Payment_Declined)) Tenant.Payment_Declined = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Payment_Amount)) Tenant.Rental_Lease_Payment_Amount = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Balance)) Tenant.Rental_Lease_Balance = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency)) Tenant.Date_of_First_Delinquency = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date)) Tenant.Rental_Obligation_Lease_Start_Date = string.Empty;
                                        TradeLineProvider tradeline = null;

                                        if (!string.IsNullOrEmpty(Tenant.Date_to_Close))
                                        {
                                            DateField CloseFileOn = new DateField(Tenant.Date_to_Close);
                                            if (CloseFileOn.IsValid)
                                            {
                                                // Skip if current or future date
                                                if (CloseFileOn.CompareTo(DateTime.Now) == -1)
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                    {
                                                        string OriginalDate = Tenant.Rental_Obligation_Lease_Start_Date;
                                                        string tempDate =  OriginalDate.Substring(4, 4) + "-" + OriginalDate.Substring(0, 2) + "-" + OriginalDate.Substring(2, 2);

                                                        DateField RLSD = new DateField(tempDate);
                                                        if (RLSD.IsValid)
                                                        {
                                                            if (CloseFileOn.CompareTo(RLSD) >= 0)
                                                            {
                                                                if (!string.IsNullOrEmpty(Tenant.Reason_Closing))
                                                                {
                                                                    tradeline = new TradeLineProvider(Tenant.Payment_History);
                                                                    if (tradeline.IsValid)
                                                                    {
                                                                        int TradelineStaleMonths = TradeLineProvider.MonthsOutOfDate(tradeline.ReportingDate, RunDate.PayDate);

                                                                        if (TradelineStaleMonths <= 1)
                                                                        {
                                                                            string testreason = Tenant.Reason_Closing.ToLower().Trim();
                                                                            string CancellationReasonID = DetermineSubscriptionCancellationID(testreason);
                                                                            string VoidedReport = string.Empty;

                                                                            if (CancelledSubscription(Tenant.id, Tenant.Subscription_Number, Tenant.Annual_Sub_Number, Tenant.Monthly_Sub_Number, Tenant.Payment_Sub_Number, CancellationReasonID, ZS, ZM, out VoidedReport))
                                                                            {
                                                                                if (TradelineStaleMonths > 0) tradeline.UpdateHistoryByMonths(TradelineStaleMonths, '0');

                                                                                StringBuilder ZohoData = new StringBuilder("{ \"data\": [{");

                                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a closing reason of '{1}'. Processing.", Tenant.id, testreason), EventLogEntryType.Information, 8101);

                                                                                #region BoughtHome-Moved
                                                                                if ((testreason == "closed - bought home") || (testreason == "closed - moved"))
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"13\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"0\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0}\"", DetermineDateOfLastPaymentFrom(CloseFileOn)));
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");

                                                                                    tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region Deceased
                                                                                if (testreason == "closed - deceased")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"13\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"0\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(",\"Rental_Lease_Relationship_Code\": \"X\"");
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0}\"", DetermineDateOfLastPaymentFrom(CloseFileOn)));
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");

                                                                                    tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region Non-Renewal
                                                                                if (testreason == "closed - non renewal")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"05\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"0\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0}\"", DetermineDateOfLastPaymentFrom(CloseFileOn)));
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");

                                                                                    tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region Non-Payment
                                                                                if (testreason == "closed - non payment")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    //ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"05\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"0\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0}\"", DetermineDateOfLastPaymentFrom(CloseFileOn)));
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");
                                                                                    if (!string.IsNullOrEmpty(Tenant.Collection_Last_Touch))
                                                                                    {
                                                                                        DateField Today = new DateField(DateTime.Now);
                                                                                        ZohoData.Append(string.Format(",\"Collection_Last_Touch\": \"{0}\"", Today.PayDateAsZohoDate));
                                                                                    }
                                                                                    if (Tenant.Payment_Declined.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Payment_Declined\": \"Cancelled\"");

                                                                                    tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region Left-Owing
                                                                                if (testreason == "closed - left owing")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"97\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");
                                                                                    if (!string.IsNullOrEmpty(Tenant.Collection_Last_Touch))
                                                                                    {
                                                                                        DateField Today = new DateField(DateTime.Now);
                                                                                        ZohoData.Append(string.Format(",\"Collection_Last_Touch\": \"{0}\"", Today.PayDateAsZohoDate));
                                                                                    }
                                                                                    if (Tenant.Payment_Declined.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Payment_Declined\": \"Cancelled\"");

                                                                                    int Rental_Lease_Payment_Amount_Confirmed = 0;
                                                                                    int Rental_Lease_Payment_Amount = 0;
                                                                                    int Rental_Lease_Balance = 0;
                                                                                    double MonthlyRent = 0.0;
                                                                                    double LeftOwing = 0.0;

                                                                                    int.TryParse(Tenant.Rental_Lease_Payment_Amount, out Rental_Lease_Payment_Amount);
                                                                                    double.TryParse(Tenant.Rental_Lease_Payment_Amount, out MonthlyRent);
                                                                                    int.TryParse(Tenant.Rental_Lease_Balance, out Rental_Lease_Balance);
                                                                                    double.TryParse(Tenant.Rental_Lease_Balance, out LeftOwing);
                                                                                    Rental_Lease_Payment_Amount_Confirmed = Rental_Lease_Payment_Amount - Rental_Lease_Balance;

                                                                                    if (Rental_Lease_Payment_Amount_Confirmed < 0) Rental_Lease_Payment_Amount_Confirmed = 0;
                                                                                    ZohoData.Append(string.Format(",\"Rental_Lease_Payment_Amount_Confirmed\": \"{0}\"", Rental_Lease_Payment_Amount_Confirmed));
                                                                                    ZohoData.Append(string.Format(",\"Amount_Past_Due\": \"{0}\"", Rental_Lease_Balance));
                                                                                    ZohoData.Append(string.Format(",\"Original_Charge_off_Amount\": \"{0}\"", Rental_Lease_Balance));

                                                                                    int MonthsLate = (int)Math.Ceiling((double.Parse(Tenant.Rental_Lease_Balance) / double.Parse(Tenant.Rental_Lease_Payment_Amount)));
                                                                                    //DateTime DateOfFirstDelinquency = DateTime.MinValue;

                                                                                    //if (MonthsLate < 2)
                                                                                    //{
                                                                                    //    DateOfFirstDelinquency = CloseFileOn.PayAsDateTime.AddDays(-1.0);
                                                                                    //}
                                                                                    //else
                                                                                    //{
                                                                                    //    DateTime TempDate = CloseFileOn.PayAsDateTime.AddMonths((int)(-1.0 * MonthsLate));
                                                                                    //    DateOfFirstDelinquency = new DateTime(TempDate.Year, TempDate.Month, DateTime.DaysInMonth(TempDate.Year, TempDate.Month));
                                                                                    //}
                                                                                    ClosingDateResolutionProvider CDRP = new ClosingDateResolutionProvider(CloseFileOn.PayAsDateTime, MonthlyRent, LeftOwing);
                                                                                    if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                                                        ZohoData.Append(string.Format(",\"Date_of_First_Delinquency\": \"{0:MMddyyyy}\"", CDRP.DateOfFirstDelinquency));
                                                                                    //if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                                                    //    ZohoData.Append(string.Format(",\"Date_of_First_Delinquency\": \"{0:MMddyyyy}\"", DateOfFirstDelinquency));

                                                                                    //DateField LastPaymentDate = new DateField(DateOfFirstDelinquency);
                                                                                    //LastPaymentDate.DecrementDate();
                                                                                    //ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", new DateTime(LastPaymentDate.PayYear, LastPaymentDate.PayMonth, 5)));
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", CDRP.DateOfLastPayment));

                                                                                    tradeline.ApplyLateMonths(CloseFileOn.PayDate, MonthsLate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region BK
                                                                                if (testreason == "closed - bk")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                }
                                                                                #endregion
                                                                                #region Deleted
                                                                                if (testreason == "closed - deleted")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"DA\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");
                                                                                    if (!string.IsNullOrEmpty(Tenant.Collection_Last_Touch))
                                                                                    {
                                                                                        DateField Today = new DateField(DateTime.Now);
                                                                                        ZohoData.Append(string.Format(",\"Collection_Last_Touch\": \"{0}\"", Today.PayDateAsZohoDate));
                                                                                    }
                                                                                    if (Tenant.Payment_Declined.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Payment_Declined\": \"Cancelled\"");

                                                                                    //tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    //tradeline.AdjustForCOVID19();
                                                                                    //ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));
                                                                                }
                                                                                #endregion
                                                                                #region Chargeback-Dispute
                                                                                if (testreason == "closed - chargeback dispute")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(String.Format(",\"Reporting_Requested\": [\"{0}\"]", Tenant.Reason_Closing));
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"05\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"0\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0}\"", DetermineDateOfLastPaymentFrom(CloseFileOn)));
                                                                                    ZohoData.Append(",\"Last_Verify\": \"\"");
                                                                                    if (!string.IsNullOrEmpty(Tenant.Collection_Last_Touch))
                                                                                    {
                                                                                        DateField Today = new DateField(DateTime.Now);
                                                                                        ZohoData.Append(string.Format(",\"Collection_Last_Touch\": \"{0}\"", Today.PayDateAsZohoDate));
                                                                                    }
                                                                                    if (Tenant.Payment_Declined.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Payment_Declined\": \"Cancelled\"");

                                                                                    tradeline.ApplyClosure(CloseFileOn.PayDate, 'D');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                }
                                                                                #endregion
                                                                                #region PMC-Collection
                                                                                if (testreason == "closed - pmc collection")
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Entering closing reason '{0}' logic Processing.", testreason), EventLogEntryType.Information, 8110);

                                                                                    ZohoData.Append("\"Pending_Close\": \"Closed Automation\""); //ZohoData.Append("\"Pending_Close\": \"Error Automation\"");
                                                                                    ZohoData.Append(String.Format(",\"Date_Closed\": \"{0}\"", DateField.CRMDateAsStringDate(Tenant.Date_to_Close)));
                                                                                    ZohoData.Append(",\"Reporting_Requested\": [\"Collection\"]");
                                                                                    if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Monthly_Subscription\": \"No\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_1.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_1.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_1\": \"Cancelled Sub / Pymts\"");
                                                                                    if ((Tenant.Renewal_Status_Yr_2.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_2.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_2\": \"Closed\"");
                                                                                    }
                                                                                    if ((Tenant.Renewal_Status_Yr_3.ToLower() == "subscription") || (Tenant.Renewal_Status_Yr_3.ToLower() == "subscription yearly"))
                                                                                        ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Cancelled Sub / Pymts\"");
                                                                                    else
                                                                                    {
                                                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "pending")
                                                                                            ZohoData.Append(",\"Renewal_Status_Yr_3\": \"Closed\"");
                                                                                    }
                                                                                    ZohoData.Append(",\"Still_Live_in_Home\": \"No\"");
                                                                                    ZohoData.Append(",\"Monthly_Landlord\": \"No\"");
                                                                                    ZohoData.Append(",\"Last_Batch\": \"\"");
                                                                                    ZohoData.Append(",\"Last_Batch_EQ\": \"\"");
                                                                                    ZohoData.Append(",\"A_Rental_Lease_Status\": \"93\"");
                                                                                    ZohoData.Append(",\"B_Payment_Rating\": \"\"");
                                                                                    ZohoData.Append(",\"Date_to_Close\": \"\"");
                                                                                    if (!string.IsNullOrEmpty(Tenant.Collection_Last_Touch))
                                                                                    {
                                                                                        DateField Today = new DateField(DateTime.Now);
                                                                                        ZohoData.Append(string.Format(",\"Collection_Last_Touch\": \"{0}\"", Today.PayDateAsZohoDate));
                                                                                    }
                                                                                    if (Tenant.Payment_Declined.ToLower() == "yes")
                                                                                        ZohoData.Append(",\"Payment_Declined\": \"Cancelled\"");

                                                                                    int Rental_Lease_Payment_Amount_Confirmed = 0;
                                                                                    int Rental_Lease_Payment_Amount = 0;
                                                                                    int Rental_Lease_Balance = 0;
                                                                                    double MonthlyRent = 0.0;
                                                                                    double LeftOwing = 0.0;

                                                                                    int.TryParse(Tenant.Rental_Lease_Payment_Amount, out Rental_Lease_Payment_Amount);
                                                                                    double.TryParse(Tenant.Rental_Lease_Payment_Amount, out MonthlyRent);
                                                                                    int.TryParse(Tenant.Rental_Lease_Balance, out Rental_Lease_Balance);
                                                                                    double.TryParse(Tenant.Rental_Lease_Balance, out LeftOwing);
                                                                                    Rental_Lease_Payment_Amount_Confirmed = Rental_Lease_Payment_Amount - Rental_Lease_Balance;

                                                                                    if (Rental_Lease_Payment_Amount_Confirmed < 0) Rental_Lease_Payment_Amount_Confirmed = 0;
                                                                                    ZohoData.Append(string.Format(",\"Rental_Lease_Payment_Amount_Confirmed\": \"{0}\"", Rental_Lease_Payment_Amount_Confirmed));
                                                                                    ZohoData.Append(string.Format(",\"Amount_Past_Due\": \"{0}\"", Rental_Lease_Balance));

                                                                                    int MonthsLate = (int)Math.Ceiling((double.Parse(Tenant.Rental_Lease_Balance) / double.Parse(Tenant.Rental_Lease_Payment_Amount)));
                                                                                    //DateTime DateOfFirstDelinquency = DateTime.MinValue;

                                                                                    //if (MonthsLate < 2)
                                                                                    //{
                                                                                    //    DateOfFirstDelinquency = CloseFileOn.PayAsDateTime.AddDays(-1.0);
                                                                                    //}
                                                                                    //else
                                                                                    //{
                                                                                    //    DateTime TempDate = CloseFileOn.PayAsDateTime.AddMonths((int)(-1.0 * MonthsLate));
                                                                                    //    DateOfFirstDelinquency = new DateTime(TempDate.Year, TempDate.Month, DateTime.DaysInMonth(TempDate.Year, TempDate.Month));
                                                                                    //}
                                                                                    ClosingDateResolutionProvider CDRP = new ClosingDateResolutionProvider(CloseFileOn.PayAsDateTime, MonthlyRent, LeftOwing);
                                                                                    if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                                                        ZohoData.Append(string.Format(",\"Date_of_First_Delinquency\": \"{0:MMddyyyy}\"", CDRP.DateOfFirstDelinquency));
                                                                                    //ZohoData.Append(string.Format(",\"Date_of_First_Delinquency\": \"{0:MMddyyyy}\"", DateOfFirstDelinquency));

                                                                                    //DateField LastPaymentDate = new DateField(DateOfFirstDelinquency);
                                                                                    //LastPaymentDate.DecrementDate();
                                                                                    //ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", new DateTime(LastPaymentDate.PayYear, LastPaymentDate.PayMonth, 5)));
                                                                                    ZohoData.Append(string.Format(",\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", CDRP.DateOfLastPayment));

                                                                                    tradeline.ApplyLateMonths(CloseFileOn.PayDate, MonthsLate, 'G');
                                                                                    tradeline.AdjustForCOVID19();
                                                                                    ZohoData.Append(string.Format(",\"Payment_History\": \"{0}\"", tradeline.ToString()));

                                                                                    //DateTime TempVerify = DateTime.Now.AddMonths(1);
                                                                                    StringBuilder AccountData = new StringBuilder("{ \"data\": [{");
                                                                                    //AccountData.Append(string.Format("\"Next_Verify\": \"{0:yyyy-MM-dd}\"", new DateTime(TempVerify.Year, TempVerify.Month, 5)));
                                                                                    AccountData.Append(string.Format("\"Next_Verify\": \"{0:yyyy-MM-dd}\"", new DateTime(DateTime.Now.Year, DateTime.Now.Month, 5)));
                                                                                    AccountData.Append(",\"Monthly_Email_Collection\": \"Yes\"");
                                                                                    AccountData.Append("}], \"trigger\":[]}");
                                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessClosingAccountsEx", "CRM", APITracker.APICalls.UpdateAccount);
                                                                                    if (ZM.UpdateAccount(Tenant.Account_Name.id, AccountData.ToString()))
                                                                                    {
                                                                                        // Account updated
                                                                                        // Removed per Gregg Email Thu 7/8/2021 1:17 PM Micro Task - Comment out Code in Closing Automation where we write error to "add Tenant to Collection List"
                                                                                        //ZM.AddToContactNotes(Tenant.id, "Closing Accounts Service", "Error: Need to add Tenant to Landlord Collection List.");
                                                                                    }

                                                                                }
                                                                                #endregion

                                                                                ZohoData.Append("}], \"trigger\":[\"workflow\"]}");

                                                                                #region Contact-Update
                                                                                CountAPICall("updatecontact");
                                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessClosingAccountsEx", "CRM", APITracker.APICalls.UpdateContact);
                                                                                if (!ZM.UpdateContact(Tenant.id, ZohoData.ToString()))
                                                                                {
                                                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, ZohoData.ToString()), EventLogEntryType.Error, 8900);
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts::{0} - Zoho Contact Updated. {1} \r\n\r\n {2}", Tenant.id, ZohoData.ToString(), ZM.DebugText), EventLogEntryType.Warning, 8300);
                                                                                    if (!string.IsNullOrEmpty(VoidedReport))
                                                                                    {
                                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessClosingAccountsEx", "CRM", APITracker.APICalls.AddContactNote);
                                                                                        ZM.AddToContactNotes(Tenant.id, "Closing Accounts Service", VoidedReport.Replace("\r", "\\r").Replace("\n", "\\n"));
                                                                                    }
                                                                                }
                                                                                #endregion

                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Tradeline is more than one (1) month old.");
                                                                            if (ReportedError.Successful)
                                                                            {
                                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8105);
                                                                            }
                                                                            else
                                                                            {
                                                                                ErrorLines += " - Zoho Contact Update Failed";
                                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                                            }

                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        StringBuilder TradelineError = new StringBuilder("Tradeline is Invalid.\r\n");
                                                                        foreach (string Error in tradeline.Failures)
                                                                        {
                                                                            TradelineError.Append(Error + "\r\n");
                                                                        }
                                                                        APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, TradelineError.ToString().Replace("\r", "\\r").Replace("\n", "\\n"));
                                                                        if (ReportedError.Successful)
                                                                        {
                                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                                        }
                                                                        else
                                                                        {
                                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (gErrorOnBlankClosingReason)
                                                                    {
                                                                        APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Blank Closing Reason.");
                                                                        if (ReportedError.Successful)
                                                                        {
                                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                                        }
                                                                        else
                                                                        {
                                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a blank closing reason. Skipping.", Tenant.id), EventLogEntryType.Information, 8200);
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Close Date earlier than Lease Start Date.");
                                                                if (ReportedError.Successful)
                                                                {
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                                }
                                                                else
                                                                {
                                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Invalid Rental Lease Start Date.");
                                                            if (ReportedError.Successful)
                                                            {
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                            }
                                                            else
                                                            {
                                                                ErrorLines += " - Zoho Contact Update Failed";
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Blank Rental Lease Start Date.");
                                                        if (ReportedError.Successful)
                                                        {
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                        }
                                                        else
                                                        {
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} is closing[{1}] this month or in the future. Skipping.", Tenant.id, CloseFileOn.PayDateAsString), EventLogEntryType.Information, 8200);
                                                }
                                            }
                                            else
                                            {
                                                APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Close File On date is invalid.");
                                                if (ReportedError.Successful)
                                                {
                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                                }
                                                else
                                                {
                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenant.id, "Close File On date is missing.");
                                            if (ReportedError.Successful)
                                            {
                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8106);
                                            }
                                            else
                                            {
                                                ErrorLines += " - Zoho Contact Update Failed";
                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8900);
                                            }
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Closing Accounts::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error, 88900);
                                EOF = true;
                            }

                        } //while !EOF

                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Completed.", EventLogEntryType.Warning, 8100);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Closing Accounts Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error, 8900);
                    }

                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Reaching Gate (Ongoing).", EventLogEntryType.Warning, 8000);
                    this.gGate6.WaitOne();
                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts Gate Opened (Ongoing).", EventLogEntryType.Warning, 8000);
                    if (this.gStopProcessingClosingAccounts)
                    {
                        continueRunning = false;
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry("Closing Accounts gStopProcessingClosingAccounts Flag True - Dropping out.", EventLogEntryType.Warning, 8000);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingClosingAccounts

        } // ProcessClosingAccountsEx
        private void ProcessVORs()
        {
            bool continueRunning = true;
            string logfilename = @"c:\IIS_App_Logs\MissingDocumentsResolution.log";

            // Wait to start for the first time until a minute of 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
            EventLog.WriteEntry(string.Format("VORs processing using Email Validation Key ({0}).", this.gEmailValidationAPIKey), EventLogEntryType.Warning);
            if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate7.WaitOne();
            if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingVORs)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;
                    string LLName = string.Empty;
                    string LLUser = string.Empty;
                    string LLPwd = string.Empty;

                    if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Processing Started.", EventLogEntryType.Warning);
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;
                        ValidationProvider VP = new ValidationProvider(this.gEmailValidationAPIKey);
                        VP.UseTLS12 = true;

                        ContactsFeedBack Tenants = null;
                        EmailValidationFeedback EmailStatus = null;

                        #region Standard Pass
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                            //if (ZM.SearchContacts("(Contact_Status:equals:01a. Vetting Assigned)OR(L_Missing_Doc_1:equals:VOR Not Sent Yet)OR(L_Missing_Doc_2:equals:VOR Not Sent Yet)OR(L_Missing_Doc_3:equals:VOR Not Sent Yet)OR(L_Missing_Doc_4:equals:VOR Not Sent Yet)OR(VOR_Needed:equals:VOR Form = No Lease)", Page, out CRMFeedback))
                            //if (ZM.SearchContacts("(Contact_Status:equals:01a. Vetting Assigned)OR(L_Missing_Doc_1:equals:VOR Not Sent Yet)OR(L_Missing_Doc_2:equals:VOR Not Sent Yet)OR(L_Missing_Doc_3:equals:VOR Not Sent Yet)OR(L_Missing_Doc_4:equals:VOR Not Sent Yet)", Page, out CRMFeedback))
                            //if (ZM.SearchContacts("(Contact_Status:equals:01a. Vetting Assigned)AND((L_Missing_Doc_1:equals:VOR Not Sent Yet)OR(L_Missing_Doc_2:equals:VOR Not Sent Yet)OR(L_Missing_Doc_3:equals:VOR Not Sent Yet)OR(L_Missing_Doc_4:equals:VOR Not Sent Yet))", Page, out CRMFeedback))
                            if (ZM.SearchContacts("(Contact_Status:equals:01a. Vetting Assigned)", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(ce.Message);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        ErrorLines = string.Empty;
                                        bool hasErrors = false;
                                        string Response = string.Empty;
                                        MemoryStream AttachmentData = null;
                                        byte[] TenantAgreementPDF = null;
                                        AccountsFeedBack Landlords = null;
                                        Account thisLandlord = null;
                                        bool firstItem = true;
                                        bool LandlordEmailFailedValidation = false;
                                        bool NoTenantAgreement = false;
                                        int NbrOfTenants = 0;

                                        if (string.IsNullOrEmpty(Tenant.First_Name)) Tenant.First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Name)) Tenant.Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Street)) Tenant.Street = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_First_Name)) Tenant.R1_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_Last_Name)) Tenant.R1_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_First_Name)) Tenant.R2_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_Last_Name)) Tenant.R2_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_First_Name)) Tenant.R3_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_Last_Name)) Tenant.R3_Last_Name = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.VOR_Needed)) Tenant.VOR_Needed = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Email)) Tenant.Email = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_Email)) Tenant.R1_Email = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_Email)) Tenant.R2_Email = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_Email)) Tenant.R3_Email = string.Empty;

                                        if (!string.IsNullOrEmpty(Tenant.Last_Name) && !string.IsNullOrEmpty(Tenant.First_Name))
                                            NbrOfTenants++;

                                        if (!string.IsNullOrEmpty(Tenant.R1_Last_Name) && !string.IsNullOrEmpty(Tenant.R1_First_Name))
                                            NbrOfTenants++;

                                        if (!string.IsNullOrEmpty(Tenant.R2_Last_Name) && !string.IsNullOrEmpty(Tenant.R2_First_Name))
                                            NbrOfTenants++;

                                        if (!string.IsNullOrEmpty(Tenant.R3_Last_Name) && !string.IsNullOrEmpty(Tenant.R3_First_Name))
                                            NbrOfTenants++;

                                        MissingDocuments MDs = new MissingDocuments();
                                        MDs.MissingDoc1 = Tenant.Missing_Doc_1;
                                        MDs.MissingDoc2 = Tenant.Missing_Doc_2;
                                        MDs.MissingDoc3 = Tenant.Missing_Doc_3;
                                        MDs.MissingDoc4 = Tenant.Missing_Doc_4;
                                        MDs.MissingDoc5 = Tenant.Missing_Doc_5;
                                        MDs.MissingDoc6 = Tenant.Missing_Doc_6;
                                        MDs.LMissingDoc1 = Tenant.L_Missing_Doc_1;
                                        MDs.LMissingDoc2 = Tenant.L_Missing_Doc_2;
                                        MDs.LMissingDoc3 = Tenant.L_Missing_Doc_3;
                                        MDs.LMissingDoc4 = Tenant.L_Missing_Doc_4;
                                        MDs.LMissingDoc5 = Tenant.L_Missing_Doc_5;
                                        MDs.LMissingDoc6 = Tenant.L_Missing_Doc_6;

                                        if ((Tenant.Contact_Status.ToLower() != "07b. file rejected") && (Tenant.Contact_Status.ToLower() != "01c. vor error"))
                                        {
                                            WriteToLogFileEx(logfilename, "======================================================================================================================================");
                                            WriteToLogFileEx(logfilename, string.Format("Starting work on Tenant -> {0}", Tenant.id));

                                            // Resolve Missing Docs based on FileSystemCategories
                                            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                            {
                                                dbc.Open();

                                                WriteToLogFileEx(logfilename, "Database Opened.");

                                                DataTable FileCategories = new DataTable();
                                                string theSQL = "SELECT id, tenantportal, tenantportaltext, missingdocmatch FROM crbdb.mt_filesystemcategories WHERE tenantportal = 2 ORDER BY viewgroup;";
                                                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                                {
                                                    dbcc.CommandType = CommandType.Text;
                                                    using (MySqlDataAdapter dba = new MySqlDataAdapter(dbcc))
                                                    {
                                                        dba.Fill(FileCategories);
                                                    }
                                                }

                                                WriteToLogFileEx(logfilename, string.Format("File Category Table filled with {0} records.", FileCategories.Rows.Count));

                                                if (FileCategories.Rows.Count > 0)
                                                {
                                                    foreach (DataRow dr in FileCategories.Rows)
                                                    {
                                                        bool UseThisDocument = true;
                                                        int FCCategory = int.Parse(dr["id"].ToString());
                                                        int PortalType = int.Parse(dr["tenantportal"].ToString());
                                                        string MissingDocMatchList = dr["missingdocmatch"].ToString();

                                                        if (((NbrOfTenants >= 1) && (FCCategory == 9)) || ((NbrOfTenants >= 2) && (FCCategory == 10)) || ((NbrOfTenants >= 3) && (FCCategory == 11)) || ((NbrOfTenants >= 4) && (FCCategory == 12)) || (FCCategory == 13) || (FCCategory == 14))
                                                        {
                                                            string[] mdocs = MissingDocMatchList.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                                                            string MissingDocument = string.Empty;

                                                            if (mdocs.Length > 0) MissingDocument = mdocs[0];

                                                            WriteToLogFileEx(logfilename, string.Format("Processing File Category {0} record For Missing Document [{1}].", FCCategory, MissingDocument));

                                                            if (FCCategory == 13)
                                                            {
                                                                if (!HasCurrentOnlyProduct(Tenant.Reporting_Requested) && !HasCurrentAndPastProduct(Tenant.Reporting_Requested)) UseThisDocument = false;
                                                            }
                                                            else if (FCCategory == 14)
                                                            {
                                                                if (!HasPastOnlyProduct(Tenant.Reporting_Requested) && !HasCurrentAndPastProduct(Tenant.Reporting_Requested)) UseThisDocument = false;
                                                            }

                                                            if (UseThisDocument)
                                                            {
                                                                theSQL = string.Format("SELECT a.id, a.pathid, a.filecategory, a.filestatus, a.uploadedon, b.tenantportal FROM crbdb.mt_filesystem a INNER JOIN crbdb.mt_filesystemstatuses b ON a.filestatus = b.id WHERE (filecategory = {1}) AND (contactid = '{0}') AND (deleted = false) ORDER BY filestatus, uploadedon DESC;", Tenant.id, FCCategory);
                                                                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                                                {
                                                                    dbcc.CommandType = CommandType.Text;
                                                                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                                    {
                                                                        if (dbr.HasRows)
                                                                        {
                                                                            if (dbr.Read())
                                                                            {
                                                                                if (dbr.GetInt32(3) != 4)
                                                                                {
                                                                                    // Add if not already there
                                                                                    if ((Tenant.Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                                                        (Tenant.Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                                                        (Tenant.Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                                                        (Tenant.Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                                                        (Tenant.Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                                                        (Tenant.Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                                                    {
                                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                                                        {
                                                                                            Tenant.Missing_Doc_1 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 1.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                                        {
                                                                                            Tenant.Missing_Doc_2 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 2.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                                        {
                                                                                            Tenant.Missing_Doc_3 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 3.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                                        {
                                                                                            Tenant.Missing_Doc_4 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 4.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                                        {
                                                                                            Tenant.Missing_Doc_5 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 5.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                        {
                                                                                            Tenant.Missing_Doc_6 = MissingDocument;
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 6.", FCCategory, MissingDocument));
                                                                                        }
                                                                                        else
                                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being ignored, all Missing Docs slots are full.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is already in Missing Docs.", FCCategory, MissingDocument));
                                                                                }
                                                                                else
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record STATUS ({1}) IS APPROVED.", FCCategory, dbr.GetInt32(3)));
                                                                            }
                                                                            else
                                                                            {
                                                                                WriteToLogFileEx(logfilename, string.Format("File Category {0} record NOT FOUND.", FCCategory));

                                                                                // Add if not already there
                                                                                if ((Tenant.Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                                                    (Tenant.Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                                                    (Tenant.Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                                                    (Tenant.Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                                                    (Tenant.Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                                                    (Tenant.Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                                                {
                                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                                                    {
                                                                                        Tenant.Missing_Doc_1 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 1.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                                    {
                                                                                        Tenant.Missing_Doc_2 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 2.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                                    {
                                                                                        Tenant.Missing_Doc_3 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 3.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                                    {
                                                                                        Tenant.Missing_Doc_4 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 4.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                                    {
                                                                                        Tenant.Missing_Doc_5 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 5.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                    {
                                                                                        Tenant.Missing_Doc_6 = MissingDocument;
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 6.", FCCategory, MissingDocument));
                                                                                    }
                                                                                    else
                                                                                        WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being ignored, all Missing Docs slots are full.", FCCategory, MissingDocument));
                                                                                }
                                                                                else
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is already in Missing Docs.", FCCategory, MissingDocument));
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            WriteToLogFileEx(logfilename, string.Format("File Category {0} record NOT FOUND.", FCCategory));

                                                                            // Add if not already there
                                                                            if ((Tenant.Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                                                (Tenant.Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                                                (Tenant.Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                                                (Tenant.Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                                                (Tenant.Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                                                (Tenant.Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                                            {
                                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                                                {
                                                                                    Tenant.Missing_Doc_1 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 1.", FCCategory, MissingDocument));
                                                                                }
                                                                                else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                                {
                                                                                    Tenant.Missing_Doc_2 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 2.", FCCategory, MissingDocument));
                                                                                }
                                                                                else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                                {
                                                                                    Tenant.Missing_Doc_3 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 3.", FCCategory, MissingDocument));
                                                                                }
                                                                                else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                                {
                                                                                    Tenant.Missing_Doc_4 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 4.", FCCategory, MissingDocument));
                                                                                }
                                                                                else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                                {
                                                                                    Tenant.Missing_Doc_5 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 5.", FCCategory, MissingDocument));
                                                                                }
                                                                                else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                {
                                                                                    Tenant.Missing_Doc_6 = MissingDocument;
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being placed in Missing Docs 6.", FCCategory, MissingDocument));
                                                                                }
                                                                                else
                                                                                    WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is being ignored, all Missing Docs slots are full.", FCCategory, MissingDocument));
                                                                            }
                                                                            else
                                                                                WriteToLogFileEx(logfilename, string.Format("File Category {0} record Missing Document [{1}] is already in Missing Docs.", FCCategory, MissingDocument));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                                WriteToLogFileEx(logfilename, string.Format("Skipping File Category {0} record Missing Document [{1}]. Reporting requested doesn't require it.", FCCategory, MissingDocument));
                                                        }
                                                    }
                                                }

                                                //
                                                // Additional Landlord Documents
                                                //
                                                if ((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Special - Gregg"))
                                                {
                                                    WriteToLogFileEx(logfilename, "Adding additional missing documents because Landlord_Vetting='Gregg'.");
                                                    string MissingDocument = string.Empty;

                                                    if (!DMSHasThisDocument(Tenant.id, LANDLORD_ID, dbc))
                                                    {
                                                        MissingDocument = "Landlord ID (requested from Landlord)";
                                                        if ((Tenant.Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                            {
                                                                Tenant.Missing_Doc_1 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                            {
                                                                Tenant.Missing_Doc_2 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                            {
                                                                Tenant.Missing_Doc_3 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                            {
                                                                Tenant.Missing_Doc_4 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                            {
                                                                Tenant.Missing_Doc_5 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                            {
                                                                Tenant.Missing_Doc_6 = MissingDocument;
                                                            }
                                                        }

                                                        MissingDocument = "Photo ID - Landlord";
                                                        if ((Tenant.L_Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                            {
                                                                Tenant.L_Missing_Doc_1 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                Tenant.L_Missing_Doc_2 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                            {
                                                                Tenant.L_Missing_Doc_3 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                            {
                                                                Tenant.L_Missing_Doc_4 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                            {
                                                                Tenant.L_Missing_Doc_5 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                            {
                                                                Tenant.L_Missing_Doc_6 = MissingDocument;
                                                            }
                                                        }
                                                    }

                                                    if (!DMSHasThisDocument(Tenant.id, PROPERTY_TAX_RECORDS, dbc))
                                                    {
                                                        MissingDocument = "Proof of Ownership";
                                                        if ((Tenant.L_Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.L_Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                            {
                                                                Tenant.L_Missing_Doc_1 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                Tenant.L_Missing_Doc_2 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                            {
                                                                Tenant.L_Missing_Doc_3 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                            {
                                                                Tenant.L_Missing_Doc_4 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                            {
                                                                Tenant.L_Missing_Doc_5 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                            {
                                                                Tenant.L_Missing_Doc_6 = MissingDocument;
                                                            }
                                                        }

                                                        MissingDocument = "Landlord Proof of Ownership";
                                                        if ((Tenant.Missing_Doc_1.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_2.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_3.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_4.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_5.ToLower() != MissingDocument.ToLower()) &&
                                                            (Tenant.Missing_Doc_6.ToLower() != MissingDocument.ToLower()))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                            {
                                                                Tenant.Missing_Doc_1 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                            {
                                                                Tenant.Missing_Doc_2 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                            {
                                                                Tenant.Missing_Doc_3 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                            {
                                                                Tenant.Missing_Doc_4 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                            {
                                                                Tenant.Missing_Doc_5 = MissingDocument;
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                            {
                                                                Tenant.Missing_Doc_6 = MissingDocument;
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            //
                                            // Snapshot the current list of missing docs in zoho - then let the rest of the process sort the rest
                                            //
                                            StringBuilder mdu = new StringBuilder("{ \"data\": [");
                                            mdu.Append("{ ");
                                            mdu.Append(string.Format("\"Missing_Doc_1\": \"{0}\",", Tenant.Missing_Doc_1));
                                            mdu.Append(string.Format("\"Missing_Doc_2\": \"{0}\",", Tenant.Missing_Doc_2));
                                            mdu.Append(string.Format("\"Missing_Doc_3\": \"{0}\",", Tenant.Missing_Doc_3));
                                            mdu.Append(string.Format("\"Missing_Doc_4\": \"{0}\",", Tenant.Missing_Doc_4));
                                            mdu.Append(string.Format("\"Missing_Doc_5\": \"{0}\",", Tenant.Missing_Doc_5));
                                            mdu.Append(string.Format("\"Missing_Doc_6\": \"{0}\",", Tenant.Missing_Doc_6));
                                            mdu.Append(string.Format("\"L_Missing_Doc_1\": \"{0}\",", Tenant.L_Missing_Doc_1));
                                            mdu.Append(string.Format("\"L_Missing_Doc_2\": \"{0}\",", Tenant.L_Missing_Doc_2));
                                            mdu.Append(string.Format("\"L_Missing_Doc_3\": \"{0}\",", Tenant.L_Missing_Doc_3));
                                            mdu.Append(string.Format("\"L_Missing_Doc_4\": \"{0}\",", Tenant.L_Missing_Doc_4));
                                            mdu.Append(string.Format("\"L_Missing_Doc_5\": \"{0}\",", Tenant.L_Missing_Doc_5));
                                            mdu.Append(string.Format("\"L_Missing_Doc_6\": \"{0}\"", Tenant.L_Missing_Doc_6));
                                            mdu.Append(" }");
                                            mdu.Append("], \"trigger\":[]}");

                                            WriteToLogFileEx(logfilename, string.Format("Created this JOSN -> {0}", mdu.ToString()));

                                            CountAPICall("updatecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                            if (!ZM.UpdateContact(Tenant.id, mdu.ToString()))
                                            {
                                                WriteToLogFileEx(logfilename, string.Format("Contact Update Failed {0}", ZM.DebugText));
                                                EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Missing Doc Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, mdu.ToString()), EventLogEntryType.Error);
                                            }
                                            else
                                            {
                                                WriteToLogFileEx(logfilename, "Contact Update Successful!");
                                                EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Missing Doc Contact Update Succeeded. JSON = {1}", Tenant.id, ZM.DebugText, mdu.ToString()), EventLogEntryType.SuccessAudit);
                                            }

                                            WriteToLogFileEx(logfilename, "======================================================================================================================================");

                                            if ((Tenant.VOR_Needed.ToLower() != "vor canned email = have lease") && (Tenant.VOR_Needed.ToLower() != "vor completed"))
                                            {
                                                if (gProcessVORsDebugging) EventLog.WriteEntry("VOR Processing::Retrieving Landlord.", EventLogEntryType.Warning);
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetAccount);
                                                if (ZM.GetAccount(Tenant.Account_Name.id, out Response))
                                                {
                                                    Landlords = JsonConvert.DeserializeObject<AccountsFeedBack>(Response);
                                                    if (Landlords != null)
                                                        thisLandlord = Landlords.data[0];
                                                }

                                                if (thisLandlord != null)
                                                {
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("VOR Processing::Checking Landlord Email.", EventLogEntryType.Warning);

                                                    if (string.IsNullOrEmpty(thisLandlord.Email_1)) thisLandlord.Email_1 = string.Empty;
                                                    //if (string.IsNullOrEmpty(thisLandlord.Primary_Contact)) thisLandlord.Primary_Contact = string.Empty;
                                                    if (string.IsNullOrEmpty(thisLandlord.Account_Name)) thisLandlord.Account_Name = string.Empty;

                                                    LLUser = thisLandlord.Email_1;
                                                    //LLName = thisLandlord.Primary_Contact;
                                                    LLName = thisLandlord.Account_Name;
                                                    LLPwd = string.Empty;

                                                    if (string.IsNullOrEmpty(thisLandlord.Portal_Access)) thisLandlord.Portal_Access = "no";

                                                    if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                    {
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry("VOR Processing::Comparing Landlord Email to Tenant Emails.", EventLogEntryType.Warning);


                                                        //if ((thisLandlord.Email_1 != Tenant.Email) && (thisLandlord.Email_1 != Tenant.R1_Email) && (thisLandlord.Email_1 != Tenant.R2_Email) && (thisLandlord.Email_1 != Tenant.R3_Email))
                                                        if ((thisLandlord.Email_1.ToLower() != Tenant.Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R1_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R2_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R3_Email.ToLower()))
                                                        {
                                                            //
                                                            // Check Landlord Email if necessary
                                                            //
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry("VOR Processing::Vetting Landlord.", EventLogEntryType.Warning);

                                                            if (string.IsNullOrEmpty(thisLandlord.Email_Vetted)) thisLandlord.Email_Vetted = "No";

                                                            if (thisLandlord.Email_Vetted == "No")
                                                            {
                                                                #region CheckLandlordemail
                                                                if (VP.ValidateEmail(thisLandlord.Email_1.Trim(), out EmailStatus))
                                                                {
                                                                    //if (EmailStatus.emailVerification.mailboxVerification.result.ToLower() != "ok")
                                                                    if (IsBadEmail(EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason))
                                                                    {
                                                                        hasErrors = true;
                                                                        LandlordEmailFailedValidation = true;
                                                                        // Update the Account
                                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                        cu.Append("{ ");
                                                                        cu.Append("\"Email_Vetted\": \"Bad\",");
                                                                        cu.Append("\"Email_1\": \"\"");
                                                                        cu.Append(" }");
                                                                        cu.Append("], \"trigger\":[]}");

                                                                        CountAPICall("updateaccount");
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                        if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                        {
                                                                            // Failed Account Update  - Tell Somebody
                                                                            ErrorLines += " - Zoho Account Update Failed";
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                        }
                                                                        else
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);

                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                                                                        ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VOR Error: Bad Landlord Email Address Detected '{0}' Validation Service Says: '{1}-{2}'", thisLandlord.Email_1, EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason));
                                                                    }
                                                                    else
                                                                    {
                                                                        // Update the Account
                                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                        cu.Append("{ ");
                                                                        cu.Append("\"Email_Vetted\": \"Good\"");
                                                                        cu.Append(" }");
                                                                        cu.Append("], \"trigger\":[]}");

                                                                        CountAPICall("updateaccount");
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                        if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                        {
                                                                            // Failed Account Update  - Tell Somebody
                                                                            ErrorLines += " - Zoho Account Update Failed";
                                                                            EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                        }
                                                                        else
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);
                                                                   }
                                                                }
                                                                else
                                                                {
                                                                    LandlordEmailFailedValidation = true;
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText), EventLogEntryType.Error);
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText.Replace("\r", "\\r").Replace("\n", "\\n")));
                                                                }
                                                                #endregion
                                                            }

                                                            if (gProcessVORsDebugging) EventLog.WriteEntry("VOR Processing::Retrieving Tenant Agreement.", EventLogEntryType.Warning);
                                                            // Find and get Tenant Agreement
                                                            #region GetTenantAgreementAttachment
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachmentList);
                                                            if (ZM.GetContactAttachmentList(Tenant.id, out Response))
                                                            {
                                                                AttachmentListFeedback attachmentlist = JsonConvert.DeserializeObject<AttachmentListFeedback>(Response);

                                                                if (attachmentlist != null)
                                                                {
                                                                    if (attachmentlist.data != null)
                                                                    {
                                                                        foreach (AttachmentItem attachment in attachmentlist.data)
                                                                        {
                                                                            if (!string.IsNullOrEmpty(attachment.File_Name))
                                                                            {
                                                                                if ((attachment.File_Name.ToLower() == "tenantagreement.pdf") || (attachment.File_Name.ToLower() == "tenant agreement.pdf") || (attachment.File_Name.ToLower() == "tenant registration.pdf"))
                                                                                {
                                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachment);
                                                                                    if (ZM.GetContactAttachment(Tenant.id, attachment.id, out AttachmentData))
                                                                                    {
                                                                                        TenantAgreementPDF = AttachmentData.ToArray();
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        hasErrors = true;
                                                                                        ErrorLines += "Tenant Agreement found but was unable to download it.";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        if (!hasErrors)
                                                                        {
                                                                            if (TenantAgreementPDF != null)
                                                                            {
                                                                                if (TenantAgreementPDF.Length <= 0)
                                                                                {
                                                                                    hasErrors = true;
                                                                                    NoTenantAgreement = true;
                                                                                    ErrorLines += "Tenant Agreement was not found.";
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                hasErrors = true;
                                                                                NoTenantAgreement = true;
                                                                                ErrorLines += "Tenant Agreement was not found.";
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        hasErrors = true;
                                                                        NoTenantAgreement = true;
                                                                        ErrorLines += "Tenant has no attachments.";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    hasErrors = true;
                                                                    NoTenantAgreement = true;
                                                                    ErrorLines += "Unable to obtain a list of attachments.";
                                                                }
                                                            }
                                                            else
                                                            {
                                                                hasErrors = true;
                                                                NoTenantAgreement = true;
                                                                ErrorLines += "Unable to obtain a list of attachments.";
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            // error - Landlord email is one of the tenants
                                                            hasErrors = true;
                                                            LandlordEmailFailedValidation = true;
                                                            ErrorLines += "Tenant / Roommates email and the Landlord email are the same.";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // error - blank email
                                                        hasErrors = true;
                                                        LandlordEmailFailedValidation = true;
                                                        ErrorLines += "There is not valid Landlord email.";
                                                    }
                                                }
                                                else
                                                {
                                                    // error - can't get account
                                                    hasErrors = true;
                                                    ErrorLines += "Service was unable to retrieve the Landlord Record.";
                                                }

                                                if (string.IsNullOrEmpty(Tenant.Landlord_Vetting))
                                                {
                                                    hasErrors = true;
                                                    ErrorLines += "Landlord Vetting Field is Empty. Cannot process VOR.";
                                                }

                                                if (hasErrors)
                                                {
                                                    #region HasErrorsProcessing
                                                    // Update the Contact
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");

                                                    if (!LandlordEmailFailedValidation)
                                                    {
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                        {
                                                            if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append("\"Missing_Doc_1\": \"\"");
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_1\": \"\"");
                                                                }
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                        {
                                                            if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append("\"Missing_Doc_2\": \"\"");
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_2\": \"\"");
                                                                }
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                        {
                                                            if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        cu.Append("\"Missing_Doc_3\": \"\"");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_3\": \"\"");
                                                                }
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                        {
                                                            if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append("\"Missing_Doc_4\": \"\"");
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_4\": \"\"");
                                                                }
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                        {
                                                            if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append("\"Missing_Doc_5\": \"\"");
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_5\": \"\"");
                                                                }
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                        {
                                                            if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)"))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                        cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append("\"Missing_Doc_6\": \"\"");
                                                                }
                                                                else
                                                                {
                                                                    if (NoTenantAgreement)
                                                                    {
                                                                        NoTenantAgreement = false;
                                                                        Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                        cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_6\": \"\"");
                                                                }
                                                            }
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            if (Tenant.L_Missing_Doc_1.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_1\": \"\"");
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                        {
                                                            if (Tenant.L_Missing_Doc_2.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_2\": \"\"");
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                        {
                                                            if (Tenant.L_Missing_Doc_3.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_3\": \"\"");
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                        {
                                                            if (Tenant.L_Missing_Doc_4.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_4\": \"\"");
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                        {
                                                            if (Tenant.L_Missing_Doc_5.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                        {
                                                            if (Tenant.L_Missing_Doc_6.ToLower() == "email address")
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = true;
                                                                    cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() != "landlord email address") &&
                                                           (Tenant.Missing_Doc_2.ToLower() != "landlord email address") &&
                                                           (Tenant.Missing_Doc_3.ToLower() != "landlord email address") &&
                                                           (Tenant.Missing_Doc_4.ToLower() != "landlord email address") &&
                                                           (Tenant.Missing_Doc_5.ToLower() != "landlord email address") &&
                                                           (Tenant.Missing_Doc_6.ToLower() != "landlord email address"))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_2\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_2\": \"Landlord Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_3\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_3\": \"Landlord Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                            }
                                                        }

                                                        if ((Tenant.L_Missing_Doc_1.ToLower() != "email address") &&
                                                           (Tenant.L_Missing_Doc_2.ToLower() != "email address") &&
                                                           (Tenant.L_Missing_Doc_3.ToLower() != "email address") &&
                                                           (Tenant.L_Missing_Doc_4.ToLower() != "email address") &&
                                                           (Tenant.L_Missing_Doc_5.ToLower() != "email address") &&
                                                           (Tenant.L_Missing_Doc_6.ToLower() != "email address"))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_1\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_1\": \"Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_2\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_2\": \"Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_3\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_3\": \"Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_4\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_4\": \"Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_5\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_5\": \"Email Address\"");
                                                            }
                                                            else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_6\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_6\": \"Email Address\"");
                                                            }
                                                        }

                                                        if (gProcessVORsDebugging) EventLog.WriteEntry("VORs::Sending Bad Landlord Error Email", EventLogEntryType.Error);
                                                        // send Error Email
                                                        if (!Tenant.Email_Opt_Out)
                                                        {
                                                            string tempEmail = "No Email Given";
                                                            EmailProvider EP = new EmailProvider();
                                                            if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                                tempEmail = thisLandlord.Email_1;

                                                            if (!EP.SendBadLandlordEmail("andy@creditrentboost.com", Tenant, tempEmail))
                                                            {
                                                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs::Failed trying to send Landlord Email Validation Error Email::{0}", EP.ErrorData), EventLogEntryType.Error);
                                                            }
                                                            EP = null;
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet") 
                                                        {
                                                            Tenant.L_Missing_Doc_1 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_1\": \"\""); 
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet") 
                                                        {
                                                            Tenant.L_Missing_Doc_2 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_2\": \"\""); 
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet") 
                                                        {
                                                            Tenant.L_Missing_Doc_3 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_3\": \"\""); 
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet") 
                                                        {
                                                            Tenant.L_Missing_Doc_4 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_4\": \"\""); 
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet")
                                                        {
                                                            Tenant.L_Missing_Doc_5 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet")
                                                        {
                                                            Tenant.L_Missing_Doc_6 = string.Empty;
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                        }
                                                    }

                                                    if (NoTenantAgreement)
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                        {
                                                            Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                        }
                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                        {
                                                            Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                        }
                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                        {
                                                            Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                        }
                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                        {
                                                            Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                        }
                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                        {
                                                            Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                        }
                                                        else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                        {
                                                            Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                        }
                                                    }
                                                    // ceppp8
                                                    if ((Tenant.Contact_Status.ToLower() == "01a. vetting assigned") || (Tenant.Contact_Status.ToLower() == "01b. vor sent"))
                                                    {
                                                        if (firstItem)
                                                        {
                                                            cu.Append("\"Contact_Status\": \"01. Signed Up\""); //cu.Append("\"Contact_Status\": \"01c. VOR Error\"");
                                                            firstItem = false;
                                                        }
                                                        else
                                                            cu.Append(",\"Contact_Status\": \"01. Signed Up\""); //cu.Append(",\"Contact_Status\": \"01c. VOR Error\"");
                                                    }
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        // Failed Contact Update  - Tell Somebody
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                    }
                                                    else
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VOR Processing::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                    ZM.AddToContactNotes(Tenant.id, "Verification Of Rent", ErrorLines);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region NoErrorsProcessing
                                                    string EmailTemplate = string.Empty;

                                                    using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                                    {
                                                        dbc.Open();
                                                        using (MySqlCommand dbcc = new MySqlCommand(string.Format("SELECT emailtemplate FROM crbdb.mt_landlordemailtemplates WHERE LOWER(vettingvalue) = '{0}';", Tenant.Landlord_Vetting.ToLower()), dbc))
                                                        {
                                                            dbcc.CommandType = CommandType.Text;
                                                            using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                            {
                                                                if (dbr.HasRows)
                                                                {
                                                                    if (dbr.Read())
                                                                    {
                                                                        EmailTemplate = dbr.GetString(0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(EmailTemplate))
                                                    {
                                                        // Update the Contact
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        cu.Append("\"Contact_Status\": \"01b. VOR Sent\",");

                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;

                                                        if ((Tenant.Missing_Doc_1.ToLower() != "verification of rent (requested from landlord)") &&
                                                           (Tenant.Missing_Doc_2.ToLower() != "verification of rent (requested from landlord)") &&
                                                           (Tenant.Missing_Doc_3.ToLower() != "verification of rent (requested from landlord)") &&
                                                           (Tenant.Missing_Doc_4.ToLower() != "verification of rent (requested from landlord)") &&
                                                           (Tenant.Missing_Doc_5.ToLower() != "verification of rent (requested from landlord)") &&
                                                           (Tenant.Missing_Doc_6.ToLower() != "verification of rent (requested from landlord)"))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                                cu.Append("\"Missing_Doc_1\": \"Verification of Rent (Requested from Landlord)\",");
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                    cu.Append("\"Missing_Doc_2\": \"Verification of Rent (Requested from Landlord)\",");
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                        cu.Append("\"Missing_Doc_3\": \"Verification of Rent (Requested from Landlord)\",");
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                            cu.Append("\"Missing_Doc_4\": \"Verification of Rent (Requested from Landlord)\",");
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                                cu.Append("\"Missing_Doc_5\": \"Verification of Rent (Requested from Landlord)\",");
                                                                            else
                                                                            {
                                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                    cu.Append("\"Missing_Doc_6\": \"Verification of Rent (Requested from Landlord)\",");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                                        if ((Tenant.L_Missing_Doc_1.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_2.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_3.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_4.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_5.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_6.ToLower() != "vor form (sent - not received)"))
                                                        {
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                            {
                                                                if (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_1\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                if (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_2\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                            {
                                                                if (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_3\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                            {
                                                                if (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_4\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                            {
                                                                if (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_5\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                            {
                                                                if (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_6\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                        }

                                                        if ((Tenant.L_Missing_Doc_1.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_2.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_3.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_4.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_5.ToLower() != "vor form (sent - not received)") &&
                                                           (Tenant.L_Missing_Doc_6.ToLower() != "vor form (sent - not received)"))
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                            {
                                                                cu.Append("\"L_Missing_Doc_1\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                                {
                                                                    cu.Append("\"L_Missing_Doc_2\": \"VOR Form (Sent - not Received)\",");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                                    {
                                                                        cu.Append("\"L_Missing_Doc_3\": \"VOR Form (Sent - not Received)\",");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                                        {
                                                                            cu.Append("\"L_Missing_Doc_4\": \"VOR Form (Sent - not Received)\",");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                                            {
                                                                                cu.Append("\"L_Missing_Doc_5\": \"VOR Form (Sent - not Received)\",");
                                                                            }
                                                                            else
                                                                            {
                                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                                                {
                                                                                    cu.Append("\"L_Missing_Doc_6\": \"VOR Form (Sent - not Received)\",");
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (LandlordEmailFailedValidation)
                                                        {
                                                            cu.Append("\"Tech_Error\": \"Yes\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                        {
                                                            if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_1\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                        {
                                                            if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_2\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                        {
                                                            if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_3\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                        {
                                                            if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_4\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                        {
                                                            if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_5\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                        {
                                                            if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_6\": \"\",");
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            if (Tenant.L_Missing_Doc_1.ToLower() == "email address") cu.Append("\"L_Missing_Doc_1\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                        {
                                                            if (Tenant.L_Missing_Doc_2.ToLower() == "email address") cu.Append("\"L_Missing_Doc_2\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                        {
                                                            if (Tenant.L_Missing_Doc_3.ToLower() == "email address") cu.Append("\"L_Missing_Doc_3\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                        {
                                                            if (Tenant.L_Missing_Doc_4.ToLower() == "email address") cu.Append("\"L_Missing_Doc_4\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                        {
                                                            if (Tenant.L_Missing_Doc_5.ToLower() == "email address") cu.Append("\"L_Missing_Doc_5\": \"\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                        {
                                                            if (Tenant.L_Missing_Doc_6.ToLower() == "email address") cu.Append("\"L_Missing_Doc_6\": \"\",");
                                                        }
                                                        cu.Append(string.Format("\"VOR_Req_Date\": {0:yyyy-MM-dd}", DateTime.Now));
                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[\"workflow\"]}");  //cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            // Failed Contact Update  - Tell Somebody
                                                            ErrorLines += " - Zoho Contact Update Failed";
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                        }
                                                        else
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                        EmailProvider EP = new EmailProvider();
                                                        string URLLink = "https://www.creditrentboost.com/enrollment/RentVerification.aspx?os=tenant&oi=" + Tenant.id;
                                                        FileData Attachment = new FileData();
                                                        Attachment.FieldSource = "file";
                                                        Attachment.FileName = "TenantAgreement.pdf";
                                                        Attachment.FileType = "application/pdf";
                                                        Attachment.FileContents = TenantAgreementPDF;

                                                        // Xcp 1
                                                        EnsureLandlordInvite(Tenant.Account_Name.id, ZM, LLName, ref LLUser, ref LLPwd);

                                                        //EP.SendVerificationOfRent(thisLandlord.Email_1, "andy@creditrentboost.com", URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment);
                                                        //EP.SendVerificationOfRent(thisLandlord.Email_1, string.Empty, URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment);
                                                        //EP.SendVerificationOfRentEx(thisLandlord.Email_1, string.Empty, URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                        EP.SendVerificationOfRentEx(thisLandlord.Email_1, "andy@creditrentboost.com", URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                        EP = null;
                                                    } // emailtemplate == string.empty
                                                    #endregion
                                                } // if haserror
                                            } // VOR Needed = VOR Canned Email = Have Lease or VOR Completed
                                        } // contact_status = 07b. file rejected
                                    } // foreach

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        // Tweedle Dee and Tweedle Dumb wanted this crap cause ethey are too busy to do their jobs well... The first time!

                        #region Idiot Pass
                        EOF = false;
                        Page = 1;

                        try
                        {
                            while (!EOF)
                            {
                                CountAPICall("searchcontact");
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                                if (ZM.SearchContacts("(VOR_Resend:equals:Yes)", Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        EventLog.WriteEntry(ce.Message);
                                        Tenants = null;
                                    }

                                    if (Tenants != null)
                                    {
                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                        foreach (Contact Tenant in Tenants.data)
                                        {
                                            ErrorLines = string.Empty;
                                            bool hasErrors = false;
                                            string Response = string.Empty;
                                            MemoryStream AttachmentData = null;
                                            byte[] TenantAgreementPDF = null;
                                            AccountsFeedBack Landlords = null;
                                            Account thisLandlord = null;
                                            bool firstItem = true;
                                            bool LandlordEmailFailedValidation = false;
                                            bool NoTenantAgreement = false;

                                            if (string.IsNullOrEmpty(Tenant.VOR_Needed)) Tenant.VOR_Needed = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Email)) Tenant.Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R1_Email)) Tenant.R1_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_Email)) Tenant.R2_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_Email)) Tenant.R3_Email = string.Empty;

                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Retrieving Landlord.", EventLogEntryType.Warning);
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetAccount);
                                            if (ZM.GetAccount(Tenant.Account_Name.id, out Response))
                                            {
                                                Landlords = JsonConvert.DeserializeObject<AccountsFeedBack>(Response);
                                                if (Landlords != null)
                                                    thisLandlord = Landlords.data[0];
                                            }

                                            if (thisLandlord != null)
                                            {
                                                if (string.IsNullOrEmpty(thisLandlord.Email_1)) thisLandlord.Email_1 = string.Empty;
                                                //if (string.IsNullOrEmpty(thisLandlord.Primary_Contact)) thisLandlord.Primary_Contact = string.Empty;
                                                if (string.IsNullOrEmpty(thisLandlord.Account_Name)) thisLandlord.Account_Name = string.Empty;

                                                LLUser = thisLandlord.Email_1;
                                                //LLName = thisLandlord.Primary_Contact;
                                                LLName = thisLandlord.Account_Name;
                                                LLPwd = string.Empty;

                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Comparing Landlord Email to Tenants.", EventLogEntryType.Warning);
                                                if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                {
                                                    if ((thisLandlord.Email_1.ToLower() != Tenant.Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R1_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R2_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R3_Email.ToLower()))
                                                    {
                                                        //
                                                        // Check Landlord Email if necessary
                                                        //
                                                        if (string.IsNullOrEmpty(thisLandlord.Email_Vetted)) thisLandlord.Email_Vetted = "No";

                                                        if (thisLandlord.Email_Vetted == "No")
                                                        {
                                                            if (VP.ValidateEmail(thisLandlord.Email_1.Trim(), out EmailStatus))
                                                            {
                                                                //if (EmailStatus.emailVerification.mailboxVerification.result.ToLower() != "ok")
                                                                if (IsBadEmail(EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason))
                                                                {
                                                                    hasErrors = true;
                                                                    LandlordEmailFailedValidation = true;
                                                                    // Update the Account
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append("\"Email_Vetted\": \"Bad\",");
                                                                    cu.Append("\"Email_1\": \"\"");
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[]}");

                                                                    CountAPICall("updateaccount");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                    if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                    {
                                                                        // Failed Account Update  - Tell Somebody
                                                                        ErrorLines += " - Zoho Account Update Failed";
                                                                        EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                    }
                                                                    else
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);

                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VOR Error: Bad Landlord Email Address Detected '{0}' Validation Service Says: '{1}-{2}'", thisLandlord.Email_1, EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason));
                                                                }
                                                                else
                                                                {
                                                                    // Update the Account
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append("\"Email_Vetted\": \"Good\"");
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[]}");

                                                                    CountAPICall("updateaccount");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                    if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                    {
                                                                        // Failed Account Update  - Tell Somebody
                                                                        ErrorLines += " - Zoho Account Update Failed";
                                                                        EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                    }
                                                                    else
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                LandlordEmailFailedValidation = true;
                                                                EventLog.WriteEntry(string.Format("IL VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText), EventLogEntryType.Error);
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText.Replace("\r", "\\r").Replace("\n", "\\n")));
                                                            }
                                                        }

                                                        if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Retrieving Tenant Agreement.", EventLogEntryType.Warning);
                                                        // Find and get Tenant Agreement
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachmentList);
                                                        if (ZM.GetContactAttachmentList(Tenant.id, out Response))
                                                        {
                                                            AttachmentListFeedback attachmentlist = JsonConvert.DeserializeObject<AttachmentListFeedback>(Response);

                                                            if (attachmentlist != null)
                                                            {
                                                                if (attachmentlist.data != null)
                                                                {
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::Searching for Tenant Agreement out of {0} attachments.", attachmentlist.data.Length), EventLogEntryType.Warning);
                                                                    foreach (AttachmentItem attachment in attachmentlist.data)
                                                                    {
                                                                        if (!string.IsNullOrEmpty(attachment.File_Name))
                                                                        {
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::Looking at {0}.", attachment.File_Name), EventLogEntryType.Warning);
                                                                            if ((attachment.File_Name.ToLower() == "tenantagreement.pdf") || (attachment.File_Name.ToLower() == "tenant agreement.pdf") || (attachment.File_Name.ToLower() == "tenant registration.pdf"))
                                                                            {
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Found Tenant Agreement.", EventLogEntryType.Warning);
                                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachment);
                                                                                if (ZM.GetContactAttachment(Tenant.id, attachment.id, out AttachmentData))
                                                                                {
                                                                                    TenantAgreementPDF = AttachmentData.ToArray();
                                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Got Tenant Agreement.", EventLogEntryType.Warning);
                                                                                }
                                                                                else
                                                                                {
                                                                                    hasErrors = true;
                                                                                    ErrorLines += "Tenant Agreement found but was unable to download it.";
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    if (!hasErrors)
                                                                    {
                                                                        if (TenantAgreementPDF != null)
                                                                        {
                                                                            if (TenantAgreementPDF.Length <= 0)
                                                                            {
                                                                                hasErrors = true;
                                                                                NoTenantAgreement = true;
                                                                                ErrorLines += "Tenant Agreement was not found.";
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            hasErrors = true;
                                                                            NoTenantAgreement = true;
                                                                            ErrorLines += "Tenant Agreement was not found.";
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    hasErrors = true;
                                                                    NoTenantAgreement = true;
                                                                    ErrorLines += "Tenant has no attachments.";
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL VOR Processing::Tenant has no attachments.", EventLogEntryType.Error);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                hasErrors = true;
                                                                NoTenantAgreement = true;
                                                                ErrorLines += "Unable to obtain a list of attachments.";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            hasErrors = true;
                                                            NoTenantAgreement = true;
                                                            ErrorLines += "Unable to obtain a list of attachments.";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // error - Landlord email is one of the tenants
                                                        hasErrors = true;
                                                        LandlordEmailFailedValidation = true;
                                                        ErrorLines += "Tenant / Roommates email and the Landlord email are the same.";
                                                    }
                                                }
                                                else
                                                {
                                                    // error - blank email
                                                    hasErrors = true;
                                                    LandlordEmailFailedValidation = true;
                                                    ErrorLines += "There is not valid Landlord email.";
                                                }
                                            }
                                            else
                                            {
                                                // error - can't get account
                                                hasErrors = true;
                                                ErrorLines += "Service was unable to retrieve the Landlord Record.";
                                            }

                                            if (hasErrors)
                                            {
                                                // Update the Contact
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                if (firstItem)
                                                {
                                                    firstItem = false;
                                                    cu.Append("\"VOR_Resend\": \"No\"");
                                                }
                                                else
                                                    cu.Append(",\"VOR_Resend\": \"No\"");

                                                if (!LandlordEmailFailedValidation)
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_1\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_1\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                    {
                                                        if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_2\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_2\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                    {
                                                        if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                {
                                                                    cu.Append("\"Missing_Doc_3\": \"\"");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_3\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                    {
                                                        if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_4\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_4\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                    {
                                                        if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_5\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_5\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                    {
                                                        if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_6\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_6\": \"\"");
                                                            }
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if (Tenant.L_Missing_Doc_1.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_1\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if (Tenant.L_Missing_Doc_2.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_2\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if (Tenant.L_Missing_Doc_3.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_3\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if (Tenant.L_Missing_Doc_4.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_4\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if (Tenant.L_Missing_Doc_5.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if (Tenant.L_Missing_Doc_6.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if ((Tenant.Missing_Doc_1.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_2.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_3.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_4.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_5.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_6.ToLower() != "landlord email address"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_2\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_2\": \"Landlord Email Address\"");

                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                {
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"Missing_Doc_3\": \"Landlord Email Address\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_3\": \"Landlord Email Address\"");

                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                    {
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                        {
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                            {
                                                                                if (firstItem)
                                                                                {
                                                                                    firstItem = false;
                                                                                    cu.Append("\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                                                }
                                                                                else
                                                                                    cu.Append(",\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if ((Tenant.L_Missing_Doc_1.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_2.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_3.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_4.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_5.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_6.ToLower() != "email address"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_1\": \"Email Address\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_1\": \"Email Address\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_2\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_2\": \"Email Address\"");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                                {
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"L_Missing_Doc_3\": \"Email Address\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"L_Missing_Doc_3\": \"Email Address\"");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                                    {
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"L_Missing_Doc_4\": \"Email Address\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"L_Missing_Doc_4\": \"Email Address\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                                        {
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"L_Missing_Doc_5\": \"Email Address\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"L_Missing_Doc_5\": \"Email Address\"");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                                            {
                                                                                if (firstItem)
                                                                                {
                                                                                    firstItem = false;
                                                                                    cu.Append("\"L_Missing_Doc_6\": \"Email Address\"");
                                                                                }
                                                                                else
                                                                                    cu.Append(",\"L_Missing_Doc_6\": \"Email Address\"");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("VORs::Sending Bad Landlord Error Email", EventLogEntryType.Error);
                                                    // send Error Email
                                                    if (!Tenant.Email_Opt_Out)
                                                    {
                                                        string tempEmail = "No Email Given";
                                                        EmailProvider EP = new EmailProvider();
                                                        if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                            tempEmail = thisLandlord.Email_1;

                                                        if (!EP.SendBadLandlordEmail("andy@creditrentboost.com", Tenant, tempEmail))
                                                        {
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::Failed trying to send Landlord Email Validation Error Email::{0}", EP.ErrorData), EventLogEntryType.Error);
                                                        }
                                                        EP = null;
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                {
                                                    if (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_1 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_1\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                {
                                                    if (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_2 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_2\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                {
                                                    if (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_3 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_3\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                {
                                                    if (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_4 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_4\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                {
                                                    if (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_5 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                {
                                                    if (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_6 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                    }
                                                }
                                                if (NoTenantAgreement)
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                        }
                                                        else
                                                            cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                    }
                                                    else
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                        {
                                                            Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                            {
                                                                Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                {
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                    {
                                                                        Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                        {
                                                                            Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                // ceppp8
                                                if ((Tenant.Contact_Status.ToLower() == "01a. vetting assigned") || (Tenant.Contact_Status.ToLower() == "01b. vor sent"))
                                                {
                                                    if (firstItem)
                                                    {
                                                        cu.Append("\"Contact_Status\": \"01. Signed Up\""); //cu.Append("\"Contact_Status\": \"01c. VOR Error\"");
                                                        firstItem = false;
                                                    }
                                                    else
                                                        cu.Append(",\"Contact_Status\": \"01. Signed Up\""); //cu.Append(",\"Contact_Status\": \"01c. VOR Error\"");
                                                }
                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[\"workflow\"]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    // Failed Contact Update  - Tell Somebody
                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                }
                                                else
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VOR Processing::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                ZM.AddToContactNotes(Tenant.id, "Verification Of Rent", ErrorLines);
                                            }
                                            else
                                            {
                                                if (string.IsNullOrEmpty(Tenant.Landlord_Vetting)) Tenant.Landlord_Vetting = "done";
                                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::Getting Email Template for {0}.", Tenant.Landlord_Vetting), EventLogEntryType.Warning);
                                                string EmailTemplate = string.Empty;

                                                using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                                {
                                                    dbc.Open();
                                                    using (MySqlCommand dbcc = new MySqlCommand(string.Format("SELECT emailtemplate FROM crbdb.mt_landlordemailtemplates WHERE LOWER(vettingvalue) = '{0}';", Tenant.Landlord_Vetting.ToLower()), dbc))
                                                    {
                                                        dbcc.CommandType = CommandType.Text;
                                                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                        {
                                                            if (dbr.HasRows)
                                                            {
                                                                if (dbr.Read())
                                                                {
                                                                    EmailTemplate = dbr.GetString(0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(EmailTemplate))
                                                {
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::Using Email Template {0}.", EmailTemplate), EventLogEntryType.Warning);
                                                    // Update the Contact
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");

                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;

                                                    if ((Tenant.Missing_Doc_1.ToLower() != "verification of rent (requested from landlord)") &&
                                                       (Tenant.Missing_Doc_2.ToLower() != "verification of rent (requested from landlord)") &&
                                                       (Tenant.Missing_Doc_3.ToLower() != "verification of rent (requested from landlord)") &&
                                                       (Tenant.Missing_Doc_4.ToLower() != "verification of rent (requested from landlord)") &&
                                                       (Tenant.Missing_Doc_5.ToLower() != "verification of rent (requested from landlord)") &&
                                                       (Tenant.Missing_Doc_6.ToLower() != "verification of rent (requested from landlord)"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                            cu.Append("\"Missing_Doc_1\": \"Verification of Rent (Requested from Landlord)\",");
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                cu.Append("\"Missing_Doc_2\": \"Verification of Rent (Requested from Landlord)\",");
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                    cu.Append("\"Missing_Doc_3\": \"Verification of Rent (Requested from Landlord)\",");
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                        cu.Append("\"Missing_Doc_4\": \"Verification of Rent (Requested from Landlord)\",");
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                            cu.Append("\"Missing_Doc_5\": \"Verification of Rent (Requested from Landlord)\",");
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                cu.Append("\"Missing_Doc_6\": \"Verification of Rent (Requested from Landlord)\",");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                                    if ((Tenant.L_Missing_Doc_1.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_2.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_3.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_4.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_5.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_6.ToLower() != "vor form (sent - not received)"))
                                                    {
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            if (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_1\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                        {
                                                            if (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_2\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                        {
                                                            if (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_3\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                        {
                                                            if (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_4\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                        {
                                                            if (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_5\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                        {
                                                            if (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet") cu.Append("\"L_Missing_Doc_6\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                    }

                                                    if ((Tenant.L_Missing_Doc_1.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_2.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_3.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_4.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_5.ToLower() != "vor form (sent - not received)") &&
                                                       (Tenant.L_Missing_Doc_6.ToLower() != "vor form (sent - not received)"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            cu.Append("\"L_Missing_Doc_1\": \"VOR Form (Sent - not Received)\",");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                cu.Append("\"L_Missing_Doc_2\": \"VOR Form (Sent - not Received)\",");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                                {
                                                                    cu.Append("\"L_Missing_Doc_3\": \"VOR Form (Sent - not Received)\",");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                                    {
                                                                        cu.Append("\"L_Missing_Doc_4\": \"VOR Form (Sent - not Received)\",");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                                        {
                                                                            cu.Append("\"L_Missing_Doc_5\": \"VOR Form (Sent - not Received)\",");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                                            {
                                                                                cu.Append("\"L_Missing_Doc_6\": \"VOR Form (Sent - not Received)\",");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (LandlordEmailFailedValidation)
                                                    {
                                                        cu.Append("\"Tech_Error\": \"Yes\",");
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_1\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                    {
                                                        if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_2\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                    {
                                                        if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_3\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                    {
                                                        if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_4\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                    {
                                                        if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_5\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                    {
                                                        if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)")) cu.Append("\"Missing_Doc_6\": \"\",");
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if (Tenant.L_Missing_Doc_1.ToLower() == "email address") cu.Append("\"L_Missing_Doc_1\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if (Tenant.L_Missing_Doc_2.ToLower() == "email address") cu.Append("\"L_Missing_Doc_2\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if (Tenant.L_Missing_Doc_3.ToLower() == "email address") cu.Append("\"L_Missing_Doc_3\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if (Tenant.L_Missing_Doc_4.ToLower() == "email address") cu.Append("\"L_Missing_Doc_4\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if (Tenant.L_Missing_Doc_5.ToLower() == "email address") cu.Append("\"L_Missing_Doc_5\": \"\",");
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if (Tenant.L_Missing_Doc_6.ToLower() == "email address") cu.Append("\"L_Missing_Doc_6\": \"\",");
                                                    }

                                                    cu.Append("\"VOR_Resend\": \"Sent\",");
                                                    cu.Append(string.Format("\"VOR_Req_Date\": {0:yyyy-MM-dd}", DateTime.Now));
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");  //cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL VORs::Updating ZOHO Contact.", EventLogEntryType.Warning);
                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        // Failed Contact Update  - Tell Somebody
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                    }
                                                    else
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL VORs::Sending Email.", EventLogEntryType.Warning);
                                                    EmailProvider EP = new EmailProvider();
                                                    string URLLink = "https://www.creditrentboost.com/enrollment/RentVerification.aspx?os=tenant&oi=" + Tenant.id;
                                                    FileData Attachment = new FileData();
                                                    Attachment.FieldSource = "file";
                                                    Attachment.FileName = "TenantAgreement.pdf";
                                                    Attachment.FileType = "application/pdf";
                                                    Attachment.FileContents = TenantAgreementPDF;

                                                    // Xcp 2
                                                    EnsureLandlordInvite(Tenant.Account_Name.id, ZM, LLName, ref LLUser, ref LLPwd);

                                                    //EP.SendVerificationOfRent(thisLandlord.Email_1, "andy@creditrentboost.com", URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment);
                                                    //EP.SendVerificationOfRent(thisLandlord.Email_1, string.Empty, URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment);
                                                    EP.SendVerificationOfRentEx(thisLandlord.Email_1, "andy@creditrentboost.com", URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                    /////EP.SendVerificationOfRentCanned(thisLandlord.Email_1, "andy@creditrentboost.com", URLLink, Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                    EP = null;
                                                } // emailtemplate == string.empty
                                            } // if haserror
                                        } // foreach

                                        if (Tenants.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                    EOF = true;
                                }

                            } //while !EOF

                        }
                        catch (Exception ce)
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process Idiots Added Logic VORs Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                        }
                        #endregion

                        #region Idiot Pass 2
                        EOF = false;
                        Page = 1;

                        try
                        {
                            while (!EOF)
                            {
                                CountAPICall("searchcontact");
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                                if (ZM.SearchContacts("(Canned_VOR_Resend:equals:Yes)", Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        EventLog.WriteEntry(ce.Message);
                                        Tenants = null;
                                    }

                                    if (Tenants != null)
                                    {
                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                        foreach (Contact Tenant in Tenants.data)
                                        {
                                            ErrorLines = string.Empty;
                                            bool hasErrors = false;
                                            bool NoTenantAgreement = false;
                                            string Response = string.Empty;
                                            MemoryStream AttachmentData = null;
                                            byte[] TenantAgreementPDF = null;
                                            AccountsFeedBack Landlords = null;
                                            Account thisLandlord = null;
                                            bool firstItem = true;
                                            bool LandlordEmailFailedValidation = false;

                                            if (string.IsNullOrEmpty(Tenant.VOR_Needed)) Tenant.VOR_Needed = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Email)) Tenant.Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R1_Email)) Tenant.R1_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_Email)) Tenant.R2_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_Email)) Tenant.R3_Email = string.Empty;

                                            if (string.IsNullOrEmpty(Tenant.R1_First_Name)) Tenant.R1_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R1_Last_Name)) Tenant.R1_Last_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_First_Name)) Tenant.R2_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_Last_Name)) Tenant.R2_Last_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_First_Name)) Tenant.R3_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_Last_Name)) Tenant.R3_Last_Name = string.Empty;

                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Retrieving Landlord.", EventLogEntryType.Warning);
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetAccount);
                                            if (ZM.GetAccount(Tenant.Account_Name.id, out Response))
                                            {
                                                Landlords = JsonConvert.DeserializeObject<AccountsFeedBack>(Response);
                                                if (Landlords != null)
                                                    thisLandlord = Landlords.data[0];
                                            }

                                            if (thisLandlord != null)
                                            {
                                                if (string.IsNullOrEmpty(thisLandlord.Email_1)) thisLandlord.Email_1 = string.Empty;
                                                //if (string.IsNullOrEmpty(thisLandlord.Primary_Contact)) thisLandlord.Primary_Contact = string.Empty;
                                                if (string.IsNullOrEmpty(thisLandlord.Account_Name)) thisLandlord.Account_Name = string.Empty;

                                                LLUser = thisLandlord.Email_1;
                                                //LLName = thisLandlord.Primary_Contact;
                                                LLName = thisLandlord.Account_Name;
                                                LLPwd = string.Empty;

                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Comparing Landlord Email to Tenants.", EventLogEntryType.Warning);
                                                if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                {
                                                    if ((thisLandlord.Email_1.ToLower() != Tenant.Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R1_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R2_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R3_Email.ToLower()))
                                                    {
                                                        //
                                                        // Check Landlord Email if necessary
                                                        //
                                                        if (string.IsNullOrEmpty(thisLandlord.Email_Vetted)) thisLandlord.Email_Vetted = "No";

                                                        if (thisLandlord.Email_Vetted == "No")
                                                        {
                                                            if (VP.ValidateEmail(thisLandlord.Email_1.Trim(), out EmailStatus))
                                                            {
                                                                //if (EmailStatus.emailVerification.mailboxVerification.result.ToLower() != "ok")
                                                                if (IsBadEmail(EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason))
                                                                {
                                                                    hasErrors = true;
                                                                    LandlordEmailFailedValidation = true;
                                                                    // Update the Account
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append("\"Email_Vetted\": \"Bad\",");
                                                                    cu.Append("\"Email_1\": \"\"");
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[]}");

                                                                    CountAPICall("updateaccount");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                    if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                    {
                                                                        // Failed Account Update  - Tell Somebody
                                                                        ErrorLines += " - Zoho Account Update Failed";
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                    }
                                                                    else
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);

                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VOR Error: Bad Landlord Email Address Detected '{0}' Validation Service Says: '{1}-{2}'", thisLandlord.Email_1, EmailStatus.emailVerification.mailboxVerification.result, EmailStatus.emailVerification.mailboxVerification.reason));
                                                                }
                                                                else
                                                                {
                                                                    // Update the Account
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append("\"Email_Vetted\": \"Good\"");
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[]}");

                                                                    CountAPICall("updateaccount");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateAccount);
                                                                    if (!ZM.UpdateAccount(thisLandlord.id, cu.ToString()))
                                                                    {
                                                                        // Failed Account Update  - Tell Somebody
                                                                        ErrorLines += " - Zoho Account Update Failed";
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Account Email Vetting Update Failed. Reason = {1} \r\n\r\n {2}", thisLandlord.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                    }
                                                                    else
                                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Account Email Vetting Updated.", thisLandlord.id), EventLogEntryType.Warning);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                LandlordEmailFailedValidation = true;
                                                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText), EventLogEntryType.Error);
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Verification of Rent", string.Format("VORs Landlord Email Validation API Errored:: {0}.", VP.DebugText.Replace("\r", "\\r").Replace("\n", "\\n")));
                                                            }
                                                        }

                                                        if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Retrieving Tenant Agreement.", EventLogEntryType.Warning);
                                                        // Find and get Tenant Agreement
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachmentList);
                                                        if (ZM.GetContactAttachmentList(Tenant.id, out Response))
                                                        {
                                                            AttachmentListFeedback attachmentlist = JsonConvert.DeserializeObject<AttachmentListFeedback>(Response);

                                                            if (attachmentlist != null)
                                                            {
                                                                if (attachmentlist.data != null)
                                                                {
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::Searching for Tenant Agreement out of {0} attachments.", attachmentlist.data.Length), EventLogEntryType.Warning);
                                                                    foreach (AttachmentItem attachment in attachmentlist.data)
                                                                    {
                                                                        if (!string.IsNullOrEmpty(attachment.File_Name))
                                                                        {
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::Looking at {0}.", attachment.File_Name), EventLogEntryType.Warning);
                                                                            if ((attachment.File_Name.ToLower() == "tenantagreement.pdf") || (attachment.File_Name.ToLower() == "tenant agreement.pdf") || (attachment.File_Name.ToLower() == "tenant registration.pdf"))
                                                                            {
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Found Tenant Agreement.", EventLogEntryType.Warning);
                                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachment);
                                                                                if (ZM.GetContactAttachment(Tenant.id, attachment.id, out AttachmentData))
                                                                                {
                                                                                    TenantAgreementPDF = AttachmentData.ToArray();
                                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Got Tenant Agreement.", EventLogEntryType.Warning);
                                                                                }
                                                                                else
                                                                                {
                                                                                    hasErrors = true;
                                                                                    ErrorLines += "Tenant Agreement found but was unable to download it.";
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    if (!hasErrors)
                                                                    {
                                                                        if (TenantAgreementPDF != null)
                                                                        {
                                                                            if (TenantAgreementPDF.Length <= 0)
                                                                            {
                                                                                hasErrors = true;
                                                                                NoTenantAgreement = true;
                                                                                ErrorLines += "Tenant Agreement was not found.";
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            hasErrors = true;
                                                                            NoTenantAgreement = true;
                                                                            ErrorLines += "Tenant Agreement was not found.";
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    hasErrors = true;
                                                                    NoTenantAgreement = true;
                                                                    ErrorLines += "Tenant has no attachments.";
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VOR Processing::Tenant has no attachments.", EventLogEntryType.Error);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                hasErrors = true;
                                                                NoTenantAgreement = true;
                                                                ErrorLines += "Unable to obtain a list of attachments.";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            hasErrors = true;
                                                            NoTenantAgreement = true;
                                                            ErrorLines += "Unable to obtain a list of attachments.";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // error - Landlord email is one of the tenants
                                                        hasErrors = true;
                                                        LandlordEmailFailedValidation = true;
                                                        ErrorLines += "Tenant / Roommates email and the Landlord email are the same.";
                                                    }
                                                }
                                                else
                                                {
                                                    // error - blank email
                                                    hasErrors = true;
                                                    LandlordEmailFailedValidation = true;
                                                    ErrorLines += "There is not valid Landlord email.";
                                                }
                                            }
                                            else
                                            {
                                                // error - can't get account
                                                hasErrors = true;
                                                ErrorLines += "Service was unable to retrieve the Landlord Record.";
                                            }

                                            if (hasErrors)
                                            {
                                                // Update the Contact
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                if (firstItem)
                                                {
                                                    firstItem = false;
                                                    cu.Append("\"Canned_VOR_Resend\": \"No\"");
                                                }
                                                else
                                                    cu.Append(",\"Canned_VOR_Resend\": \"No\"");

                                                if (!LandlordEmailFailedValidation)
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_1\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_1\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                    {
                                                        if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_2\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_2\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                    {
                                                        if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                {
                                                                    cu.Append("\"Missing_Doc_3\": \"\"");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false; 
                                                                    Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_3\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                    {
                                                        if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_4\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_4\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                    {
                                                        if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_5\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_5\": \"\"");
                                                            }
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                    {
                                                        if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                    cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append("\"Missing_Doc_6\": \"\"");
                                                            }
                                                            else
                                                            {
                                                                if (NoTenantAgreement)
                                                                {
                                                                    NoTenantAgreement = false;
                                                                    Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                    cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_6\": \"\"");
                                                            }
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if (Tenant.L_Missing_Doc_1.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_1\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if (Tenant.L_Missing_Doc_2.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_2\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if (Tenant.L_Missing_Doc_3.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_3\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if (Tenant.L_Missing_Doc_4.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_4\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if (Tenant.L_Missing_Doc_5.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if (Tenant.L_Missing_Doc_6.ToLower() == "email address")
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = true;
                                                                cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if ((Tenant.Missing_Doc_1.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_2.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_3.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_4.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_5.ToLower() != "landlord email address") &&
                                                       (Tenant.Missing_Doc_6.ToLower() != "landlord email address"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                        {
                                                            Tenant.Missing_Doc_1 = "Landlord Email Address";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_1\": \"Landlord Email Address\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                            {
                                                                Tenant.Missing_Doc_2 = "Landlord Email Address";
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_2\": \"Landlord Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_2\": \"Landlord Email Address\"");

                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                {
                                                                    Tenant.Missing_Doc_3 = "Landlord Email Address";
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"Missing_Doc_3\": \"Landlord Email Address\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_3\": \"Landlord Email Address\"");

                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                    {
                                                                        Tenant.Missing_Doc_4 = "Landlord Email Address";
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"Missing_Doc_4\": \"Landlord Email Address\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                        {
                                                                            Tenant.Missing_Doc_5 = "Landlord Email Address";
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"Missing_Doc_5\": \"Landlord Email Address\"");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                            {
                                                                                Tenant.Missing_Doc_6 = "Landlord Email Address";
                                                                                if (firstItem)
                                                                                {
                                                                                    firstItem = false;
                                                                                    cu.Append("\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                                                }
                                                                                else
                                                                                    cu.Append(",\"Missing_Doc_6\": \"Landlord Email Address\"");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if ((Tenant.L_Missing_Doc_1.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_2.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_3.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_4.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_5.ToLower() != "email address") &&
                                                       (Tenant.L_Missing_Doc_6.ToLower() != "email address"))
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                        {
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"L_Missing_Doc_1\": \"Email Address\"");
                                                            }
                                                            else
                                                                cu.Append(",\"L_Missing_Doc_1\": \"Email Address\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                            {
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"L_Missing_Doc_2\": \"Email Address\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"L_Missing_Doc_2\": \"Email Address\"");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                                {
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"L_Missing_Doc_3\": \"Email Address\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"L_Missing_Doc_3\": \"Email Address\"");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                                    {
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"L_Missing_Doc_4\": \"Email Address\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"L_Missing_Doc_4\": \"Email Address\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                                        {
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"L_Missing_Doc_5\": \"Email Address\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"L_Missing_Doc_5\": \"Email Address\"");
                                                                        }
                                                                        else
                                                                        {
                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                                            {
                                                                                if (firstItem)
                                                                                {
                                                                                    firstItem = false;
                                                                                    cu.Append("\"L_Missing_Doc_6\": \"Email Address\"");
                                                                                }
                                                                                else
                                                                                    cu.Append(",\"L_Missing_Doc_6\": \"Email Address\"");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("VORs::Sending Bad Landlord Error Email", EventLogEntryType.Error);
                                                    // send Error Email
                                                    if (!Tenant.Email_Opt_Out)
                                                    {
                                                        string tempEmail = "No Email Given";
                                                        EmailProvider EP = new EmailProvider();
                                                        if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                            tempEmail = thisLandlord.Email_1;

                                                        if (!EP.SendBadLandlordEmail("andy@creditrentboost.com", Tenant, tempEmail))
                                                        {
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL VORs::Failed trying to send Landlord Email Validation Error Email::{0}", EP.ErrorData), EventLogEntryType.Error);
                                                        }
                                                        EP = null;
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                {
                                                    if (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_1 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_1\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_1\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                {
                                                    if (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_2 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_2\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_2\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                {
                                                    if (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_3 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_3\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_3\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                {
                                                    if (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_4 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_4\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_4\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                {
                                                    if (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_5 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_5\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_5\": \"\"");
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                {
                                                    if (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet")
                                                    {
                                                        Tenant.L_Missing_Doc_6 = string.Empty;
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"L_Missing_Doc_6\": \"\"");
                                                        }
                                                        else
                                                            cu.Append(",\"L_Missing_Doc_6\": \"\"");
                                                    }
                                                }

                                                if (NoTenantAgreement)
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        Tenant.Missing_Doc_1 = "Tenant Agreement";
                                                        if (firstItem)
                                                        {
                                                            firstItem = false;
                                                            cu.Append("\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                        }
                                                        else
                                                            cu.Append(",\"Missing_Doc_1\": \"Tenant Agreement\"");
                                                    }
                                                    else
                                                    {
                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                        {
                                                            Tenant.Missing_Doc_2 = "Tenant Agreement";
                                                            if (firstItem)
                                                            {
                                                                firstItem = false;
                                                                cu.Append("\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                                cu.Append(",\"Missing_Doc_2\": \"Tenant Agreement\"");
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                            {
                                                                Tenant.Missing_Doc_3 = "Tenant Agreement";
                                                                if (firstItem)
                                                                {
                                                                    firstItem = false;
                                                                    cu.Append("\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                    cu.Append(",\"Missing_Doc_3\": \"Tenant Agreement\"");
                                                            }
                                                            else
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                {
                                                                    Tenant.Missing_Doc_4 = "Tenant Agreement";
                                                                    if (firstItem)
                                                                    {
                                                                        firstItem = false;
                                                                        cu.Append("\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                        cu.Append(",\"Missing_Doc_4\": \"Tenant Agreement\"");
                                                                }
                                                                else
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                    {
                                                                        Tenant.Missing_Doc_5 = "Tenant Agreement";
                                                                        if (firstItem)
                                                                        {
                                                                            firstItem = false;
                                                                            cu.Append("\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                        }
                                                                        else
                                                                            cu.Append(",\"Missing_Doc_5\": \"Tenant Agreement\"");
                                                                    }
                                                                    else
                                                                    {
                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                        {
                                                                            Tenant.Missing_Doc_6 = "Tenant Agreement";
                                                                            if (firstItem)
                                                                            {
                                                                                firstItem = false;
                                                                                cu.Append("\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                            }
                                                                            else
                                                                                cu.Append(",\"Missing_Doc_6\": \"Tenant Agreement\"");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                // ceppp8
                                                if ((Tenant.Contact_Status.ToLower() == "01a. vetting assigned") || (Tenant.Contact_Status.ToLower() == "01b. vor sent"))
                                                {
                                                    if (firstItem)
                                                    {
                                                        cu.Append("\"Contact_Status\": \"01. Signed Up\""); //cu.Append("\"Contact_Status\": \"01c. VOR Error\"");
                                                        firstItem = false;
                                                    }
                                                    else
                                                        cu.Append(",\"Contact_Status\": \"01. Signed Up\""); //cu.Append(",\"Contact_Status\": \"01c. VOR Error\"");
                                                }
                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[\"workflow\"]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    // Failed Contact Update  - Tell Somebody
                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                }
                                                else
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VOR Processing::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                ZM.AddToContactNotes(Tenant.id, "Verification Of Rent", ErrorLines);
                                            }
                                            else
                                            {
                                                if (string.IsNullOrEmpty(Tenant.Landlord_Vetting)) Tenant.Landlord_Vetting = "done";
                                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs::Getting Email Template for {0}.", Tenant.Landlord_Vetting), EventLogEntryType.Warning);
                                                string EmailTemplate = string.Empty;

                                                using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                                {
                                                    dbc.Open();
                                                    using (MySqlCommand dbcc = new MySqlCommand(string.Format("SELECT emailtemplate FROM crbdb.mt_landlordemailtemplates WHERE LOWER(vettingvalue) = '{0}';", Tenant.Landlord_Vetting.ToLower()), dbc))
                                                    {
                                                        dbcc.CommandType = CommandType.Text;
                                                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                        {
                                                            if (dbr.HasRows)
                                                            {
                                                                if (dbr.Read())
                                                                {
                                                                    EmailTemplate = dbr.GetString(0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(EmailTemplate))
                                                {
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs::Using Email Template {0}.", EmailTemplate), EventLogEntryType.Warning);

                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;

                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                                    // Update the Contact
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");

                                                    if (LandlordEmailFailedValidation)
                                                    {
                                                        cu.Append("\"Tech_Error\": \"Yes\",");
                                                    }

                                                    cu.Append("\"VOR_Needed\": \"VOR Completed\",");

                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() == "verification of rent") || (Tenant.Missing_Doc_1.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_1.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_1.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_1 = string.Empty;
                                                            cu.Append("\"Missing_Doc_1\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                    {
                                                        if ((Tenant.Missing_Doc_2.ToLower() == "verification of rent") || (Tenant.Missing_Doc_2.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_2.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_2.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_2 = string.Empty;
                                                            cu.Append("\"Missing_Doc_2\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                    {
                                                        if ((Tenant.Missing_Doc_3.ToLower() == "verification of rent") || (Tenant.Missing_Doc_3.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_3.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_3.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_3 = string.Empty;
                                                            cu.Append("\"Missing_Doc_3\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                    {
                                                        if ((Tenant.Missing_Doc_4.ToLower() == "verification of rent") || (Tenant.Missing_Doc_4.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_4.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_4.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_4 = string.Empty;
                                                            cu.Append("\"Missing_Doc_4\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                    {
                                                        if ((Tenant.Missing_Doc_5.ToLower() == "verification of rent") || (Tenant.Missing_Doc_5.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_5.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_5.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_5 = string.Empty;
                                                            cu.Append("\"Missing_Doc_5\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                    {
                                                        if ((Tenant.Missing_Doc_6.ToLower() == "verification of rent") || (Tenant.Missing_Doc_6.ToLower() == "verification of rent (requested from landlord)") || (Tenant.Missing_Doc_6.ToLower() == "lease agreement - current") || (Tenant.Missing_Doc_6.ToLower() == "lease agreement - past"))
                                                        {
                                                            Tenant.Missing_Doc_6 = string.Empty;
                                                            cu.Append("\"Missing_Doc_6\": \"\",");
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_1.ToLower() == "vor form (sent - not received)"))
                                                        {
                                                            Tenant.L_Missing_Doc_1 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_1\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_2.ToLower() == "vor form (sent - not received)"))
                                                        {
                                                            Tenant.L_Missing_Doc_2 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_2\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_3.ToLower() == "vor form (sent - not received)")) 
                                                        {
                                                            Tenant.L_Missing_Doc_3 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_3\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_4.ToLower() == "vor form (sent - not received)")) 
                                                        {
                                                            Tenant.L_Missing_Doc_4 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_4\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_5.ToLower() == "vor form (sent - not received)"))
                                                        {
                                                            Tenant.L_Missing_Doc_5 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_5\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if ((Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet") || (Tenant.L_Missing_Doc_6.ToLower() == "vor form (sent - not received)"))
                                                        {
                                                            Tenant.L_Missing_Doc_6 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_6\": \"\",");
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                    {
                                                        if ((Tenant.Missing_Doc_1.ToLower() == "landlord email address") || (Tenant.Missing_Doc_1.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_1 = string.Empty;
                                                            cu.Append("\"Missing_Doc_1\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                    {
                                                        if ((Tenant.Missing_Doc_2.ToLower() == "landlord email address") || (Tenant.Missing_Doc_2.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_2 = string.Empty;
                                                            cu.Append("\"Missing_Doc_2\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                    {
                                                        if ((Tenant.Missing_Doc_3.ToLower() == "landlord email address") || (Tenant.Missing_Doc_3.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_3 = string.Empty;
                                                            cu.Append("\"Missing_Doc_3\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                    {
                                                        if ((Tenant.Missing_Doc_4.ToLower() == "landlord email address") || (Tenant.Missing_Doc_4.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_4 = string.Empty;
                                                            cu.Append("\"Missing_Doc_4\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                    {
                                                        if ((Tenant.Missing_Doc_5.ToLower() == "landlord email address") || (Tenant.Missing_Doc_5.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_5 = string.Empty;
                                                            cu.Append("\"Missing_Doc_5\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                    {
                                                        if ((Tenant.Missing_Doc_6.ToLower() == "landlord email address") || (Tenant.Missing_Doc_6.ToLower() == "landlord email address (requested from landlord)"))
                                                        {
                                                            Tenant.Missing_Doc_6 = string.Empty;
                                                            cu.Append("\"Missing_Doc_6\": \"\",");
                                                        }
                                                    }

                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                    {
                                                        if (Tenant.L_Missing_Doc_1.ToLower() == "email address")
                                                        {
                                                            Tenant.L_Missing_Doc_1 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_1\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                    {
                                                        if (Tenant.L_Missing_Doc_2.ToLower() == "email address") 
                                                        {
                                                            Tenant.L_Missing_Doc_2 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_2\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                    {
                                                        if (Tenant.L_Missing_Doc_3.ToLower() == "email address") 
                                                        {
                                                            Tenant.L_Missing_Doc_3 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_3\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                    {
                                                        if (Tenant.L_Missing_Doc_4.ToLower() == "email address") 
                                                        {
                                                            Tenant.L_Missing_Doc_4 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_4\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                    {
                                                        if (Tenant.L_Missing_Doc_5.ToLower() == "email address")
                                                        {
                                                            Tenant.L_Missing_Doc_5 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_5\": \"\",");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                    {
                                                        if (Tenant.L_Missing_Doc_6.ToLower() == "email address")
                                                        {
                                                            Tenant.L_Missing_Doc_6 = string.Empty;
                                                            cu.Append("\"L_Missing_Doc_6\": \"\",");
                                                        }
                                                    }

                                                    if ((string.IsNullOrEmpty(Tenant.Missing_Doc_1)) &&
                                                        (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) &&
                                                        (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) &&
                                                        (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) &&
                                                        (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) &&
                                                        (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) &&
                                                        (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)))
                                                    {
                                                        switch (Tenant.Contact_Status.ToLower())
                                                        {
                                                            case "01. signed up":
                                                            case "01a. vetting assigned":
                                                            case "01b. vor sent":
                                                            case "01c. vor error":
                                                            case "02. welcome  email":
                                                            case "03. vetting - tenant & landlord":
                                                            case "04. tu fields":
                                                            case "04. tu error":
                                                            case "04a. compliance review":
                                                            case "04b. compliance error":
                                                            case "05.  idm":
                                                                cu.Append("\"Contact_Status\": \"04. TU Fields\",");
                                                                break;
                                                            case "06. final review (land)":
                                                            case "06a. final review (tenant)":
                                                            case "06b. final review (lrg pmc)":
                                                            case "07b. file rejected":
                                                            case "08. reporting":
                                                                break;
                                                            case "09. inactive":
                                                            case "10. cancelled":
                                                                cu.Append("\"Contact_Status\": \"04. TU Fields\",");
                                                                break;
                                                        }

                                                        cu.Append("\"Start_Date\": \"\",");
                                                        cu.Append("\"Last_Touch\": \"\",");
                                                        cu.Append("\"Last_Touch_Landlord\": \"\",");
                                                    }
                                                    else
                                                    {
                                                        switch (Tenant.Contact_Status.ToLower())
                                                        {
                                                            case "01. signed up":
                                                            case "01a. vetting assigned":
                                                            case "01b. vor sent":
                                                                cu.Append("\"Contact_Status\": \"02. Welcome  Email\",");
                                                                break;
                                                            case "01c. vor error":
                                                            case "02. welcome  email":
                                                            case "03. vetting - tenant & landlord":
                                                            case "04. tu fields":
                                                            case "04. tu error":
                                                            case "04a. compliance review":
                                                            case "04b. compliance error":
                                                            case "05.  idm":
                                                                cu.Append("\"Contact_Status\": \"03. Vetting - Tenant & Landlord\",");
                                                                break;
                                                            case "06. final review (land)":
                                                            case "06a. final review (tenant)":
                                                            case "06b. final review (lrg pmc)":
                                                            case "07b. file rejected":
                                                            case "08. reporting":
                                                                break;
                                                            case "09. inactive":
                                                            case "10. cancelled":
                                                                cu.Append("\"Contact_Status\": \"03. Vetting - Tenant & Landlord\",");
                                                                break;
                                                        }

                                                        if (string.IsNullOrEmpty(Tenant.Start_Date))
                                                            cu.Append(string.Format("\"Start_Date\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
                                                        cu.Append(string.Format("\"Last_Touch\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
                                                        cu.Append(string.Format("\"Last_Touch_Landlord\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
                                                    }

                                                    cu.Append("\"Canned_VOR_Resend\": \"Sent\",");
                                                    cu.Append(string.Format("\"VOR_Req_Date\": {0:yyyy-MM-dd}", DateTime.Now));
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VORs::Updating ZOHO Contact.", EventLogEntryType.Warning);
                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        // Failed Contact Update  - Tell Somebody
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                    }
                                                    else
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL2 VORs::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL2 VORs::Sending Email.", EventLogEntryType.Warning);
                                                    EmailProvider EP = new EmailProvider();
                                                    FileData Attachment = new FileData();
                                                    Attachment.FieldSource = "file";
                                                    Attachment.FileName = "TenantAgreement.pdf";
                                                    Attachment.FileType = "application/pdf";
                                                    Attachment.FileContents = TenantAgreementPDF;

                                                    string R1Name = Tenant.R1_First_Name + " " + Tenant.R1_Last_Name;
                                                    string R2Name = Tenant.R2_First_Name + " " + Tenant.R2_Last_Name;
                                                    string R3Name = Tenant.R3_First_Name + " " + Tenant.R3_Last_Name;

                                                    string TenantName = Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim();
                                                    string TenantAddress = Tenant.Street.Trim();
                                                    string Subject = string.Empty;

                                                    if ((R1Name == string.Empty) && (R2Name == string.Empty) && (R3Name == string.Empty))
                                                        Subject = string.Format("Verification of Rent {0} {1}", TenantName, TenantAddress);
                                                    else
                                                    {
                                                        if ((R2Name == string.Empty) && (R3Name == string.Empty))
                                                            Subject = string.Format("Verification of Rent {0} {1} {2}", TenantName, R1Name, TenantAddress);
                                                        else
                                                        {
                                                            if (R3Name == string.Empty)
                                                                Subject = string.Format("Verification of Rent {0} {1} {2} {3}", TenantName, R1Name, R2Name, TenantAddress);
                                                            else
                                                                Subject = string.Format("Verification of Rent {0} {1} {2} {3} {4}", TenantName, R1Name, R2Name, R3Name, TenantAddress);
                                                        }
                                                    }

                                                    EnsureLandlordInvite(Tenant.Account_Name.id, ZM, LLName, ref LLUser, ref LLPwd);

                                                    //EP.SendVerificationOfRent2(thisLandlord.Email_1, "andy@creditrentboost.com", TenantName, R1Name.Trim(), R2Name.Trim(), R3Name.Trim(), TenantAddress, EmailTemplate, Attachment);
                                                    //if (EmailTemplate.ToLower() == "individual")
                                                        EP.SendVerificationOfRentCanned(thisLandlord.Email_1, "andy@creditrentboost.com", "https://landlordportal.creditrentboost.com", Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                    //else
                                                    //    EP.SendVerificationOfRent2(thisLandlord.Email_1, string.Empty, TenantName, R1Name.Trim(), R2Name.Trim(), R3Name.Trim(), TenantAddress, EmailTemplate, Attachment);
                                                    EP = null;

                                                    VOREmailProvider vep = new VOREmailProvider(TenantName);
                                                    if (EmailTemplate.ToLower() == "pmc")
                                                        vep.PrintEmail(vep.createVORHTMLPMCView2Ex("Enrollment@creditrentboost.com", thisLandlord.Email_1, Subject, LLName, LLUser, LLPwd));
                                                    if (EmailTemplate.ToLower() == "individual")
                                                        vep.PrintEmail(vep.createVORHTMLINDIVIDUALView2Ex("Enrollment@creditrentboost.com", thisLandlord.Email_1, Subject, LLName, LLUser, LLPwd));

                                                    // Put Email into DMS
                                                    #region DMS Email Entry
                                                    using (MySqlConnection dbc = new MySqlConnection(gConnectionString))
                                                    {
                                                        dbc.Open();

                                                        PathEntry PE = GetTenantDirectory(Tenant.id, dbc);

                                                        int itemkey = 0;
                                                        string PhysicalName = string.Empty;
                                                        string extension = ".pdf";
                                                        string filetype = "application/pdf";
                                                        string NamingSchema = "06. $tenant.lastname~ - VOR(fe)";
                                                        int filecategory = 3;
                                                        bool landlorditem = false;
                                                        bool tenantitem = true;
                                                        bool useExtension = true;
                                                        string DisplayName = string.Empty;
                                                        //string DefaultDirectory = "C:\\DocumentSystem\\Tenants";
                                                        //string TenantPhysicalDirectoryName = ResolvePhysicalDirectoryName(DisplayName);
                                                        string zohoKeys = "NZK:" + Tenant.id + ":NZK";
                                                        //int DirKey = 0;
                                                        string streetaddress = string.Format("{0} {1}, {2} {3}", Tenant.Street, Tenant.City, Tenant.State1, Tenant.Zip);

                                                        try
                                                        {
                                                            // Create Document for Tenant Agreement: Physically and Logically
                                                            DisplayName = NamingSchema;
                                                            foreach (string TemplateReplaceable in TemplateReplaceables)
                                                            {
                                                                if (DisplayName.Contains(TemplateReplaceable))
                                                                {
                                                                    if (TemplateReplaceable == "$tenant~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, TenantReplaceable(Tenant));

                                                                    if (TemplateReplaceable == "$tenant.lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.firstinitial~")
                                                                    {
                                                                        if (Tenant.First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r1lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r1firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r1firstinitial~")
                                                                    {
                                                                        if (Tenant.R1_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r2lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r2firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r2firstinitial~")
                                                                    {
                                                                        if (Tenant.R2_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r3lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r3firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r3firstinitial~")
                                                                    {
                                                                        if (Tenant.R3_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$root~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, "C:\\DocumentSystem");

                                                                    if (TemplateReplaceable == "$stamp~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, string.Format("{0:yyyyMMddHHmmss}", DateTime.Now));

                                                                    if (TemplateReplaceable == "$filename~")
                                                                    {
                                                                        DisplayName = "TenantAgreement";
                                                                        useExtension = false;
                                                                    }
                                                                }
                                                            }

                                                            if (DisplayName.Contains("..")) DisplayName = DisplayName.Replace("..", "."); // fixes a problem - need to figure this out later

                                                            PhysicalName = ResolvePhysicalNameEx(DisplayName);

                                                            if (useExtension)
                                                                PhysicalName += extension;

                                                            DirectoryInfo DI = new DirectoryInfo(PE.Location);
                                                            if (!DI.Exists)
                                                            {
                                                                DI.Create();
                                                                //WriteBuildLog(LogFile, string.Format("T-{0} had to create directory {1} for the landlord before doing any file processing.", Tenant.id, ParentDirectory.Location));
                                                                DirectorySecurity security = DI.GetAccessControl();
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\SYSTEM", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\IUSR", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"CREATOR OWNER", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Administrators", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Users", FileSystemRights.Read | FileSystemRights.ReadAndExecute | FileSystemRights.ListDirectory, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NS1007190\DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                DI.SetAccessControl(security);
                                                            }

                                                            // Create whole Physical Path
                                                            if (PE.Location.EndsWith("\\"))
                                                                PhysicalName = PE.Location + PhysicalName;
                                                            else
                                                                PhysicalName = PE.Location + "\\" + PhysicalName;

                                                            //    download and copy data to directory
                                                            using (BinaryWriter bw = new BinaryWriter(File.Open(PhysicalName, FileMode.Create)))
                                                            {
                                                                bw.Write(vep.PDFData);
                                                            }

                                                            FileSecurity dSecurity = File.GetAccessControl(PhysicalName);
#if _NEWSERVER
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
#else
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("BUILTIN\\IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("S192-169-200-13\\Gregg", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("S192-169-200-13\\Chuck", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("S192-169-200-13\\DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
#endif
                                                            File.SetAccessControl(PhysicalName, dSecurity);

                                                            //    add entry to fs table
                                                            itemkey = 0;
                                                            CreateDocument(0, PE.Id, DisplayName, PhysicalName, filecategory, filetype, 4, 0, landlorditem, tenantitem, PE.LeadID, Tenant.id, PE.LandlordID, "CRBService", DateTime.Now, string.Empty, false, dbc, out itemkey);
                                                            UpdateDocumentTimeLine(1, string.Format("Webhook uploaded '{0}' on {1:MM/dd/yyyy hh:mm tt}.", DisplayName, DateTime.Now), 1, itemkey, dbc);
                                                        }
                                                        catch (Exception ce)
                                                        {
                                                            EventLog.WriteEntry(string.Format("Error Processing Tenant VOR (fe): {0}\r\n{1}\r\n", ce.Message, ce.StackTrace), EventLogEntryType.Error);
                                                        }
                                                    }
#endregion
                                                } // emailtemplate == string.empty
                                            } // if haserror
                                        } // foreach

                                        if (Tenants.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 2 VORs::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                    EOF = true;
                                }

                            } //while !EOF

                        }
                        catch (Exception ce)
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process Idiots 2 Added Logic VORs Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                        }
                        #endregion

                        #region Idiot Pass 3
                        EOF = false;
                        Page = 1;

                        try
                        {
                            while (!EOF)
                            {
                                CountAPICall("searchcontact");
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                                if (ZM.SearchContacts("(Canned_VOR_Resend:equals:Renewal)", Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        EventLog.WriteEntry(ce.Message);
                                        Tenants = null;
                                    }

                                    if (Tenants != null)
                                    {
                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                        foreach (Contact Tenant in Tenants.data)
                                        {
                                            ErrorLines = string.Empty;
                                            bool hasErrors = false;
                                            string Response = string.Empty;
                                            MemoryStream AttachmentData = null;
                                            byte[] TenantAgreementPDF = null;
                                            AccountsFeedBack Landlords = null;
                                            Account thisLandlord = null;
                                            bool firstItem = true;

                                            if (string.IsNullOrEmpty(Tenant.VOR_Needed)) Tenant.VOR_Needed = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Email)) Tenant.Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R1_Email)) Tenant.R1_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_Email)) Tenant.R2_Email = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_Email)) Tenant.R3_Email = string.Empty;

                                            if (string.IsNullOrEmpty(Tenant.R1_First_Name)) Tenant.R1_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R1_Last_Name)) Tenant.R1_Last_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_First_Name)) Tenant.R2_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R2_Last_Name)) Tenant.R2_Last_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_First_Name)) Tenant.R3_First_Name = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.R3_Last_Name)) Tenant.R3_Last_Name = string.Empty;

                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Retrieving Landlord.", EventLogEntryType.Warning);
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetAccount);
                                            if (ZM.GetAccount(Tenant.Account_Name.id, out Response))
                                            {
                                                Landlords = JsonConvert.DeserializeObject<AccountsFeedBack>(Response);
                                                if (Landlords != null)
                                                    thisLandlord = Landlords.data[0];
                                            }

                                            if (thisLandlord != null)
                                            {
                                                if (string.IsNullOrEmpty(thisLandlord.Email_1)) thisLandlord.Email_1 = string.Empty;
                                                if (string.IsNullOrEmpty(thisLandlord.Account_Name)) thisLandlord.Account_Name = string.Empty;

                                                LLUser = thisLandlord.Email_1;
                                                LLName = thisLandlord.Account_Name;
                                                LLPwd = GetLandlordPortalPassword(thisLandlord.id);

                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Comparing Landlord Email to Tenants.", EventLogEntryType.Warning);
                                                if (!string.IsNullOrEmpty(thisLandlord.Email_1))
                                                {
                                                    if ((thisLandlord.Email_1.ToLower() != Tenant.Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R1_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R2_Email.ToLower()) && (thisLandlord.Email_1.ToLower() != Tenant.R3_Email.ToLower()))
                                                    {
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Retrieving Tenant Agreement.", EventLogEntryType.Warning);
                                                        // Find and get Tenant Agreement
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachmentList);
                                                        if (ZM.GetContactAttachmentList(Tenant.id, out Response))
                                                        {
                                                            AttachmentListFeedback attachmentlist = JsonConvert.DeserializeObject<AttachmentListFeedback>(Response);

                                                            if (attachmentlist != null)
                                                            {
                                                                if (attachmentlist.data != null)
                                                                {
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VOR Processing::Searching for Tenant Agreement out of {0} attachments.", attachmentlist.data.Length), EventLogEntryType.Warning);
                                                                    foreach (AttachmentItem attachment in attachmentlist.data)
                                                                    {
                                                                        if (!string.IsNullOrEmpty(attachment.File_Name))
                                                                        {
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VOR Processing::Looking at {0}.", attachment.File_Name), EventLogEntryType.Warning);
                                                                            if ((attachment.File_Name.ToLower() == "tenantagreement.pdf") || (attachment.File_Name.ToLower() == "tenant agreement.pdf") || (attachment.File_Name.ToLower() == "tenant registration.pdf"))
                                                                            {
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Found Tenant Agreement.", EventLogEntryType.Warning);
                                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.GetContactAttachment);
                                                                                if (ZM.GetContactAttachment(Tenant.id, attachment.id, out AttachmentData))
                                                                                {
                                                                                    TenantAgreementPDF = AttachmentData.ToArray();
                                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Got Tenant Agreement.", EventLogEntryType.Warning);
                                                                                }
                                                                                else
                                                                                {
                                                                                    hasErrors = true;
                                                                                    ErrorLines += "Tenant Agreement found but was unable to download it.";
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    if (!hasErrors)
                                                                    {
                                                                        if (TenantAgreementPDF != null)
                                                                        {
                                                                            if (TenantAgreementPDF.Length <= 0)
                                                                            {
                                                                                hasErrors = true;
                                                                                ErrorLines += "Tenant Agreement was not found.";
                                                                                if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            hasErrors = true;
                                                                            ErrorLines += "Tenant Agreement was not found.";
                                                                            if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Tenant Agreement Not Found.", EventLogEntryType.Error);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    hasErrors = true;
                                                                    ErrorLines += "Tenant has no attachments.";
                                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VOR Processing::Tenant has no attachments.", EventLogEntryType.Error);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                hasErrors = true;
                                                                ErrorLines += "Unable to obtain a list of attachments.";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            hasErrors = true;
                                                            ErrorLines += "Unable to obtain a list of attachments.";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // error - Landlord email is one of the tenants
                                                        hasErrors = true;
                                                        ErrorLines += "Tenant / Roommates email and the Landlord email are the same.";
                                                    }
                                                }
                                                else
                                                {
                                                    // error - blank email
                                                    hasErrors = true;
                                                    ErrorLines += "There is not valid Landlord email.";
                                                }
                                            }
                                            else
                                            {
                                                // error - can't get account
                                                hasErrors = true;
                                                ErrorLines += "Service was unable to retrieve the Landlord Record.";
                                            }

                                            if (hasErrors)
                                            {
                                                // Update the Contact
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                if (firstItem)
                                                {
                                                    firstItem = false;
                                                    cu.Append("\"Canned_VOR_Resend\": \"No\"");
                                                }
                                                else
                                                    cu.Append(",\"Canned_VOR_Resend\": \"No\"");

                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[\"workflow\"]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    // Failed Contact Update  - Tell Somebody
                                                    ErrorLines += " - Zoho Contact Update Failed";
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VOR Processing::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                }
                                                else
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VOR Processing::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);

                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                ZM.AddToContactNotes(Tenant.id, "Verification Of Rent", ErrorLines);
                                            }
                                            else
                                            {
                                                if (string.IsNullOrEmpty(Tenant.Landlord_Vetting)) Tenant.Landlord_Vetting = "done";
                                                if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs::Getting Email Template for {0}.", Tenant.Landlord_Vetting), EventLogEntryType.Warning);
                                                string EmailTemplate = string.Empty;

                                                using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                                {
                                                    dbc.Open();
                                                    using (MySqlCommand dbcc = new MySqlCommand(string.Format("SELECT emailtemplate FROM crbdb.mt_landlordemailtemplates WHERE LOWER(vettingvalue) = '{0}';", Tenant.Landlord_Vetting.ToLower()), dbc))
                                                    {
                                                        dbcc.CommandType = CommandType.Text;
                                                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                        {
                                                            if (dbr.HasRows)
                                                            {
                                                                if (dbr.Read())
                                                                {
                                                                    EmailTemplate = dbr.GetString(0);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(EmailTemplate))
                                                {
                                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs::Using Email Template {0}.", EmailTemplate), EventLogEntryType.Warning);

                                                    // Update the Contact
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");
                                                    cu.Append("\"Canned_VOR_Resend\": \"Sent\",");
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VORs::Updating ZOHO Contact.", EventLogEntryType.Warning);
                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        // Failed Contact Update  - Tell Somebody
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                    }
                                                    else
                                                    {
                                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.AddContactNote);
                                                        ZM.AddToContactNotes(Tenant.id, "Canned VOR Renewal Email", "Renewal VOR was sent");
                                                    }

                                                    if (gProcessVORsDebugging) EventLog.WriteEntry("IL 3 VORs::Sending Email.", EventLogEntryType.Warning);
                                                    FileData Attachment = new FileData();
                                                    Attachment.FieldSource = "file";
                                                    Attachment.FileName = "TenantAgreement.pdf";
                                                    Attachment.FileType = "application/pdf";
                                                    Attachment.FileContents = TenantAgreementPDF;

                                                    string R1Name = Tenant.R1_First_Name + " " + Tenant.R1_Last_Name;
                                                    string R2Name = Tenant.R2_First_Name + " " + Tenant.R2_Last_Name;
                                                    string R3Name = Tenant.R3_First_Name + " " + Tenant.R3_Last_Name;

                                                    string TenantName = Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim();
                                                    string TenantAddress = Tenant.Street.Trim();
                                                    string Subject = string.Empty;

                                                    if ((R1Name == string.Empty) && (R2Name == string.Empty) && (R3Name == string.Empty))
                                                        Subject = string.Format("Renewal:Verification of Rent {0} {1}", TenantName, TenantAddress);
                                                    else
                                                    {
                                                        if ((R2Name == string.Empty) && (R3Name == string.Empty))
                                                            Subject = string.Format("Renewal:Verification of Rent {0} {1} {2}", TenantName, R1Name, TenantAddress);
                                                        else
                                                        {
                                                            if (R3Name == string.Empty)
                                                                Subject = string.Format("Renewal:Verification of Rent {0} {1} {2} {3}", TenantName, R1Name, R2Name, TenantAddress);
                                                            else
                                                                Subject = string.Format("Renewal:Verification of Rent {0} {1} {2} {3} {4}", TenantName, R1Name, R2Name, R3Name, TenantAddress);
                                                        }
                                                    }

                                                    EmailProvider EP = new EmailProvider();
                                                    EP.SendVerificationOfRentRenewalCanned(thisLandlord.Email_1, "andy@creditrentboost.com", Tenant.First_Name.Trim() + " " + Tenant.Last_Name.Trim(), Tenant.Street.Trim(), EmailTemplate, Attachment, LLName, LLUser, LLPwd);
                                                    EP = null;

                                                    VOREmailProvider vep = new VOREmailProvider(TenantName);
                                                    if (EmailTemplate.ToLower() == "pmc")
                                                        vep.PrintEmail(vep.createVORHTMLPMCViewRenewalCanned("support@creditrentboost.com", thisLandlord.Email_1, Subject, LLName, LLUser, LLPwd));
                                                    if (EmailTemplate.ToLower() == "individual")
                                                        vep.PrintEmail(vep.createVORHTMLIndividualViewRenewalCanned("support@creditrentboost.com", thisLandlord.Email_1, Subject, LLName, LLUser, LLPwd));

                                                    // Put Email into DMS
                                                    #region DMS Email Entry
                                                    using (MySqlConnection dbc = new MySqlConnection(gConnectionString))
                                                    {
                                                        dbc.Open();

                                                        PathEntry PE = GetTenantDirectory(Tenant.id, dbc);

                                                        int itemkey = 0;
                                                        string PhysicalName = string.Empty;
                                                        string extension = ".pdf";
                                                        string filetype = "application/pdf";
                                                        string NamingSchema = "06. $tenant.lastname~ - VOR(fe)";
                                                        int filecategory = 3;
                                                        bool landlorditem = false;
                                                        bool tenantitem = true;
                                                        bool useExtension = true;
                                                        string DisplayName = string.Empty;
                                                        //string DefaultDirectory = "C:\\DocumentSystem\\Tenants";
                                                        //string TenantPhysicalDirectoryName = ResolvePhysicalDirectoryName(DisplayName);
                                                        string zohoKeys = "NZK:" + Tenant.id + ":NZK";
                                                        //int DirKey = 0;
                                                        string streetaddress = string.Format("{0} {1}, {2} {3}", Tenant.Street, Tenant.City, Tenant.State1, Tenant.Zip);

                                                        try
                                                        {
                                                            // Create Document for Tenant Agreement: Physically and Logically
                                                            DisplayName = NamingSchema;
                                                            foreach (string TemplateReplaceable in TemplateReplaceables)
                                                            {
                                                                if (DisplayName.Contains(TemplateReplaceable))
                                                                {
                                                                    if (TemplateReplaceable == "$tenant~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, TenantReplaceable(Tenant));

                                                                    if (TemplateReplaceable == "$tenant.lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.firstinitial~")
                                                                    {
                                                                        if (Tenant.First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r1lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r1firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r1firstinitial~")
                                                                    {
                                                                        if (Tenant.R1_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R1_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r2lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r2firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r2firstinitial~")
                                                                    {
                                                                        if (Tenant.R2_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R2_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$tenant.r3lastname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_Last_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r3firstname~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_First_Name.Trim());

                                                                    if (TemplateReplaceable == "$tenant.r3firstinitial~")
                                                                    {
                                                                        if (Tenant.R3_First_Name.Trim().Length > 0)
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, Tenant.R3_First_Name.Trim().Substring(0, 1));
                                                                        else
                                                                            DisplayName = DisplayName.Replace(TemplateReplaceable, string.Empty);
                                                                    }

                                                                    if (TemplateReplaceable == "$root~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, "C:\\DocumentSystem");

                                                                    if (TemplateReplaceable == "$stamp~")
                                                                        DisplayName = DisplayName.Replace(TemplateReplaceable, string.Format("{0:yyyyMMddHHmmss}", DateTime.Now));

                                                                    if (TemplateReplaceable == "$filename~")
                                                                    {
                                                                        DisplayName = "TenantAgreement";
                                                                        useExtension = false;
                                                                    }
                                                                }
                                                            }

                                                            if (DisplayName.Contains("..")) DisplayName = DisplayName.Replace("..", "."); // fixes a problem - need to figure this out later

                                                            PhysicalName = ResolvePhysicalNameEx(DisplayName);

                                                            if (useExtension)
                                                                PhysicalName += extension;

                                                            DirectoryInfo DI = new DirectoryInfo(PE.Location);
                                                            if (!DI.Exists)
                                                            {
                                                                DI.Create();
                                                                //WriteBuildLog(LogFile, string.Format("T-{0} had to create directory {1} for the landlord before doing any file processing.", Tenant.id, ParentDirectory.Location));
                                                                DirectorySecurity security = DI.GetAccessControl();
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\SYSTEM", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\IUSR", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"CREATOR OWNER", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Administrators", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Users", FileSystemRights.Read | FileSystemRights.ReadAndExecute | FileSystemRights.ListDirectory, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                security.AddAccessRule(new FileSystemAccessRule(@"NS1007190\DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
                                                                DI.SetAccessControl(security);
                                                            }

                                                            // Create whole Physical Path
                                                            if (PE.Location.EndsWith("\\"))
                                                                PhysicalName = PE.Location + PhysicalName;
                                                            else
                                                                PhysicalName = PE.Location + "\\" + PhysicalName;

                                                            //    download and copy data to directory
                                                            using (BinaryWriter bw = new BinaryWriter(File.Open(PhysicalName, FileMode.Create)))
                                                            {
                                                                bw.Write(vep.PDFData);
                                                            }

                                                            FileSecurity dSecurity = File.GetAccessControl(PhysicalName);
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\SYSTEM", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\IUSR", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule(@"CREATOR OWNER", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Administrators", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Users", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            dSecurity.AddAccessRule(new FileSystemAccessRule("DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            //dSecurity.AddAccessRule(new FileSystemAccessRule("S192-169-200-13\\Gregg", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            //dSecurity.AddAccessRule(new FileSystemAccessRule("S192-169-200-13\\Chuck", FileSystemRights.FullControl, AccessControlType.Allow));
                                                            File.SetAccessControl(PhysicalName, dSecurity);

                                                            //    add entry to fs table
                                                            itemkey = 0;
                                                            CreateDocument(0, PE.Id, DisplayName, PhysicalName, filecategory, filetype, 4, 0, landlorditem, tenantitem, PE.LeadID, Tenant.id, PE.LandlordID, "CRBService", DateTime.Now, string.Empty, false, dbc, out itemkey);
                                                            UpdateDocumentTimeLine(1, string.Format("Webhook uploaded '{0}' on {1:MM/dd/yyyy hh:mm tt}.", DisplayName, DateTime.Now), 1, itemkey, dbc);
                                                        }
                                                        catch (Exception ce)
                                                        {
                                                            EventLog.WriteEntry(string.Format("Error Processing Tenant VOR (fe): {0}\r\n{1}\r\n", ce.Message, ce.StackTrace), EventLogEntryType.Error);
                                                        }
                                                    }
                                                    #endregion

                                                } // emailtemplate == string.empty
                                            } // if haserror
                                        } // foreach

                                        if (Tenants.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("IL 3 VORs::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                    EOF = true;
                                }

                            } //while !EOF

                        }
                        catch (Exception ce)
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process Idiots 3 Added Logic VORs Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                        }
                        #endregion

                        #region Process 01b. VOR Sent
                        EOF = false;
                        Page = 1;

                        try
                        {
                            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                            {
                                dbc.Open();

                                while (!EOF)
                                {
                                    CountAPICall("searchcontact");
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.SearchContacts);
                                    if (ZM.SearchContacts("(Contact_Status:equals:01b. Vor Sent)", Page, out CRMFeedback))
                                    {
                                        try
                                        {
                                            Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                        }
                                        catch (Exception ce)
                                        {
                                            EventLog.WriteEntry(ce.Message);
                                            Tenants = null;
                                        }

                                        if (Tenants != null)
                                        {
                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs Sent {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                            List<string> FilesUploaded = new List<string>();

                                            foreach (Contact Tenant in Tenants.data)
                                            {
                                                TimeSpan elapsed = DateTime.Now - Tenant.Modified_Time;
                                                FilesUploaded.Clear();

                                                if (elapsed.TotalMinutes > 30)
                                                {
                                                    bool CanMoveToNextStatus = true;
                                                    
                                                    // Look for uploaded items in DMS for this Tenant
                                                    string theSQL = string.Format("SELECT a.id, a.filecategory, a.tenantitem, b.description FROM crbdb.mt_filesystem a LEFT OUTER JOIN crbdb.mt_filesystemcategories b ON a.filecategory = b. id WHERE (a.contactid = '{0}') AND (a.filecategory NOT IN (1,2,3,4,47)) AND (a.tenantitem = true)", Tenant.id);
                                                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                                    {
                                                        dbcc.CommandType = CommandType.Text;
                                                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                        {
                                                            if (dbr.HasRows)
                                                            {
                                                                CanMoveToNextStatus = false;
                                                                while(dbr.Read())
                                                                {
                                                                    FilesUploaded.Add(dbr[3].ToString());
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (CanMoveToNextStatus)
                                                    {
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [{ ");
                                                        cu.Append("\"Contact_Status\" : \"02. Welcome  Email\"");
                                                        cu.Append(" }], \"trigger\":[\"workflow\"]}");  //cu.Append("], \"trigger\":[\"workflow\"]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVORs", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            // Failed Contact Update  - Tell Somebody
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs Sent::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                        }
                                                        else
                                                            if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs Sent::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                    }
                                                    else
                                                    {
                                                        string EventMessage = string.Format("VORs Sent::{0} Skipped because the following was found uploaded\r\n", Tenant.id);
                                                        foreach(string FileUploaded in FilesUploaded)
                                                        {
                                                            EventMessage += FileUploaded + "\r\n";
                                                        }
                                                        EventLog.WriteEntry(EventMessage, EventLogEntryType.Warning, 60333);
                                                    }
                                                }

                                            } // foreach

                                            if (Tenants.info.more_records)
                                                Page++;
                                            else
                                                EOF = true;
                                        }
                                        else
                                            EOF = true;
                                    }
                                    else
                                    {
                                        if (gProcessVORsDebugging) EventLog.WriteEntry(string.Format("VORs Sent::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                        EOF = true;
                                    }

                                } //while !EOF
                            }
                        }
                        catch (Exception ce)
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process 01b. VOR Sent Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                        }
#endregion

                        if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process VORs Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2} \r\n {3}", DateTime.Now, ce.Message, ce.StackTrace, ce.InnerException), EventLogEntryType.Error);
                    }

                    // Wait to start for all subsequent times until a minute of 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
                    if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate7.WaitOne();
                    if (gProcessVORsDebugging) EventLog.WriteEntry("VORs Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingVORs)
                    {
                        continueRunning = false;
                        if (gProcessVORsDebugging) EventLog.WriteEntry("VORs gStopProcessingVORs Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingVORs
        } // ProcessVORs
        private void ProcessUpgrades()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
            if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendation Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate8.WaitOne();
            if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendation Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingUpgrades)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string UpgradeStatus = string.Empty;
                    string UpgradeQuery = string.Empty;

                    if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendation Processing Started.", EventLogEntryType.Warning);
                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        ContactsFeedBack Tenants = null;

                        using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                        {
                            dbc.Open();
                            using (MySqlCommand dbcc = new MySqlCommand("SELECT upgraderstatus FROM crbdb.mt_systemparameters WHERE id = 1;", dbc))
                            {
                                dbcc.CommandType = CommandType.Text;
                                using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                {
                                    if (dbr.HasRows)
                                    {
                                        if (dbr.Read())
                                        {
                                            UpgradeStatus = dbr.GetString(0);
                                        }
                                    }
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(UpgradeStatus))
                            UpgradeQuery = string.Format("((Landlord_From_Tenant:equals:Yes)AND((Contact_Status:equals:{0})OR(Reporting:equals:Reporting)))", UpgradeStatus);
                        else
                            UpgradeQuery = "((Landlord_From_Tenant:equals:Yes)AND(Reporting:equals:Reporting))";

                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessUpgrades", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts(UpgradeQuery, Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(ce.Message, EventLogEntryType.Error);
                                    Tenants = null;
                                }
                                
                                if (Tenants != null)
                                {
                                    if (gProcessUpgradesDebugging) EventLog.WriteEntry(string.Format("Upgrade Recommendation {0} possible Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
#region Recommend Upgrades
                                        int Age = 0;
                                        //bool hasErrors = false;
                                        //bool firstItem = true;
                                        string Response = string.Empty;
                                        string UpgradeDisposition = "Error";
                                        string UpgradeReason = string.Empty;
                                        TimeSpan ts = DateTime.Now - Tenant.Created_Time;
                                        int FileAge = (int)ts.TotalDays;
                                        bool skipRecord = false;

                                        if ((Tenant.Reporting.ToLower() == "reporting") || (Tenant.Contact_Status.ToLower() == UpgradeStatus.ToLower()))
                                        {
                                            if (UpgradeAllowed(Tenant.Reporting_Requested))
                                            {
                                                if (string.IsNullOrEmpty(Tenant.Landlord_From_Tenant)) Tenant.Landlord_From_Tenant = string.Empty;
                                                if (Tenant.Landlord_From_Tenant.ToLower() == "yes")
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Upgrade_Option)) Tenant.Upgrade_Option = string.Empty;
                                                    if (Tenant.Upgrade_Option == string.Empty)
                                                    {
                                                        //TimeSpan ts = DateTime.Now - Tenant.Created_Time;
                                                        //if (ts.TotalDays < 365.0D)
                                                        if (FileAge < 365)
                                                        {
                                                            // okay to process
                                                            if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = string.Empty;
                                                            if (Tenant.Still_Live_in_Home.ToLower() == "yes")
                                                            {
                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Past 12 Months Only"))
                                                                {
                                                                    if (string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                                    {
                                                                        UpgradeDisposition = "Yes";
                                                                        UpgradeReason = "Add Current";
                                                                    }
                                                                    else
                                                                    {
                                                                        PaymentHistoryDate CreatedOn = new PaymentHistoryDate(Tenant.Created_Time);
                                                                        PaymentHistoryDate StartedOn = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                                        if (CreatedOn.IsValid && StartedOn.IsValid)
                                                                        {
                                                                            Age = (int)Math.Abs(CreatedOn.AgeInMonths(StartedOn));
                                                                            if (Age > 15)
                                                                            {
                                                                                UpgradeDisposition = "Yes";
                                                                                UpgradeReason = "Add Past 24 & Current";
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Past 24 Months Only"))
                                                                {
                                                                    UpgradeDisposition = "Yes";
                                                                    UpgradeReason = "Add Current";
                                                                }

                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Current Rent Only"))
                                                                {
                                                                    if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                                    {
                                                                        PaymentHistoryDate CreatedOn = new PaymentHistoryDate(Tenant.Created_Time);
                                                                        PaymentHistoryDate StartedOn = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                                        if (CreatedOn.IsValid && StartedOn.IsValid)
                                                                        {
                                                                            if (CreatedOn.CompareTo(StartedOn) <= 0)
                                                                            {
                                                                                UpgradeDisposition = "No";
                                                                                UpgradeReason = string.Empty;
                                                                            }
                                                                            else
                                                                            {
                                                                                Age = (int)Math.Abs(CreatedOn.AgeInMonths(StartedOn));
                                                                                if (Age < 4)
                                                                                {
                                                                                    UpgradeDisposition = "Yes";
                                                                                    UpgradeReason = "Google Review";
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (Age > 15)
                                                                                    {
                                                                                        UpgradeDisposition = "Yes";
                                                                                        UpgradeReason = "Add Past 24";
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (Age > 5)
                                                                                        {
                                                                                            UpgradeDisposition = "Yes";
                                                                                            UpgradeReason = "Add Past 12";
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Current & Past 12 Months"))
                                                                {
                                                                    PaymentHistoryDate CreatedOn = new PaymentHistoryDate(Tenant.Created_Time);
                                                                    PaymentHistoryDate StartedOn = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                                    if (CreatedOn.IsValid && StartedOn.IsValid)
                                                                    {
                                                                        Age = (int)Math.Abs(CreatedOn.AgeInMonths(StartedOn));
                                                                        if (Age > 15)
                                                                        {
                                                                            UpgradeDisposition = "Yes";
                                                                            UpgradeReason = "Add Past 24";
                                                                        }
                                                                    }
                                                                }

                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Current & Past 24 Months"))
                                                                {
                                                                    UpgradeDisposition = "No";
                                                                    UpgradeReason = string.Empty;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (Tenant.Still_Live_in_Home.ToLower() == "no")
                                                                {
                                                                    if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                                                    {
                                                                        if (!string.IsNullOrEmpty(Tenant.Date_Closed))
                                                                        {
                                                                            PaymentHistoryDate ClosedOn = new PaymentHistoryDate(Tenant.Date_Closed);
                                                                            PaymentHistoryDate StartedOn = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);

                                                                            if (ClosedOn.IsValid && StartedOn.IsValid)
                                                                            {
                                                                                Age = ClosedOn.AgeInMonths(StartedOn);

                                                                                if (RequestedProductsContains(Tenant.Reporting_Requested, "Past 12 Months Only"))
                                                                                {
                                                                                    if (Age > 15)
                                                                                    {
                                                                                        UpgradeDisposition = "Yes";
                                                                                        UpgradeReason = "Add Past 24";
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (Age < 15)
                                                                                        {
                                                                                            UpgradeDisposition = "No";
                                                                                            UpgradeReason = string.Empty;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    if (RequestedProductsContains(Tenant.Reporting_Requested, "Past 24 Months Only"))
                                                                    {
                                                                        UpgradeDisposition = "No";
                                                                        UpgradeReason = string.Empty;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                            skipRecord = true;
                                                    }
                                                    else
                                                        skipRecord = true;
                                                }
                                                else
                                                    skipRecord = true;
                                            }
                                            else
                                                skipRecord = true;
                                        }
                                        else
                                            skipRecord = true;

                                        if (!skipRecord)
                                        {
                                            // Update Contact
                                            StringBuilder uo = new StringBuilder("{ \"data\": [");
                                            uo.Append("{");
                                            uo.Append(string.Format("\"Upgrade_Option\": \"{0},\"", UpgradeDisposition));
                                            uo.Append(string.Format("\"Upgrade_Opportunity\": \"{0}\"", UpgradeReason));
                                            uo.Append("}");
                                            uo.Append("], \"trigger\":[]}");

                                            CountAPICall("updatecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessUpgrades", "CRM", APITracker.APICalls.UpdateContact);
                                            if (!ZM.UpdateContact(Tenant.id, uo.ToString()))
                                            {
                                                // Failed Contact Update  - Tell Somebody
                                                if (gProcessUpgradesDebugging) EventLog.WriteEntry(string.Format("Upgrade Recommendation::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, uo.ToString()), EventLogEntryType.Error);
                                            }
                                            else
                                                if (gProcessUpgradesDebugging) EventLog.WriteEntry(string.Format("Upgrade Recommendation::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                        }
#endregion
                                    } // foreach

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessUpgradesDebugging) EventLog.WriteEntry(string.Format("Upgrade Recommendation::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }
                            
                        } //while !EOF

                        if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendations Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Upgrade Recommendations Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    // Wait to start for all subsequent times until a minute of 0
                    if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendation Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate8.WaitOne();
                    if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrade Recommendation Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingUpgrades)
                    {
                        continueRunning = false;
                        if (gProcessUpgradesDebugging) EventLog.WriteEntry("Upgrades gStopProcessingUpgrades Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingUpgrades
        } // ProcessUpgrades
        private void ProcessVettingAssigned()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
            if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate9.WaitOne();
            if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingVettingAssigned)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool EOF = false;
                    //string Criteria = "(Contact_Status:equals:01. Signed Up)AND((Landlord_Vetting:equals:Gregg)OR(Landlord_Vetting:equals:Gary))";
                    string Criteria = "Contact_Status:equals:01. Signed Up";
                    string CRMFeedback = string.Empty;
                    DataTable DMSRecords = new DataTable();

                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Processing Started.", EventLogEntryType.Warning, 30300);

                    try
                    {
#region VettingAssigned
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        ContactsFeedBack Tenants = null;
                        AccountsFeedBack Accounts = null;

                        using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                        {
                            dbc.Open();

                            while (!EOF)
                            {
                                CountAPICall("searchcontact");
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.SearchContacts);
                                if (ZM.SearchContacts(Criteria, Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        //EventLog.WriteEntry(string.Format("VettingAssigned::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error, 30329);
                                        if (CRMFeedback.Length <= 30000)
                                        {
                                            EventLog.WriteEntry(string.Format("VettingAssigned::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error, 30329);
                                        }
                                        else
                                        {
                                            using (StreamWriter EL = new StreamWriter(string.Format(@"C:\IIS_App_Logs\ProcessVettingAssigned_{0:yyyyMMdd}.log", DateTime.Now), true, Encoding.UTF8))
                                            {
                                                EL.WriteLine(string.Format("{2:HHmmss} - VettingAssigned::JSON Deserializing Error::{0} \r\n {1} \r\n\r\n", ce.Message, CRMFeedback, DateTime.Now));
                                            }
                                        }
                                        Tenants = null;
                                    }

                                    if (Tenants != null)
                                    {
                                        if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned Potentially {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning, 30330);
                                        foreach (Contact Tenant in Tenants.data)
                                        {
                                            bool MissingDocsOverflowed = false;

                                            if (string.IsNullOrEmpty(Tenant.Landlord_Vetting)) Tenant.Landlord_Vetting = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Called_Tenant_PMC)) Tenant.Called_Tenant_PMC = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                            if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned Old Logic Test {0} with {1} and {2}.", Tenant.id, Tenant.Called_Tenant_PMC.ToLower(), Tenant.Landlord_Vetting), EventLogEntryType.Warning, 30330);
                                            // Old Logic
                                            //if (((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Gary")) && (Tenant.Call_Tenant_PMC.ToLower() != "no"))
                                            if (Tenant.Called_Tenant_PMC.ToLower() != "no")
                                            {
                                                if ((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Gary"))
                                                {
                                                    //bool NeedLandlordInfo = false;
                                                    string tempEmail = string.Empty;

                                                    if ((Tenant.Missing_Doc_1.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_2.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_3.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_4.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_5.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_6.ToLower() != "landlord email address (requested from landlord)") &&
                                                        (Tenant.Missing_Doc_1.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_2.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_3.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_4.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_5.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_6.ToLower() != "landlord email address") &&
                                                        (Tenant.Missing_Doc_1.ToLower() != "tenant agreement") &&
                                                        (Tenant.Missing_Doc_2.ToLower() != "tenant agreement") &&
                                                        (Tenant.Missing_Doc_3.ToLower() != "tenant agreement") &&
                                                        (Tenant.Missing_Doc_4.ToLower() != "tenant agreement") &&
                                                        (Tenant.Missing_Doc_5.ToLower() != "tenant agreement") &&
                                                        (Tenant.Missing_Doc_6.ToLower() != "tenant agreement") &&
                                                        (Tenant.L_Missing_Doc_1.ToLower() != "email address") &&
                                                        (Tenant.L_Missing_Doc_2.ToLower() != "email address") &&
                                                        (Tenant.L_Missing_Doc_3.ToLower() != "email address") &&
                                                        (Tenant.L_Missing_Doc_4.ToLower() != "email address") &&
                                                        (Tenant.L_Missing_Doc_5.ToLower() != "email address") &&
                                                        (Tenant.L_Missing_Doc_6.ToLower() != "email address"))
                                                    {
                                                        if (Tenant.Account_Name != null)
                                                        {
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.GetAccount);
                                                            if (ZM.GetAccount(Tenant.Account_Name.id, out CRMFeedback))
                                                            {
                                                                try
                                                                {
                                                                    Accounts = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                                                }
                                                                catch (Exception ce)
                                                                {
                                                                    string dummy = ce.Message;
                                                                    EventLog.WriteEntry(string.Format("VettingAssigned Failed to get Account {0} for Tenant {1}. Error:: {2}", Tenant.Account_Name.id, Tenant.id, ce.Message), EventLogEntryType.Error, 30330);
                                                                    Accounts = null;
                                                                }

                                                                if (Accounts != null)
                                                                {
                                                                    if (Accounts.data.Length > 0)
                                                                    {
                                                                        Account thisAccount = Accounts.data[0];
                                                                        if (string.IsNullOrEmpty(thisAccount.Email_1)) thisAccount.Email_1 = string.Empty;
                                                                        if (!string.IsNullOrEmpty(thisAccount.Email_1))
                                                                            tempEmail = thisAccount.Email_1;

                                                                        if (thisAccount.Email_1 == string.Empty)
                                                                        {
                                                                            bool firstItem = true;
                                                                            //NeedLandlordInfo = true;
                                                                            StringBuilder Payload = new StringBuilder("{ \"data\": [{");
                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                                                                            {
                                                                                if (firstItem)
                                                                                {
                                                                                    Payload.Append("\"Missing_Doc_1\" : \"Landlord Email Address\"");
                                                                                    firstItem = false;
                                                                                }
                                                                                else
                                                                                    Payload.Append(", \"Missing_Doc_1\" : \"Landlord Email Address\"");
                                                                            }
                                                                            else
                                                                            {
                                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                                                                                {
                                                                                    if (firstItem)
                                                                                    {
                                                                                        Payload.Append("\"Missing_Doc_2\" : \"Landlord Email Address\"");
                                                                                        firstItem = false;
                                                                                    }
                                                                                    else
                                                                                        Payload.Append(", \"Missing_Doc_2\" : \"Landlord Email Address\"");
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                                                                                    {
                                                                                        if (firstItem)
                                                                                        {
                                                                                            Payload.Append("\"Missing_Doc_3\" : \"Landlord Email Address\"");
                                                                                            firstItem = false;
                                                                                        }
                                                                                        else
                                                                                            Payload.Append(", \"Missing_Doc_3\" : \"Landlord Email Address\"");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                                                                                        {
                                                                                            if (firstItem)
                                                                                            {
                                                                                                Payload.Append("\"Missing_Doc_4\" : \"Landlord Email Address\"");
                                                                                                firstItem = false;
                                                                                            }
                                                                                            else
                                                                                                Payload.Append(", \"Missing_Doc_4\" : \"Landlord Email Address\"");
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                                                                                            {
                                                                                                if (firstItem)
                                                                                                {
                                                                                                    Payload.Append("\"Missing_Doc_5\" : \"Landlord Email Address\"");
                                                                                                    firstItem = false;
                                                                                                }
                                                                                                else
                                                                                                    Payload.Append(", \"Missing_Doc_5\" : \"Landlord Email Address\"");
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                                                                {
                                                                                                    if (firstItem)
                                                                                                    {
                                                                                                        Payload.Append("\"Missing_Doc_6\" : \"Landlord Email Address\"");
                                                                                                        firstItem = false;
                                                                                                    }
                                                                                                    else
                                                                                                        Payload.Append(", \"Missing_Doc_6\" : \"Landlord Email Address\"");
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                                                                            {
                                                                                if (firstItem)
                                                                                {
                                                                                    Payload.Append("\"L_Missing_Doc_1\" : \"Email Address\"");
                                                                                    firstItem = false;
                                                                                }
                                                                                else
                                                                                    Payload.Append(", \"L_Missing_Doc_1\" : \"Email Address\"");
                                                                            }
                                                                            else
                                                                            {
                                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                                                                                {
                                                                                    if (firstItem)
                                                                                    {
                                                                                        Payload.Append("\"L_Missing_Doc_2\" : \"Email Address\"");
                                                                                        firstItem = false;
                                                                                    }
                                                                                    else
                                                                                        Payload.Append(", \"L_Missing_Doc_2\" : \"Email Address\"");
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                                                                                    {
                                                                                        if (firstItem)
                                                                                        {
                                                                                            Payload.Append("\"L_Missing_Doc_3\" : \"Email Address\"");
                                                                                            firstItem = false;
                                                                                        }
                                                                                        else
                                                                                            Payload.Append(", \"L_Missing_Doc_3\" : \"Email Address\"");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                                                                                        {
                                                                                            if (firstItem)
                                                                                            {
                                                                                                Payload.Append("\"L_Missing_Doc_4\" : \"Email Address\"");
                                                                                                firstItem = false;
                                                                                            }
                                                                                            else
                                                                                                Payload.Append(", \"L_Missing_Doc_4\" : \"Email Address\"");
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                                                                                            {
                                                                                                if (firstItem)
                                                                                                {
                                                                                                    Payload.Append("\"L_Missing_Doc_5\" : \"Email Address\"");
                                                                                                    firstItem = false;
                                                                                                }
                                                                                                else
                                                                                                    Payload.Append(", \"L_Missing_Doc_5\" : \"Email Address\"");
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                                                                {
                                                                                                    if (firstItem)
                                                                                                    {
                                                                                                        Payload.Append("\"L_Missing_Doc_6\" : \"Email Address\"");
                                                                                                        firstItem = false;
                                                                                                    }
                                                                                                    else
                                                                                                        Payload.Append(", \"L_Missing_Doc_6\" : \"Email Address\"");
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

                                                                            Payload.Append("}], \"trigger\":[\"workflow\"] }");
                                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.UpdateContact);
                                                                            if (ZM.UpdateContact(Tenant.id, Payload.ToString()))
                                                                            {
                                                                                if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned updated Missing Docs for Tenant {0}.", Tenant.id), EventLogEntryType.Warning, 30322);
                                                                            }
                                                                            else
                                                                            {
                                                                                EventLog.WriteEntry(string.Format("VettingAssigned Failed to update Tenant {0}. Error:: {1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error, 30322);
                                                                            }

                                                                            if (!Tenant.Email_Opt_Out)
                                                                            {
                                                                                EmailProvider EP = new EmailProvider();
                                                                                if (!EP.SendBadLandlordEmail("andy@creditrentboost.com", Tenant, tempEmail))
                                                                                {
                                                                                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned::Failed trying to send Landlord Email Validation Error Email::{0}", EP.ErrorData), EventLogEntryType.Error, 30322);
                                                                                }
                                                                                EP = null;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            // Update Contact
                                                                            string Payload = "{ \"data\": [{\"Contact_Status\" : \"01a. Vetting Assigned\"}], \"trigger\":[\"workflow\"] }";
                                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.UpdateContact);
                                                                            if (ZM.UpdateContact(Tenant.id, Payload))
                                                                            {
                                                                                if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned updated Tenant {0} to '01a. Vetting Assigned'.", Tenant.id), EventLogEntryType.Warning, 30322);
                                                                            }
                                                                            else
                                                                            {
                                                                                EventLog.WriteEntry(string.Format("VettingAssigned Failed to update Tenant {0}. Error:: {1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error, 30322);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                // Couldn't get Account - Tell Somebody
                                                                EventLog.WriteEntry(string.Format("VettingAssigned Failed to get Account {0} for Tenant {1}. Error:: {2}", Tenant.Account_Name.id, Tenant.id, ZM.DebugText), EventLogEntryType.Error, 30330);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned Tenant {0} contains an email missing doc.", Tenant.id), EventLogEntryType.Warning, 30330);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned:: New Logic Test {0} with {1} and {2}.", Tenant.id, Tenant.Called_Tenant_PMC.ToLower(), Tenant.Landlord_Vetting), EventLogEntryType.Information, 30300);
                                                // New Logic 
                                                if ((Tenant.Called_Tenant_PMC.ToLower() == "no") && (!string.IsNullOrEmpty(Tenant.Landlord_Vetting)))
                                                {
                                                    bool WeHaveALandlordEmail = false;
                                                    bool WeHaveALandlordPhone = false;
                                                    bool TenantSide = true;
                                                    bool LandlordSide = false;
                                                    string TempJSON = string.Empty;
                                                    List<string> JSONItems = new List<string>();

                                                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned:: Processing {0} with new logic.", Tenant.id), EventLogEntryType.Information, 30300);

                                                    // Check for Tenant/Roommate Photo IDs
                                                    if (!DMSHasThisDocument(Tenant.id, TENANT_PHOTO_ID, dbc))
                                                    {
                                                        TempJSON = PutInMissingDocs(Tenant, "Photo ID (Can be your drivers license)", TenantSide, out MissingDocsOverflowed);
                                                        if (MissingDocsOverflowed)
                                                        {
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                            ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                        }
                                                        else
                                                            JSONItems.Add(TempJSON);
                                                    }
                                                    else
                                                    {
                                                        if (!string.IsNullOrEmpty(Tenant.R1_First_Name) && !string.IsNullOrEmpty(Tenant.R1_Last_Name))
                                                        {
                                                            if (!DMSHasThisDocument(Tenant.id, ROOMMATE1_PHOTO_ID, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Photo ID - Roommate 1", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R2_First_Name) && !string.IsNullOrEmpty(Tenant.R2_Last_Name))
                                                        {
                                                            if (!DMSHasThisDocument(Tenant.id, ROOMMATE2_PHOTO_ID, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Photo ID - Roommate 2", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }
                                                        if (!string.IsNullOrEmpty(Tenant.R3_First_Name) && !string.IsNullOrEmpty(Tenant.R3_Last_Name))
                                                        {
                                                            if (!DMSHasThisDocument(Tenant.id, ROOMMATE3_PHOTO_ID, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Photo ID - Roommate 3", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }
                                                    }

                                                    // Check for current lease
                                                    if (HasCurrentOnlyProduct(Tenant.Reporting_Requested))
                                                    {
                                                        if (!DMSHasThisDocument(Tenant.id, CURRENT_LEASE, dbc))
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Lease Agreement - Current", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // Check for past lease
                                                        if (HasPastOnlyProduct(Tenant.Reporting_Requested))
                                                        {
                                                            if (!DMSHasThisDocument(Tenant.id, PAST_LEASE, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Lease Agreement - Past", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }
                                                    }

                                                    // Check for current or past lease
                                                    if (HasCurrentAndPastProduct(Tenant.Reporting_Requested))
                                                    {
                                                        if (!DMSHasThisDocument(Tenant.id, CURRENT_LEASE, dbc) && !DMSHasThisDocument(Tenant.id, PAST_LEASE, dbc))
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Lease Agreement - Past", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }
                                                    }

                                                    // Get Account 
                                                    if (Tenant.Account_Name != null)
                                                    {
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.GetAccount);
                                                        if (ZM.GetAccount(Tenant.Account_Name.id, out CRMFeedback))
                                                        {
                                                            try
                                                            {
                                                                Accounts = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                                            }
                                                            catch (Exception ce)
                                                            {
                                                                string dummy = ce.Message;
                                                                EventLog.WriteEntry(string.Format("VettingAssigned Failed to get Account {0} for Tenant {1}. Error:: {2}", Tenant.Account_Name.id, Tenant.id, ce.Message), EventLogEntryType.Error, 30331);
                                                                Accounts = null;
                                                            }

                                                            if (Accounts != null)
                                                            {
                                                                if (Accounts.data.Length > 0)
                                                                {
                                                                    Account thisAccount = Accounts.data[0];
                                                                    if (string.IsNullOrEmpty(thisAccount.Email_1)) thisAccount.Email_1 = string.Empty;
                                                                    if (string.IsNullOrEmpty(thisAccount.Phone)) thisAccount.Phone = string.Empty;
                                                                    if (!string.IsNullOrEmpty(thisAccount.Email_1))
                                                                        WeHaveALandlordEmail = true;
                                                                    if (!string.IsNullOrEmpty(thisAccount.Phone))
                                                                        WeHaveALandlordPhone = true;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    // if we have an email
                                                    if (WeHaveALandlordEmail)
                                                    {
                                                        // Resend VOR
                                                        JSONItems.Add("\"VOR_Resend\" : \"Yes\"");

                                                        if ((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Special - Gregg"))
                                                        {
                                                            // Check Landlord ID
                                                            if (!DMSHasThisDocument(Tenant.id, LANDLORD_ID, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Landlord ID (requested from Landlord)", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);

                                                                TempJSON = PutInMissingDocs(Tenant, "Photo ID - Landlord", LandlordSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }

                                                        // Check for VOR
                                                        if (!DMSHasThisDocument(Tenant.id, INITIAL_VOR, dbc))
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Verification of Rent", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);

                                                            TempJSON = PutInMissingDocs(Tenant, "VOR Not Sent Yet", LandlordSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if ((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Special - Gregg"))
                                                        {
                                                            // if we don't have an email
                                                            if (!DMSHasThisDocument(Tenant.id, LANDLORD_ID, dbc))
                                                            {
                                                                TempJSON = PutInMissingDocs(Tenant, "Landlord ID", TenantSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);

                                                                TempJSON = PutInMissingDocs(Tenant, "Photo ID - Landlord", LandlordSide, out MissingDocsOverflowed);
                                                                if (MissingDocsOverflowed)
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                                }
                                                                else
                                                                    JSONItems.Add(TempJSON);
                                                            }
                                                        }

                                                        // if we don't have a phone number - missing doc 
                                                        if (!WeHaveALandlordPhone)
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Landlord Contact Information", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }

                                                        // Check for VOR
                                                        if (!DMSHasThisDocument(Tenant.id, INITIAL_VOR, dbc))
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Verification of Rent", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);

                                                            TempJSON = PutInMissingDocs(Tenant, "VOR Not Sent Yet", LandlordSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }
                                                    }

                                                    if ((Tenant.Landlord_Vetting == "Gregg") || (Tenant.Landlord_Vetting == "Special - Gregg"))
                                                    {
                                                        if (!DMSHasThisDocument(Tenant.id, PROPERTY_TAX_RECORDS, dbc))
                                                        {
                                                            TempJSON = PutInMissingDocs(Tenant, "Landlord Proof of Ownership", TenantSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);

                                                            TempJSON = PutInMissingDocs(Tenant, "Proof of Ownership", LandlordSide, out MissingDocsOverflowed);
                                                            if (MissingDocsOverflowed)
                                                            {
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Signed Up Automation", TempJSON);
                                                            }
                                                            else
                                                                JSONItems.Add(TempJSON);
                                                        }
                                                    }

                                                    // Update the Tenant
                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                    cu.Append("{ ");
                                                    cu.Append("\"Contact_Status\": \"02. Welcome  Email\",");
                                                    foreach(string JSONEntry in JSONItems)
                                                    {
                                                        if (!string.IsNullOrEmpty(JSONEntry))
                                                            cu.Append(string.Format("{0},", JSONEntry));
                                                    }
                                                    cu.Append(string.Format("\"Start_Date\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
                                                    cu.Append(string.Format("\"Last_Touch\": \"{0:yyyy-MM-dd}\",", DateTime.Now));
                                                    cu.Append(string.Format("\"Last_Touch_Landlord\": \"{0:yyyy-MM-dd}\"", DateTime.Now));
                                                    cu.Append(" }");
                                                    cu.Append("], \"trigger\":[\"workflow\"]}");

                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessVettingAssigned", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        EventLog.WriteEntry(string.Format("VettingAssigned(T)::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error, 30332);
                                                    }
                                                }
                                            }
                                        }

                                        if (Tenants.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry(string.Format("VettingAssigned::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error, 30333);
                                    EOF = true;
                                }

                            } // while !EOF
                        } // using dbc
#endregion

                        if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Completed.", EventLogEntryType.Warning, 30300);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process VettingAssigned Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error, 30333);
                    }

                    // Wait to start for all subsequent times until a minute of 0
                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate9.WaitOne();
                    if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingVettingAssigned)
                    {
                        continueRunning = false;
                        if (gProcessVettingAssignedDebugging) EventLog.WriteEntry("VettingAssigned gStopProcessingVettingAssignedc Flag True - Dropping out.", EventLogEntryType.Warning);
                    }
                } // while continueRunning

            } // if !this.gStopProcessingDMSSync
        } // ProcessVettingAssigned
        private void ProcessBOMJob()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 0, 15, 30, 45
            if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGateA.WaitOne();
            if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingBOMJob)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    lock (gBOMJobLock)
                    {
                        this.gBOMJobIsRunning = true;
                    }
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;
                    List<ErrorEntry> Errors = new List<ErrorEntry>();
                    int recordsin = 0;
                    int recordswithouterrors = 0;
                    int recordswitherrors = 0;
                    int recordsupdated = 0;
                    List<string> ErrorItems = new List<string>();
                    List<string> JSONItems = new List<string>();
                    DateTime runStart = DateTime.MinValue;
                    DateTime runStop = DateTime.MinValue;
                    string TestRunFile = string.Format("C:\\IIS_App_Logs\\TestRuns\\BOMJob_{0:yyyyMMddHHmm}.log", DateTime.Now);
                    PaymentHistoryDate RunDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    PaymentHistoryDate RptDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    RptDate.DecrementDate();

                    if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Update Started.", EventLogEntryType.Warning);
                    if (gTestRunBOMJob) WriteReportHeader(TestRunFile, "BOM Job"); //WriteToLogFile(TestRunFile, "BOM Job Update Started.");
                    runStart = DateTime.Now;

                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        #region Beginning Of Month Processing
                        ContactsFeedBack Tenants = null;
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            if (gTestRunBOMJob) WriteToLogFile(TestRunFile,"BOM Job::searchContact called");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Reporting:equals:Not Reporting", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    //if(ce.Message.Length > 32765)
                                    //{
                                    //    EventLog.WriteEntry(string.Format("BOM Job::JSON Deserializing Error::{0} \r\n {1}", ce.Message.Substring(0,1200), CRMFeedback), EventLogEntryType.Error);
                                    //}
                                    //if (gTestRunBOMJob) WriteToLogFile(TestRunFile, string.Format("BOM Job::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback));
                                    if (CRMFeedback.Length <= 30000)
                                    {
                                        EventLog.WriteEntry(string.Format("BOM Job::JSON Deserializing Error::{0} \r\n {1}", ce.Message.Substring(0, 1200), CRMFeedback), EventLogEntryType.Error);
                                    }
                                    else
                                    {
                                        using (StreamWriter EL = new StreamWriter(string.Format(@"C:\IIS_App_Logs\ProcessBOMJob_{0:yyyyMMdd}.log", DateTime.Now), true, Encoding.UTF8))
                                        {
                                            EL.WriteLine(string.Format("{2:HHmmss} - BOM Job::JSON Deserializing Error::{0} \r\n {1} \r\n\r\n", ce.Message, CRMFeedback, DateTime.Now));
                                        }
                                    }
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        bool processThisTenant = false;
                                        bool batchError = false;
                                        bool needToUpdateTradeLine = true;
                                        //bool dontUpdateTenant = false;

                                        char AdvancingChar = '0';

                                        string TradeLine = string.Empty;
                                        string BatchErrors = string.Empty;

                                        TradeLineProviderEx TLP = null;

                                        if (string.IsNullOrEmpty(Tenant.Last_Batch)) Tenant.Last_Batch = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Batch_EQ)) Tenant.Last_Batch_EQ = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Payment_History)) Tenant.Payment_History = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency)) Tenant.Date_of_First_Delinquency = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment)) Tenant.Date_of_Last_Payment = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Batch)) Tenant.Last_Batch = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Batch_EQ)) Tenant.Last_Batch_EQ = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Amount_Past_Due)) Tenant.Amount_Past_Due = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Total_Rental_Obligation_Amount)) Tenant.Total_Rental_Obligation_Amount = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status)) Tenant.A_Rental_Lease_Status = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_Closed)) Tenant.Date_Closed = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = string.Empty;

                                        ErrorItems.Clear();
                                        JSONItems.Clear();

                                        switch (Tenant.Contact_Status.ToLower())
                                        {
                                            case "01. signed up":
                                            case "01a. vetting assigned":
                                            case "01b. vor sent":
                                            case "01c. vor error":
                                            case "02. welcome  email":
                                            case "03. vetting - tenant & landlord":
                                            case "04. tu fields":
                                                processThisTenant = false;
                                                break;
                                            case "04. tu field error":
                                            case "04a. compliance review":
                                            case "04b. compliance error":
                                            case "05.  idm":
                                            case "05a. idm - tenants":
                                            case "05a. pending landlord vetting":
                                            case "06. final review (land)":
                                            case "06a. final review (tenant)":
                                            case "06b. final review (lrg pmc)":
                                                processThisTenant = true;
                                                break;
                                            case "07a. future reporting":
                                                processThisTenant = false;
                                                break;
                                            case "07b. file rejected":
                                                processThisTenant = true;
                                                break;
                                            case "08. reporting":
                                            case "09. inactive":
                                            case "10. cancelled":
                                                processThisTenant = false;
                                                break;
                                            default:
                                                processThisTenant = false;
                                                break;
                                        }

                                        if (processThisTenant)
                                        {
                                            recordsin++;
                                            TradeLine = Tenant.Payment_History;
                                            // Check Lease Start Date
                                            if (!string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date))
                                            {
                                                PaymentHistoryDate RentalStartDate = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);

                                                // It's there, is it valid?
                                                if (RentalStartDate.IsValid)
                                                {
                                                    // Check for Monthly Rent Amount
                                                    if (!string.IsNullOrEmpty(Tenant.Total_Rental_Obligation_Amount))
                                                    {
                                                        // Check that a product was selected - otherwise error
                                                        if (Tenant.Reporting_Requested.Length > 0)
                                                        {
                                                            // Creating a new Tradeline or updating an existing one?
                                                            if (string.IsNullOrEmpty(Tenant.Payment_History))
                                                            {
                                                                TradeLineBuildFeedback TLBF = BuildInitialTradeLine(Tenant, RentalStartDate, RunDate, RptDate);
                                                                if (TLBF.HasError)
                                                                {
                                                                    batchError = true;
                                                                    foreach(string Error in TLBF.Errors)
                                                                    {
                                                                        if (gTestRunBOMJob) ErrorItems.Add(Error);
                                                                        BatchErrors += Error + "\r\n";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    Tenant.Payment_History = TLBF.TradeLine;
                                                                    AdvancingChar = TLBF.AdvancingCharacter;
                                                                }
                                                            }

                                                            if (!batchError)
                                                            {
                                                                // Load Tradeline Provider
                                                                TLP = new TradeLineProviderEx(Tenant.Payment_History, int.Parse(Tenant.Total_Rental_Obligation_Amount), null);

                                                                if (TLP.IsStale(DateTime.Now.Year, DateTime.Now.Month))
                                                                {
                                                                    if (Tenant.A_Rental_Lease_Status == "05")
                                                                        AdvancingChar = '0';
                                                                    else if (Tenant.A_Rental_Lease_Status == "11")
                                                                        AdvancingChar = '0';
                                                                    else if (Tenant.A_Rental_Lease_Status == "13")
                                                                        AdvancingChar = 'D';

                                                                    TLP.UpdateHistoryByDate(((DateTime.Now.Year * 100) + DateTime.Now.Month), AdvancingChar);
                                                                }
                                                                else
                                                                    needToUpdateTradeLine = false;

                                                                TLP.RecalculateTradeline(int.Parse(Tenant.Total_Rental_Obligation_Amount));

                                                                if (Tenant.A_Rental_Lease_Status == "05")
                                                                {
                                                                    if (needToUpdateTradeLine) JSONItems.Add(string.Format("\"Payment_History\": \"{0}\"", TLP.ToString()));
                                                                    if (TLP.DateOfLastPayment == DateTime.MinValue)
                                                                        JSONItems.Add("\"Date_of_Last_Payment\": \"\"");
                                                                    else
                                                                    {
                                                                        if (TLP.DateOfLastPayment.CompareTo(RentalStartDate.PayDateAsDateTime) < 0)
                                                                            JSONItems.Add(string.Format("\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", RentalStartDate.PayDateAsDateTime));
                                                                        else
                                                                            JSONItems.Add(string.Format("\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", TLP.DateOfLastPayment));
                                                                    }
                                                                    DateTime thisMonth = DateTime.Parse(string.Format("{0:00}/01/{1:0000}", RunDate.PayMonth, RunDate.PayYear));
                                                                    //JSONItems.Add(string.Format("\"Date_to_Close\": \"{0:yyyy-MM-dd}\"", thisMonth.AddDays(-1.0)));
                                                                    JSONItems.Add(string.Format("\"Date_Closed\": \"{0:MMddyyyy}\"", thisMonth.AddDays(-1.0)));
                                                                    if (gTestRunBOMJob)
                                                                    {
                                                                        if (needToUpdateTradeLine) ErrorItems.Add(string.Format("Updating Payment History from {0} to {1}.", TradeLine, TLP.ToString()));
                                                                        ErrorItems.Add(string.Format("Updating Date of Last Payment to {0:MMddyyyy}.", TLP.DateOfLastPayment));
                                                                        ErrorItems.Add(string.Format("Updating Date Closed to {0:yyyy-MM-dd}.", thisMonth.AddDays(-1.0)));
                                                                    }
                                                                }
                                                                else if (Tenant.A_Rental_Lease_Status == "11")
                                                                {
                                                                    if (needToUpdateTradeLine) JSONItems.Add(string.Format("\"Payment_History\": \"{0}\"", TLP.ToString()));
                                                                    if (TLP.DateOfLastPayment == DateTime.MinValue)
                                                                        JSONItems.Add("\"Date_of_Last_Payment\": \"\"");
                                                                    else
                                                                    {
                                                                        if (TLP.DateOfLastPayment.CompareTo(RentalStartDate.PayDateAsDateTime) < 0)
                                                                            JSONItems.Add(string.Format("\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", RentalStartDate.PayDateAsDateTime));
                                                                        else
                                                                            JSONItems.Add(string.Format("\"Date_of_Last_Payment\": \"{0:MMddyyyy}\"", TLP.DateOfLastPayment));
                                                                    }
                                                                    JSONItems.Add(string.Format("\"Next_Verify\": \"{1:0000}-{0:00}-05\"", DateTime.Now.Month, DateTime.Now.Year));
                                                                    if (gTestRunBOMJob)
                                                                    {
                                                                        if (needToUpdateTradeLine) ErrorItems.Add(string.Format("Updating Payment History from {0} to {1}.", TradeLine, TLP.ToString()));
                                                                        ErrorItems.Add(string.Format("Updating Date of Last Payment to {0:MMddyyyy}.", TLP.DateOfLastPayment));
                                                                        ErrorItems.Add(string.Format("Updating Next Verify to {1:0000}-{0:00}-05.", DateTime.Now.Month, DateTime.Now.Year));
                                                                    }
                                                                }
                                                                else if (Tenant.A_Rental_Lease_Status == "13")
                                                                {
                                                                    if (needToUpdateTradeLine)
                                                                    {
                                                                        JSONItems.Add(string.Format("\"Payment_History\": \"{0}\"", TLP.ToString()));
                                                                        if (gTestRunBOMJob) ErrorItems.Add(string.Format("Updating Payment History from {0} to {1}.", TradeLine, TLP.ToString()));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            batchError = false;
                                                            if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Tenant is missing Reporting_Requested.", Tenant.id), EventLogEntryType.Error);
                                                            if (gTestRunBOMJob) ErrorItems.Add("Error::Tenant is missing Reporting Requested. Payment History Not Updated.");
                                                            BatchErrors += "Tenant is missing Reporting Requested.\r\n";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        batchError = false;
                                                        if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Tenant Rental Obligation Amount is missing. Payment History Not Updated.", Tenant.id), EventLogEntryType.Error);
                                                        if (gTestRunBOMJob) ErrorItems.Add("Error::Tenant Rental Obligation Lease Amount is missing. Payment History Not Updated.");
                                                        BatchErrors += "Tenant Rental Obligation Lease Amount is missing.\r\n";
                                                    }
                                                }
                                                else
                                                {
                                                    batchError = false;
                                                    if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Tenant Rental Obligation Lease Start Date is invalid. Payment History Not Updated.", Tenant.id), EventLogEntryType.Error);
                                                    if (gTestRunBOMJob) ErrorItems.Add("Error::Tenant Rental Obligation Lease Start Date is invalid. Payment History Not Updated.");
                                                    BatchErrors += "Tenant Rental Obligation Lease Start Date is invalid.\r\n";
                                                }
                                            }
                                            else
                                            {
                                                batchError = true;
                                                if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Tenant Rental Obligation Lease Start Date is empty. Batch Error.", Tenant.id), EventLogEntryType.Error);
                                                if (gTestRunBOMJob) ErrorItems.Add("Error::Tenant Rental Obligation Lease Start Date is empty. Batch Error.");
                                                BatchErrors += "Tenant Rental Obligation Lease Start Date is empty.\r\n";
                                            }

                                            bool FirstItem = true;
                                            // Update Contact
                                            StringBuilder cu = new StringBuilder("{ \"data\": [");
                                            cu.Append("{ ");
                                            if (batchError)
                                            {
                                                cu.Append("\"Batch_Error\": \"Yes\"");
                                                FirstItem = false;
                                            }
                                            foreach (string JSONEntry in JSONItems)
                                            {
                                                if (FirstItem)
                                                {
                                                    cu.Append(string.Format(" {0}", JSONEntry));
                                                    FirstItem = false;
                                                }
                                                else
                                                {
                                                    cu.Append(string.Format(", {0}", JSONEntry));
                                                }
                                            }
                                            cu.Append(" }");
                                            cu.Append("], \"trigger\":[]}");

                                            if (gTestRunBOMJob)
                                            {
                                                if (batchError || JSONItems.Count > 0)
                                                {
                                                    recordsupdated++;
                                                    WriteReportEntry(Tenant, TestRunFile, ErrorItems.ToArray());
                                                }
                                            }
                                            else
                                            {
                                                if (batchError || JSONItems.Count > 0)
                                                {
                                                    recordsupdated++;
                                                    CountAPICall("updatecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.UpdateContact);
                                                    if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                    {
                                                        recordswitherrors++;
                                                        ErrorLines += " - Zoho Contact Update Failed";
                                                        if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                                    }
                                                    else
                                                    {
                                                        if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                    }

                                                    if (!string.IsNullOrEmpty(BatchErrors))
                                                    {
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.AddContactNote);
                                                        ZM.AddToContactNotes(Tenant.id, "BOM Job Error", BatchErrors.Replace("\r", "\\r").Replace("\n", "\\n"));
                                                    }
                                                }
                                            }
                                        } // process this tenant - correct status
                                    } // foreach tenant

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    EventLog.WriteEntry("No Tenants found");

                                    EOF = true;
                                }
                                    
                            }
                            else
                            {
                                if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Warning);
                                if (gTestRunBOMJob) WriteToLogFile(TestRunFile, string.Format("BOM Job::CRM API Error::{0}", ZM.DebugText));
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        #region Phase 3 Delinquent Automation
                        Page = 1;
                        EOF = false;
                        CRMFeedback = string.Empty;
                        Tenants = null;
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("Pending_Close:equals:Delinquent Current", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    if (gTestRunBOMJob) WriteToLogFile(TestRunFile, string.Format("BOM Job::Phase 3 JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback));
                                    Tenants = null;
                                    if (ce.Message.Length > 32765)
                                    {
                                        EventLog.WriteEntry(string.Format("BOM Job::Phase 3 JSON Deserializing Error::{0} \r\n {1}", ce.Message.Substring(0,1200), CRMFeedback), EventLogEntryType.Error);

                                    }

                                }

                                if (Tenants != null)
                                {
                                    if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job Phase 3 {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        recordsin++;
                                        ErrorItems.Clear();

                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Payment_Amount_Confirmed)) Tenant.Rental_Lease_Payment_Amount_Confirmed = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Payment_Amount)) Tenant.Rental_Lease_Payment_Amount = string.Empty;

                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                        cu.Append("{ ");
                                        cu.Append("\"Pending_Close\": \"No\",");
                                        cu.Append(string.Format("\"Rental_Lease_Payment_Amount_Confirmed\": \"{0}\",", Tenant.Rental_Lease_Payment_Amount));
                                        cu.Append(" }");
                                        cu.Append("], \"trigger\":[]}");

                                        if (gTestRunBOMJob)
                                        {
                                            recordsupdated++;
                                            ErrorItems.Add(string.Format("Phase 3 Contact Updated using {0}.", cu.ToString())); //WriteToLogFile(TestRunFile, string.Format("BOM Job::Phase 3 {0} - Zoho Contact Updated using {1}.", Tenant.id, cu.ToString()));
                                            WriteReportEntry(Tenant, TestRunFile, ErrorItems.ToArray());
                                        }
                                        else
                                        {
                                            recordsupdated++;
                                            CountAPICall("updatecontact");
                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.UpdateContact);
                                            if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                            {
                                                recordswitherrors++;
                                                ErrorLines += " - Zoho Contact Update Failed";
                                                if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::Phase 3 {0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Warning);
                                            }
                                            else
                                            {
                                                if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::Phase 3 {0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                            }
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessBOMJobDebugging) EventLog.WriteEntry(string.Format("BOM Job::Phase 3 CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Warning);
                                if (gTestRunBOMJob) WriteToLogFile(TestRunFile, string.Format("BOM Job::Phase 3 CRM API Error::{0}", ZM.DebugText));
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        #region Weekly Account Files Processing
                        try
                        {
                            Page = 1;
                            EOF = false;
                            AccountsFeedBack Accounts = null;
                            DataTable TenantRecords = new DataTable();
                            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                            {
                                dbc.Open();
                                string theSQL = "SELECT a.accountnameid, count(*) as Tenants, coalesce(b.Tenants, 0) as ReportingTenants FROM crbdb.mt_crmtenants a LEFT OUTER JOIN (SELECT accountnameid, count(*) as Tenants FROM crbdb.mt_crmtenants WHERE (reporting = 'Reporting') GROUP BY accountnameid) b ON a.accountnameid = b.accountnameid GROUP BY accountnameid;";
                                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                {
                                    dbcc.CommandType = CommandType.Text;
                                    using (MySqlDataAdapter dba = new MySqlDataAdapter(dbcc))
                                    {
                                        dba.Fill(TenantRecords);
                                    }
                                }
                            }
                                
                            while (!EOF)
                            {
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.GetAccount);
                                if (ZM.GetAccounts(Page, out CRMFeedback))
                                {
                                    try
                                    {
                                        Accounts = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                    }
                                    catch (Exception ce)
                                    {
                                        if(ce.Message.Length > 32765)
                                        {
                                            EventLog.WriteEntry(string.Format("BOM Job Account Files::JSON Deserializing Error::{0} \r\n {1}", ce.Message.Substring(0,1200), CRMFeedback), EventLogEntryType.Error);

                                        }
                                        Accounts = null;
                                    }

                                    if (Accounts != null)
                                    {
                                        foreach (Account Landlord in Accounts.data)
                                        {
                                            if (string.IsNullOrEmpty(Landlord.Account_Status)) Landlord.Account_Status = string.Empty;

                                            //int TPage = 1;
                                            //bool TEOF = false;
                                            int NumberOfTenants = 0;
                                            int ReportingTenants = 0;
                                            string jsondata = string.Empty;
                                            //string Criteria = string.Format("Account_Name.id:equals:{0}", Landlord.id);

                                            //while (!TEOF)
                                            //{
                                            //    if (ZM.SearchContacts(Criteria, TPage, out CRMFeedback))
                                            //    {
                                            //        try
                                            //        {
                                            //            Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                            //        }
                                            //        catch (Exception ce)
                                            //        {
                                            //            EventLog.WriteEntry(string.Format("BOM Job Account Files Tenants::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                            //            Tenants = null;
                                            //        }

                                            //        if (Tenants != null)
                                            //        {
                                            //            foreach (Contact Tenant in Tenants.data)
                                            //            {
                                            //                if (string.IsNullOrEmpty(Tenant.Reporting)) Tenant.Reporting = string.Empty;
                                            //                NumberOfTenants++;
                                            //                if (Tenant.Reporting.ToLower() == "reporting") ReportingTenants++;
                                            //            }
                                            //        }
                                            //        else
                                            //            TEOF = true;
                                            //    }
                                            //    else
                                            //        TEOF = true;
                                            //}
                                            if (TenantRecords.Rows.Count > 0)
                                            {
                                                foreach (DataRow dbr in TenantRecords.Rows)
                                                {
                                                    if (dbr[0].ToString() == Landlord.id)
                                                    {
                                                        NumberOfTenants = int.Parse(dbr[1].ToString());
                                                        ReportingTenants = int.Parse(dbr[2].ToString());
                                                        break;
                                                    }
                                                }
                                            }

                                            // Landlord_Error = "LL Status"
                                            if (NumberOfTenants == 0)
                                            {
                                                // Check for No Tenants and NOT '09. Cancelled'
                                                if (Landlord.Account_Status.ToLower() != "09. cancelled")
                                                {
                                                    if (string.IsNullOrEmpty(Landlord.Landlord_Error))
                                                    {
                                                        Landlord.Landlord_Error = "LL Status";
                                                    }
                                                    else
                                                    {
                                                        Landlord.Landlord_Error = Landlord.Landlord_Error + ",LL Status";
                                                    }
                                                    jsondata = "{ \"data\" : [ { \"Portal_Access\" : \"" + Landlord.Landlord_Error + "\" } ], \"trigger\":[] }";
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.UpdateAccount);
                                                    ZM.UpdateAccount(Landlord.id, jsondata);
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.AddNote);
                                                    ZM.AddNote("Account", Landlord.id, "BOM Job Error", "Landlord is not '09.Cancelled' and has No Tenants");
                                                }
                                            }
                                            else
                                            {
                                                // We have some Tentants
                                                // Check for 1 or more Tenants with 'Reporting=Reporting' and NOT '08. Completed'
                                                if (ReportingTenants > 0)
                                                {
                                                    if ((Landlord.Account_Status.ToLower() != "08. completed") && (Landlord.Account_Status.ToLower() != "10. reported fraud"))
                                                    {
                                                        if (string.IsNullOrEmpty(Landlord.Landlord_Error))
                                                        {
                                                            Landlord.Landlord_Error = "LL Status";
                                                        }
                                                        else
                                                        {
                                                            Landlord.Landlord_Error = Landlord.Landlord_Error + ",LL Status";
                                                        }
                                                        jsondata = "{ \"data\" : [ { \"Portal_Access\" : \"" + Landlord.Landlord_Error + "\" } ], \"trigger\":[] }";
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.UpdateAccount);
                                                        ZM.UpdateAccount(Landlord.id, jsondata);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessBOMJob", "CRM", APITracker.APICalls.AddNote);
                                                        ZM.AddNote("Account", Landlord.id, "BOM Job Error", "Landlord is not '08. Completed' or '10. Reported Fraud' and has Reporting Tenants");
                                                    }
                                                }
                                            }
                                        }

                                        if (Accounts.info.more_records)
                                            Page++;
                                        else
                                            EOF = true;
                                    }
                                    else
                                        EOF = true;
                                }
                                else
                                {
                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("BOM Job Account Files::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                    EOF = true;
                                }

                            } //while !EOF

                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("BOM Job Update Account Files Completed.", EventLogEntryType.Warning);

                        }
                        catch (Exception ce)
                        {
                            if(ce.Message.Length > 32765)
                            {
                                EventLog.WriteEntry(string.Format("CRBService::Process BOM Job Account Files Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message.Substring(0,1200), ce.StackTrace), EventLogEntryType.Error);

                            }
                        }
                        #endregion

                        if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Update Completed.", EventLogEntryType.Warning);

                        runStop = DateTime.Now;
                        TimeSpan Elapsed = runStop - runStart;

                        if (gTestRunBOMJob) WriteReportFooter(TestRunFile, recordsin, recordsupdated, recordswitherrors, recordswithouterrors, Elapsed); //WriteToLogFile(TestRunFile, "BOM Job Update Completed.");
                    }
                    catch (Exception ce)
                    {
                        if(ce.Message.Length > 32765)
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process BOM Job Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message.Substring(0,100), ce.StackTrace), EventLogEntryType.Error);
                            if (gTestRunBOMJob) WriteToLogFile(TestRunFile, string.Format("CRBService::Process BOM Job Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message.Substring(0,3200), ce.StackTrace));
                        }
                        else
                        {
                            EventLog.WriteEntry(string.Format("CRBService::Process BOM Job Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                        }
                        
                    }

                    lock (this.gBOMJobLock)
                    {
                        this.gTestRunBOMJob = false;
                        this.gBOMJobIsRunning = false;
                    }
                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGateA.WaitOne();
                    if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingBOMJob)
                    {
                        continueRunning = false;
                        if (gProcessBOMJobDebugging) EventLog.WriteEntry("BOM Job gStopProcessingBOMJob Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingBOMJob

        } // ProcessBOMJob
        private void ProcessWeeklyJob()
        {
            bool continueRunning = true;

            // Wait to start for the first time until a minute of 0, 15, 30, 45
            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGateB.WaitOne();
            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingWeeklyJob)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    lock (gWeeklyJobLock)
                    {
                        this.gWeeklyJobIsRunning = true;
                    }
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;
                    string ErrorLines = string.Empty;
                    List<string> ErrorItems = new List<string>();
                    int recordsin = 0;
                    int recordswithouterrors = 0;
                    int recordswitherrors = 0;
                    int recordsupdated = 0;
                    int entryrecordid = 0;
                    DateTime runStart = DateTime.MinValue;
                    DateTime runStop = DateTime.MinValue;
                    string TestRunFile = string.Format("C:\\IIS_App_Logs\\TestRuns\\WeeklyJob_{0:yyyyMMddHHmm}.log", DateTime.Now);
                    PaymentHistoryDate RunDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    PaymentHistoryDate RptDate = new PaymentHistoryDate(string.Format("{0:MMddyyyy}", DateTime.Now));
                    RptDate.DecrementDate();

                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Update Reporting Files Started.", EventLogEntryType.Warning);

                    using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                    {
                        dbc.Open();

                        string theSQL = string.Format("INSERT INTO crbdb.tt_weeklyjobentries (startstamp, logfilename, endstamp, finished) VALUES ('{0:yyyy-MM-dd HH:mm:ss}', '{1}', '0000-00-00 00:00:00', b'0');", DateTime.Now, Path.GetFileName(TestRunFile));
                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                        {
                            dbcc.CommandType = CommandType.Text;
                            dbcc.ExecuteNonQuery();
                        }

                        theSQL = "SELECT LAST_INSERT_ID()";
                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                        {
                            dbcc.CommandType = CommandType.Text;
                            using (MySqlDataReader dbr = dbcc.ExecuteReader())
                            {
                                if (dbr.HasRows)
                                {
                                    if (dbr.Read())
                                    {
                                        entryrecordid = dbr.GetInt32(0);
                                    }
                                }
                            }
                        }
                    }

                    if (gTestRunWeeklyJob) WriteReportHeader(TestRunFile, "Weekly Job");
                    runStart = DateTime.Now;

                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        ZohoSubscriptionManager ZS = new ZohoSubscriptionManager(this.gConnectionString, gSubscriptionOrganization, gSubscriptionSecret, gSubscriptionClientID);
                        ZS.UsingCRBServer = true;

                        ContactsFeedBack Tenants = null;
                        AccountsFeedBack Landlords = null;
#region Weekly Reporting Files Processing
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("(Reporting:equals:Reporting)OR(Contact_Status:equals:08. Reporting)", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(string.Format("Weekly Job Reporting Files::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job {0} Reporting Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        bool UpdateReporting = false;
                                        bool UpdateNextVerify = false;
                                        bool UpdateLandlordNextVerify = false;
                                        bool SetFileError = false;

                                        int fixableErrors = 0;
                                        int nonFixableErrors = 0;

                                        string FixedItems = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status)) Tenant.A_Rental_Lease_Status = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.B_Payment_Rating)) Tenant.B_Payment_Rating = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency)) Tenant.Date_of_First_Delinquency = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment)) Tenant.Date_of_Last_Payment = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_Closed)) Tenant.Date_Closed = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date)) Tenant.Rental_Obligation_Lease_Start_Date = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Verify)) Tenant.Last_Verify = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Payment_History)) Tenant.Payment_History = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Landlord)) Tenant.Monthly_Landlord = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Pending_Close)) Tenant.Pending_Close = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status)) Tenant.Renewal_Status = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_1)) Tenant.Renewal_Status_Yr_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_2)) Tenant.Renewal_Status_Yr_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_3)) Tenant.Renewal_Status_Yr_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Subscription)) Tenant.Monthly_Subscription = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = "No";
                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Balance)) Tenant.Rental_Lease_Balance = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Amount_Past_Due)) Tenant.Amount_Past_Due = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Street)) Tenant.Street = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.City)) Tenant.City = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.State1)) Tenant.State1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.First_Name)) Tenant.First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_First_Name)) Tenant.R1_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_First_Name)) Tenant.R2_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_First_Name)) Tenant.R3_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Name)) Tenant.Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_Last_Name)) Tenant.R1_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_Last_Name)) Tenant.R2_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_Last_Name)) Tenant.R3_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Lease_Relationship_Code)) Tenant.Rental_Lease_Relationship_Code = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_ECOA_Code)) Tenant.R1_ECOA_Code = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R21_ECOA_Code)) Tenant.R21_ECOA_Code = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_EOCA_Code)) Tenant.R3_EOCA_Code = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                        if ((string.IsNullOrEmpty(Tenant.Last_Batch) || string.IsNullOrEmpty(Tenant.Last_Batch_EQ)) || (HasCurrentOrCollectionProduct(Tenant.Reporting_Requested)))
                                        {
                                            if ((Tenant.A_Rental_Lease_Status != "DA") && (Tenant.A_Rental_Lease_Status != "DF"))
                                            {
                                                recordsin++;
                                                ErrorItems.Clear();

                                                PaymentHistoryDate CURD = new PaymentHistoryDate(DateTime.Now);
                                                PaymentHistoryDate DOFD = new PaymentHistoryDate(Tenant.Date_of_First_Delinquency);
                                                PaymentHistoryDate DCLS = new PaymentHistoryDate(Tenant.Date_Closed);
                                                PaymentHistoryDate RLSD = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
                                                PaymentHistoryDate DOLP = new PaymentHistoryDate(Tenant.Date_of_Last_Payment);

                                                // 2 tasks: email 5/4/2021 DOLP cannot be before date open  (see prev email), error and write note
                                                if (DOLP.IsValid && RLSD.IsValid)
                                                {
                                                    if (DOLP.CompareTo(RLSD) < 0)
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Date Of Last Payment is NOT after the Lease Start Date.");
                                                    }
                                                }

                                                // 2 tasks: email 5/4/2021 Sate can't be blank.  Error & write note if not. 
                                                if (string.IsNullOrEmpty(Tenant.State1))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("State is missing.");
                                                }
                                                else
                                                {
                                                    // Tech Projects 06.29 v1.2 >  Sate needs to be all caps, if not fix and write note.
                                                    string temp = Tenant.State1.ToUpper();
                                                    if (temp != Tenant.State1)
                                                    {
                                                        fixableErrors++;
                                                        ErrorItems.Add("State is not all caps. FIXED");
                                                        FixedItems += string.Format(", \"State1\":\"{0}\"", Tenant.State1.ToUpper());
                                                    }
                                                }

                                                // Tech Projects 06.29 v1.2 > City can't be blank
                                                if (string.IsNullOrEmpty(Tenant.City))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("City is missing.");
                                                }

                                                // 2 tasks: email 5/4/2021 If First Name is not Blank, then Last Name should not be blank either.  (Repeat for each roommate)  error and write note 
                                                if ((IsEmpty(Tenant.First_Name) && !IsEmpty(Tenant.Last_Name)) || (!IsEmpty(Tenant.First_Name) && IsEmpty(Tenant.Last_Name)))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("Tenant First/Last Name is missing.");
                                                }
                                                if ((IsEmpty(Tenant.R1_First_Name) && !IsEmpty(Tenant.R1_Last_Name)) || (!IsEmpty(Tenant.R1_First_Name) && IsEmpty(Tenant.R1_Last_Name)))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("Roommate 1 First/Last Name is missing.");
                                                }
                                                if ((IsEmpty(Tenant.R2_First_Name) && !IsEmpty(Tenant.R2_Last_Name)) || (!IsEmpty(Tenant.R2_First_Name) && IsEmpty(Tenant.R2_Last_Name)))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("Roommate 2 First/Last Name is missing.");
                                                }
                                                if ((IsEmpty(Tenant.R3_First_Name) && !IsEmpty(Tenant.R3_Last_Name)) || (!IsEmpty(Tenant.R3_First_Name) && IsEmpty(Tenant.R3_Last_Name)))
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("Roommate 3 First/Last Name is missing.");
                                                }

                                                // 2 tasks: email 5/4/2021 If only one tenant, then 0037. Rental/Lease Relationship Code should be 1, if not, error and write note  
                                                //   If two tenants, then  0037. Rental/Lease Relationship Code should be 2 & R2 - ECOA Code should be 2, if not error and write note.  If roommate 2 or 3 are also listed, then their ecoa codes should also be 2.    Don't Fix.
                                                int numberOfTenants = TenantCount(Tenant);
                                                if (numberOfTenants == 1)
                                                {
                                                    if (Tenant.Rental_Lease_Relationship_Code != "1")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Only 1 Tenant BUT 0037. Rental/Lease Relationship Code is NOT '1'.");
                                                    }
                                                }
                                                else
                                                {
                                                    if (numberOfTenants >= 2)
                                                    {
                                                        if (Tenant.Rental_Lease_Relationship_Code != "2")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("2 or more Tenants BUT 0037. Rental/Lease Relationship Code is NOT '2'.");
                                                        }

                                                        if ((!IsEmpty(Tenant.R1_First_Name)) && (!IsEmpty(Tenant.R1_Last_Name)))
                                                        {
                                                            if (Tenant.R1_ECOA_Code != "2")
                                                            {
                                                                if (Tenant.R1_ECOA_Code.ToLower() != "z")
                                                                {
                                                                    nonFixableErrors++;
                                                                    ErrorItems.Add("2 or more Tenants BUT Roommate 1 Rental/Lease Relationship Code is NOT '2'.");
                                                                }
                                                            }
                                                        }

                                                        if ((!IsEmpty(Tenant.R2_First_Name)) && (!IsEmpty(Tenant.R2_Last_Name)))
                                                        {
                                                            if (Tenant.R21_ECOA_Code != "2")
                                                            {
                                                                if (Tenant.R21_ECOA_Code.ToLower() != "z")
                                                                {
                                                                    nonFixableErrors++;
                                                                    ErrorItems.Add("2 or more Tenants BUT Roommate 2 Rental/Lease Relationship Code is NOT '2'.");
                                                                }
                                                            }
                                                        }

                                                        if ((!IsEmpty(Tenant.R3_First_Name)) && (!IsEmpty(Tenant.R3_Last_Name)))
                                                        {
                                                            if (Tenant.R3_EOCA_Code != "2")
                                                            {
                                                                if (Tenant.R3_EOCA_Code.ToLower() != "z")
                                                                {
                                                                    nonFixableErrors++;
                                                                    ErrorItems.Add("2 or more Tenants BUT Roomate 3 Rental/Lease Relationship Code is NOT '2'.");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if ((Tenant.A_Rental_Lease_Status == "71") ||
                                                    (Tenant.A_Rental_Lease_Status == "78") ||
                                                    (Tenant.A_Rental_Lease_Status == "80") ||
                                                    (Tenant.A_Rental_Lease_Status == "82") ||
                                                    (Tenant.A_Rental_Lease_Status == "83") ||
                                                    (Tenant.A_Rental_Lease_Status == "84"))
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Delinquent Tenant has a missing Date of First Delinquency.");
                                                    }
                                                }
                                                // 2
                                                // 3/25/2021 in house meeting add this per Gregg
                                                if (Tenant.A_Rental_Lease_Status == "13")
                                                {
                                                    if (Tenant.B_Payment_Rating != "0")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Lease status is '13' BUT 17B. Payment Rating is NOT '0'.");
                                                    }

                                                    if (Tenant.Rental_Lease_Balance != "0")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Lease status is '13' BUT 0021 Rental Lease Balance is NOT '0'.");
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(Tenant.Rental_Lease_Balance))
                                                {
                                                    int rlb = 0;
                                                    int.TryParse(Tenant.Rental_Lease_Balance, out rlb);
                                                    if (rlb > 0)
                                                    {
                                                        if (Tenant.Rental_Lease_Balance != Tenant.Amount_Past_Due)
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Rental Lease Balance is greater than 0, BUT Amount Past Due is NOT equal to the Rental lease Balance.");
                                                        }
                                                    }
                                                }

                                                if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                {
                                                    //- Verify that files with "current" in Reporting Requested have a (Tenant) next verify date that is in the current month AND monthly landlord = yes. 
                                                    //  If (Contact) Monthly Landlord = No, then check (Account) for 1 monthly email = yes 
                                                    //  If (Account) for 1 monthly email = No, then  Batch Error = Yes and  write note 
                                                    //  Notes: If you have to fix Next Verify, then If today is March, then next verify must be in March (set for 5th of month).
                                                    string AccountMonthlyEmail = string.Empty;
                                                    string TenantMonthlyEmail = Tenant.Monthly_Landlord.ToLower();
                                                    string AccountNextVerify = string.Empty;

                                                    if (Tenant.Account_Name != null)
                                                    {
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.GetAccount);
                                                        if (ZM.GetAccount(Tenant.Account_Name.id, out CRMFeedback))
                                                        {
                                                            try
                                                            {
                                                                Landlords = JsonConvert.DeserializeObject<AccountsFeedBack>(CRMFeedback);
                                                            }
                                                            catch (Exception ce)
                                                            {
                                                                EventLog.WriteEntry(string.Format("Weekly Job Reporting Files::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                                                Landlords = null;
                                                            }

                                                            if (Landlords != null)
                                                            {
                                                                Account Landlord = Landlords.data[0];

                                                                if (Landlord != null)
                                                                {
                                                                    if (string.IsNullOrEmpty(Landlord.Account_Status)) Landlord.Account_Status = string.Empty;
                                                                    if (string.IsNullOrEmpty(Landlord.Monthly_Email)) Landlord.Monthly_Email = string.Empty;
                                                                    if (string.IsNullOrEmpty(Landlord.Next_Verify)) Landlord.Next_Verify = string.Empty;

                                                                    AccountMonthlyEmail = Landlord.Monthly_Email.ToLower();
                                                                    AccountNextVerify = Landlord.Next_Verify;

                                                                    // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                                                    if (Landlord.Account_Status.ToLower() != "08. completed")
                                                                    {
                                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                        cu.Append("{ ");
                                                                        cu.Append("\"Account_Status\": \"08. Completed\"");
                                                                        cu.Append(" }");
                                                                        cu.Append("], \"trigger\":[]}");

                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateAccount);
                                                                        if (!ZM.UpdateAccount(Tenant.Account_Name.id, cu.ToString()))
                                                                        {
                                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Account Status Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.Account_Name.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                        }
                                                                        else
                                                                        {
                                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Account Status Updated.", Tenant.Account_Name.id), EventLogEntryType.Warning);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (TenantMonthlyEmail == "yes")
                                                    {
                                                        if (AccountMonthlyEmail == "yes")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Both Tenant Monthly Landlord AND Landlord Monthly Email are 'Yes'.");
                                                        }
                                                        else
                                                        {
                                                            // Tenant Next Verify
                                                            if (string.IsNullOrEmpty(Tenant.Last_Verify))
                                                                UpdateNextVerify = true;
                                                            else
                                                            {
                                                                PaymentHistoryDate NXVD = new PaymentHistoryDate(Tenant.Last_Verify);
                                                                if ((NXVD.PayYear <= DateTime.Now.Year) && (NXVD.PayMonth < DateTime.Now.Month))
                                                                {
                                                                    UpdateNextVerify = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (AccountMonthlyEmail != "yes")
                                                        {
                                                            if (Tenant.Pending_Close.ToLower() != "yes")
                                                            {
                                                                nonFixableErrors++;
                                                                ErrorItems.Add("Reporting Requested contains 'Current' BUT Monthly Landlord is NOT 'Yes' AND Landlord Monthly Email is NOT 'Yes'.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            // Landlord Next Verify
                                                            if (string.IsNullOrEmpty(AccountNextVerify))
                                                                UpdateLandlordNextVerify = true;
                                                            else
                                                            {
                                                                PaymentHistoryDate NXVD = new PaymentHistoryDate(AccountNextVerify);
                                                                if ((NXVD.PayYear <= DateTime.Now.Year) && (NXVD.PayMonth < DateTime.Now.Month))
                                                                {
                                                                    UpdateLandlordNextVerify = true;
                                                                }
                                                            }

                                                            if (UpdateLandlordNextVerify)
                                                            {
                                                                if (!gTestRunWeeklyJob)
                                                                {
                                                                    StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                                    cu.Append("{ ");
                                                                    cu.Append(string.Format("\"Next_Verify\": \"{1:0000}-{0:00}-05\"", DateTime.Now.Month, DateTime.Now.Year));
                                                                    cu.Append(" }");
                                                                    cu.Append("], \"trigger\":[]}");
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateAccount);
                                                                    if (!ZM.UpdateAccount(Tenant.Account_Name.id, cu.ToString()))
                                                                    {
                                                                        if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Account Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.Account_Name.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                                    }
                                                                    else
                                                                    {
                                                                        if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Account Updated.", Tenant.Account_Name.id), EventLogEntryType.Warning);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //- Verify that files with "current" in Reporting Requested  AND 17a = 11, then have DOLP in the past month, if not Can we use 'current logic' quickly, if not then set Batch Error.  batch error & write note 
                                                    if (Tenant.A_Rental_Lease_Status == "11")
                                                    {
                                                        PaymentHistoryDate PrevMonth = new PaymentHistoryDate(DateTime.Now);
                                                        PrevMonth.DecrementDate();

                                                        if (DOLP.CompareYearMonthOnlyTo(PrevMonth) != 0) //if (DOLP.CompareTo(CURD) >= 0)
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested has 'Current' and the lease status is '11' BUT Date of Last Payment is NOT in the previous month.*");
                                                        }

                                                        if (!string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency))
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("The lease status is '11' BUT Date of First Delinquency is NOT blank.*");
                                                        }
                                                    }

                                                    //- If reporting requested has "current", make sure 17a = 11, or 71 - 84 Can we use 'current logic' quickly, if not then set Batch Error.  batch error & write note
                                                    if ((Tenant.A_Rental_Lease_Status != "11") &&
                                                    (Tenant.A_Rental_Lease_Status != "71") &&
                                                    (Tenant.A_Rental_Lease_Status != "78") &&
                                                    (Tenant.A_Rental_Lease_Status != "80") &&
                                                    (Tenant.A_Rental_Lease_Status != "82") &&
                                                    (Tenant.A_Rental_Lease_Status != "83") &&
                                                    (Tenant.A_Rental_Lease_Status != "84"))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Reporting Requested has 'Current', but Lease Status is NOT 11, 71, 78, 80, 82, 83, or 84.*");
                                                    }

                                                    // Master tech Doc V 1_20 If reporting requested has current in it, and the last batch date is not in the current month, error & write note, if its blank or in the current ignore (See Paulette Walton)
                                                    if (!string.IsNullOrEmpty(Tenant.Last_Batch))
                                                    {
                                                        PaymentHistoryDateEx DOLB = new PaymentHistoryDateEx(Tenant.Last_Batch);
                                                        if (DOLB.CompareYearMonthOnlyTo(CURD) != 0)
                                                        {
                                                            if (Tenant.Pending_Close.ToLower() != "delinquent automation")
                                                            {
                                                                nonFixableErrors++;
                                                                ErrorItems.Add("Reporting Requested has Current Product, however, Last Batch Date is NOT in the current month.");
                                                            }
                                                        }
                                                    }

                                                    // Master tech Doc V 1_20 If reporting requested has current in it, and dolp is not in the past month, then error & write note  (See Paulette Walton) 
                                                    // removed per Gregg
                                                    // Added back in 5/4 2tasks:BOM Change email per Gregg but adding pending close test
                                                    if (Tenant.Pending_Close.ToLower() != "delinquent automation")
                                                    {
                                                        PaymentHistoryDate PreviousMonth = new PaymentHistoryDate(DateTime.Now);
                                                        PreviousMonth.DecrementDate();

                                                        if (DOLP.CompareYearMonthOnlyTo(PreviousMonth) != 0)
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested has Current Product, however, Date of Last Payment is NOT in the previous month.");
                                                        }
                                                    }

                                                    // Master tech Doc V 1_20 If reporting requested has current in it, and there is a date closed, error & write note (See Paulette Walton)
                                                    if (!string.IsNullOrEmpty(Tenant.Date_Closed))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Reporting Requested has Current Product, however, Date Closed is NOT BLANK.");
                                                    }

                                                    // Master tech Doc V 1_20 If reporting requested has current in it , and the next verify date is blank on the tenant side and the landlord side, error & write note  (See Paulette Walton) 
                                                    if (string.IsNullOrEmpty(Tenant.Last_Verify) && string.IsNullOrEmpty(AccountNextVerify))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Reporting Requested has Current Product, however, both Tenant and Landlord Next Verify Dates are BLANK.");
                                                    }

                                                    // Master tech Doc V 1_20 If reporting requested has current in it, verify 17b is blank, if not, error and write note  (See Paulette Walton)
                                                    if (!string.IsNullOrEmpty(Tenant.B_Payment_Rating))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Reporting Requested has Current Product, however, 17b Payment Rating is NOT BLANK.");
                                                    }

                                                    // 3/25/2021 inhouse meeting - added this check per Gregg
                                                    if (Tenant.Pending_Close.ToLower() != "yes")
                                                    {
                                                        // Master tech Doc V 1_20 If reporting requested has current in it, Year 1 status should not equal Cancelled Sub / Pymts
                                                        if (Tenant.Renewal_Status_Yr_1.ToLower() == "cancelled sub / pymts")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested has Current Product, however, Original Status Yr 1 is 'Cancelled Sub / Pymts'.");
                                                        }
                                                        // 3/25/2021 inhouse meeting - added this check per Gregg
                                                        if (Tenant.Renewal_Status_Yr_2.ToLower() == "cancelled sub / pymts")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested has Current Product, however, Original Status Yr 2 is 'Cancelled Sub / Pymts'.");
                                                        }
                                                        // 3/25/2021 inhouse meeting - added this check per Gregg
                                                        if (Tenant.Renewal_Status_Yr_3.ToLower() == "cancelled sub / pymts")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested has Current Product, however, Original Status Yr 3 is 'Cancelled Sub / Pymts'.");
                                                        }
                                                    }

                                                }

                                                if (string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date) || !RLSD.IsValid)
                                                {
                                                    nonFixableErrors++;
                                                    ErrorItems.Add("Lease Start Date is missing or invalid.");
                                                }

                                                if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment) || !DOLP.IsValid)
                                                {
                                                    // Master tech Doc V 1_20 Error: Date of last payment is blank or missing
                                                    // Fix: If reporting has current in it, then update the DOLP to the 5th of the previous month, 
                                                    // or the lease start date, if the lease start date is in the previous month.
                                                    if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                    {
                                                        PaymentHistoryDate PreviousMonth = new PaymentHistoryDate(DateTime.Now);
                                                        PreviousMonth.DecrementDate();
                                                        if (RLSD.CompareYearMonthOnlyTo(PreviousMonth) == 0)
                                                            DOLP = new PaymentHistoryDate(string.Format("{0:00}{1:00}{2:0000}", RLSD.PayMonth, RLSD.PayDay, RLSD.PayYear));
                                                        else
                                                        {
                                                            DOLP = new PaymentHistoryDate(string.Format("{0:00}{1:00}{2:0000}", PreviousMonth.PayMonth, 5, PreviousMonth.PayYear));
                                                        }
                                                        fixableErrors++;
                                                        ErrorItems.Add("Date of Last Payment is missing or invalid. FIXED");
                                                        FixedItems += string.Format(", \"Date_of_Last_Payment\":\"{0:00}{1:00}{2:0000}\"", DOLP.PayMonth, DOLP.PayDay, DOLP.PayYear);
                                                    }
                                                    else
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Date of Last Payment is missing or invalid.");
                                                    }
                                                }
                                                else
                                                {
                                                    //- If  DOLP is in current or future month, = batch error  & write Note
                                                    if (DOLP.PayYear >= DateTime.Now.Year)
                                                    {
                                                        if (DOLP.PayMonth >= DateTime.Now.Month)
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Date of Last Payment is in the current or future month.");
                                                        }
                                                    }

                                                    //-   Verify DOLP is after lease start date, if not = batch error & write note
                                                    if (DOLP.CompareTo(RLSD) < 0)
                                                    {
                                                        // Master tech Doc V 1_20 Error: Date of Last Payment is NOT after Lease Start Date
                                                        // Fix: If reporting requested has current, Update Date of last payment to the 5th of the previous month, or the lease start date, whichever is later.
                                                        // Example: Yvonne Duhon
                                                        if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                        {
                                                            PaymentHistoryDate PreviousMonth = new PaymentHistoryDate(DateTime.Now);
                                                            PreviousMonth.DecrementDate();
                                                            if (RLSD.CompareYearMonthOnlyTo(PreviousMonth) == 0)
                                                            {
                                                                if (RLSD.PayDay > 5)
                                                                    DOLP = new PaymentHistoryDate(string.Format("{0:00}{1:00}{2:0000}", RLSD.PayMonth, RLSD.PayDay, RLSD.PayYear));
                                                                else
                                                                    DOLP = new PaymentHistoryDate(string.Format("{0:00}{1:00}{2:0000}", RLSD.PayMonth, 5, RLSD.PayYear));
                                                            }
                                                            else
                                                            {
                                                                DOLP = new PaymentHistoryDate(string.Format("{0:00}{1:00}{2:0000}", PreviousMonth.PayMonth, 5, PreviousMonth.PayYear));
                                                            }
                                                            fixableErrors++;
                                                            ErrorItems.Add("Date of Last Payment is missing or invalid. FIXED");
                                                            FixedItems += string.Format(", \"Date_of_Last_Payment\":\"{0:00}{1:00}{2:0000}\"", DOLP.PayMonth, DOLP.PayDay, DOLP.PayYear);
                                                        }
                                                        else
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Date of Last Payment is NOT after Lease Start Date.");
                                                        }
                                                    }
                                                }

                                                //- If 17a = 11, then make sure date closed is blank and 17b is blank Can we use 'current logic' quickly, if not then set Batch Error.  batch error & write note 
                                                if (Tenant.A_Rental_Lease_Status == "11")
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Date_Closed))
                                                    {
                                                        // Master Tech Doc V 1_20 Error: Lease Status is '11' BUT Date Closed IS NOT Blank.*
                                                        // Fix: If reporting requested has past only, and still live in home is no, then update 17a lease status to 13
                                                        // Example: Terrence McClain
                                                        if (HasPastOnlyProduct(Tenant.Reporting_Requested))
                                                        {
                                                            if (Tenant.Still_Live_in_Home.ToLower() == "no")
                                                            {
                                                                fixableErrors++;
                                                                ErrorItems.Add("Lease Status is '11' BUT Date Closed IS NOT Blank. FIXED");
                                                                FixedItems += ", \"A_Rental_Lease_Status\":\"13\"";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Lease Status is '11' BUT Date Closed IS NOT Blank.*");
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Tenant.B_Payment_Rating))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Lease Status is '11' BUT 17b Payment Rating IS NOT Blank.*");
                                                    }
                                                }

                                                //-  If Reporting is Reporting but Status is not 08 Reporting, then batch error & write note 
                                                if (Tenant.Reporting.ToLower() == "reporting")
                                                {
                                                    if (Tenant.Contact_Status != "08. Reporting")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Contact Status is NOT '08.Reporting'.");
                                                    }
                                                }

                                                //- If Status is 08 Reporting and Reporting is Not Reporting, then set Reporting is Reporting.
                                                if (Tenant.Contact_Status == "08. Reporting")
                                                {
                                                    if (Tenant.Reporting != "Reporting")
                                                    {
                                                        UpdateReporting = true;
                                                    }
                                                }

                                                if (HasClosedOrCollectionProduct(Tenant.Reporting_Requested))
                                                {
                                                    if (string.IsNullOrEmpty(Tenant.Date_Closed) || !DCLS.IsValid)
                                                    {
                                                        ErrorItems.Add("Date Closed is missing or invalid.");
                                                    }
                                                    else
                                                    {
                                                        if (HasCollectionProduct(Tenant.Reporting_Requested))
                                                        {
                                                            //- date of first delinquency must be before date closed (collection account) batch error & write note  
                                                            if (DOFD.CompareTo(DCLS) > 0)
                                                            {
                                                                ErrorItems.Add("Date of First Delinquency is NOT before Date Closed.");
                                                            }

                                                            //- date of first delinquency must be after Lease Start Date (collection account) batch error & write note  
                                                            if (DOFD.CompareTo(RLSD) < 0)
                                                            {
                                                                ErrorItems.Add("Date of First Delinquency is NOT after Lease Start Date.");
                                                            }
                                                        }

                                                        // Date Closed should not be before Lease Start Date batch error & write note
                                                        if (DCLS.IsValid)
                                                        {
                                                            if (DCLS.CompareTo(RLSD) < 0)//if (DCLS.CompareTo(RLSD) > 0)
                                                            {
                                                                ErrorItems.Add("Date Closed is NOT after Lease Start Date.");
                                                            }
                                                        }
                                                    }

                                                    // 3/25/2021 in house meeting added per Gregg
                                                    if (!HasCollectionProduct(Tenant.Reporting_Requested))
                                                    {
                                                        int apd = 0;
                                                        int.TryParse(Tenant.Amount_Past_Due, out apd);
                                                        if (apd > 0)
                                                        {
                                                            if (Tenant.A_Rental_Lease_Status != "97")
                                                            {
                                                                nonFixableErrors++;
                                                                ErrorItems.Add("Amount Past Due is greater than 0, BUT 17a is NOT '97'.");
                                                            }
                                                        }
                                                    }
                                                }

                                                // 17b should be blank if 17a = 97 batch error & write note 
                                                if (Tenant.A_Rental_Lease_Status == "97")
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.B_Payment_Rating))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("17a is 97 but 17b is NOT blank.");
                                                    }
                                                }

                                                // Master tech Doc V 1_20 Subscription Check - if Original Status Yr 1 = Subscription, then Monthly Sub = yes  (check other years too)  error & write note 
                                                if ((Tenant.Renewal_Status_Yr_1 == "Subscription") || (Tenant.Renewal_Status_Yr_2 == "Subscription") || (Tenant.Renewal_Status_Yr_3 == "Subscription"))
                                                {
                                                    if (Tenant.Monthly_Subscription.ToLower() != "yes")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Renewal Status Yr 1, 2, and/or 3 are 'Subscription', however, Monthly_Subscription is NOT 'Yes'.");
                                                    }
                                                }

                                                // Tech Projects 06.29 v1.2 > if monthly sub = yes.. then year 1 status = subscription and the reverse if not error 
                                                if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                {
                                                    if (Tenant.Renewal_Status_Yr_1 != "Subscription")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Monthly_Subscription is 'Yes', however, Renewal Status Yr 1 is not 'Subscription'.");
                                                    }
                                                }

                                                // Master tech Doc V 1_20 Subscription Check - if Original Status Yr 1 = Subscription Yearly, then Monthly Sub = No  (check other years too)  error & write note 
                                                if ((Tenant.Renewal_Status_Yr_1 == "Subscription Yearly") || (Tenant.Renewal_Status_Yr_2 == "Subscription Yearly") || (Tenant.Renewal_Status_Yr_3 == "Subscription Yearly"))
                                                {
                                                    if (Tenant.Monthly_Subscription.ToLower() != "no")
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Renewal Status Yr 1, 2, and/or 3 are 'Subscription Yearly', however, Monthly_Subscription is NOT 'No'.");
                                                    }
                                                }

                                                // The following is completely replaced by logic specified in Email from Gregg
                                                // Subject: Weekyl Batch Enhancements v1.00 dated Sat 1:22PM MST 12/10/2022
                                                // MOD ID: cep12102022
                                                //// Master tech Doc V 1_20 Subscription Check - If Monthly Sub = Yes, check Zoho Subs to make sure they have an active Sub error & write note 
                                                //if (Tenant.Monthly_Subscription.ToLower() == "yes")
                                                //{
                                                //    if (string.IsNullOrEmpty(Tenant.Monthly_Sub_Number) && string.IsNullOrEmpty(Tenant.Subscription_Number)) //if (string.IsNullOrEmpty(Tenant.Subscription_Number))
                                                //    {
                                                //        nonFixableErrors++;
                                                //        //ErrorItems.Add("Monthly_Subscription is 'Yes', however, Subscription_Number is BLANK.");
                                                //        ErrorItems.Add("Monthly_Subscription is 'Yes', however, Monthly_Sub_Number and Subscription_Number are BLANK.");
                                                //    }
                                                //    else
                                                //    {
                                                //        //string SubscriptionJSON = ZS.GetSubscription(Tenant.Subscription_Number);
                                                //        if (!string.IsNullOrEmpty(Tenant.Monthly_Sub_Number))
                                                //        {
                                                //            string SubscriptionJSON = ZS.GetSubscription(Tenant.Monthly_Sub_Number);
                                                //            if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                //            {
                                                //                SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                //                if ((Sub.subscription.status.ToLower() != "live") &&
                                                //                    (Sub.subscription.status.ToLower() != "trial") &&
                                                //                    (Sub.subscription.status.ToLower() != "dunning") &&
                                                //                    (Sub.subscription.status.ToLower() != "unpaid") &&
                                                //                    (Sub.subscription.status.ToLower() != "non_renewing") &&
                                                //                    (Sub.subscription.status.ToLower() != "future"))
                                                //                {
                                                //                    nonFixableErrors++;
                                                //                    ErrorItems.Add(string.Format("Monthly_Subscription is 'Yes', however, the Subscription is NOT in 'Active' state. Current State is {0}.", Sub.subscription.status));
                                                //                }
                                                //            }
                                                //        }

                                                //        if (!string.IsNullOrEmpty(Tenant.Subscription_Number))
                                                //        {
                                                //            string SubscriptionJSON = ZS.GetSubscription(Tenant.Subscription_Number);
                                                //            if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                //            {
                                                //                SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                //                if ((Sub.subscription.status.ToLower() != "live") &&
                                                //                    (Sub.subscription.status.ToLower() != "trial") &&
                                                //                    (Sub.subscription.status.ToLower() != "dunning") &&
                                                //                    (Sub.subscription.status.ToLower() != "unpaid") &&
                                                //                    (Sub.subscription.status.ToLower() != "non_renewing") &&
                                                //                    (Sub.subscription.status.ToLower() != "future"))
                                                //                {
                                                //                    nonFixableErrors++;
                                                //                    ErrorItems.Add(string.Format("Monthly_Subscription(Tenant.Subscription_Number) is 'Yes', however, the Subscription is NOT in 'Active' state. Current State is {0}.", Sub.subscription.status));
                                                //                }
                                                //            }
                                                //        }
                                                //    }
                                                //}
                                                if ((Tenant.Contact_Status.ToLower() != "09. inactive") && (Tenant.Contact_Status.ToLower() != "10. cancelled"))
                                                {
                                                    if (Tenant.Pending_Close.ToLower() != "yes")
                                                    {
                                                        if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                        {
                                                            if (Tenant.Renewal_Status.ToLower() == "subscription")
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Monthly_Sub_Number))
                                                                {
                                                                    nonFixableErrors++;
                                                                    SetFileError = true;
                                                                    ErrorItems.Add("Renewal Status = Subscription, but Monthly Sub Number is Blank.");
                                                                }
                                                                else
                                                                {
                                                                    string SubscriptionJSON = ZS.GetSubscription(Tenant.Monthly_Sub_Number);
                                                                    if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                                    {
                                                                        SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                                        if (Sub.subscription.status.ToLower() == "cancelled")
                                                                        {
                                                                            nonFixableErrors++;
                                                                            SetFileError = true;
                                                                            ErrorItems.Add("Renewal Status = Subscription, but Subscription in ZoHo is not Active.");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else if (Tenant.Renewal_Status.ToLower() == "subscription yearly")
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.Annual_Sub_Number))
                                                                {
                                                                    nonFixableErrors++;
                                                                    SetFileError = true;
                                                                    ErrorItems.Add("Renewal Status = Subscription Yearly, but Annual Sub Number is Blank.");
                                                                }
                                                                else
                                                                {
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "Subscriptions", APITracker.APICalls.GetSubscription);
                                                                    string SubscriptionJSON = ZS.GetSubscription(Tenant.Annual_Sub_Number);
                                                                    if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                                    {
                                                                        SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                                        if (Sub.subscription.status.ToLower() == "cancelled")
                                                                        {
                                                                            nonFixableErrors++;
                                                                            SetFileError = true;
                                                                            ErrorItems.Add("Renewal Status = Subscription Yearly, but Subscription in ZoHo is not Active.");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else if (Tenant.Renewal_Status.ToLower() == "paid")
                                                            {
                                                                if (!string.IsNullOrEmpty(Tenant.Annual_Sub_Number) || !string.IsNullOrEmpty(Tenant.Monthly_Sub_Number))
                                                                {
                                                                    nonFixableErrors++;
                                                                    SetFileError = true;
                                                                    ErrorItems.Add("Renewal Status = Paid, but Annual Sub Number or Monthly Sub Number  is not Blank.");
                                                                }

                                                                if (string.IsNullOrEmpty(Tenant.Landlord_From_Tenant) || (Tenant.Landlord_From_Tenant.ToLower() == "yes"))
                                                                {
                                                                    nonFixableErrors++;
                                                                    SetFileError = true;
                                                                    ErrorItems.Add("Renewal Status = Paid, but  Landlord from Tenant is not No.");
                                                                }
                                                            }
                                                            else if ((Tenant.Renewal_Status.ToLower() == "past only") || (string.IsNullOrEmpty(Tenant.Renewal_Status)))
                                                            {
                                                                nonFixableErrors++;
                                                                SetFileError = true;
                                                                ErrorItems.Add("Renewal Status = Blank or Past Only, but Reporting Requested contains 'current'.");
                                                            }
                                                        }
                                                    }
                                                }
                                                // END OF MOD ID: cep12102022

                                                // Master tech Doc V 1_20 If Pending Close is No or Blank then Close file on date should be blank  error & write note
                                                if ((Tenant.Pending_Close.ToLower() == "No") || (string.IsNullOrEmpty(Tenant.Pending_Close)))
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Date_to_Close))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Pending_Close is BLANK or 'No', however, Close_File_On is NOT BLANK.");
                                                    }
                                                }

                                                // Master tech Doc V 1_20 If reporting requested has past only, then monthly sub should = no, and originally status yr1 should equal Paid, or Free
                                                if (HasPastOnlyProduct(Tenant.Reporting_Requested))
                                                {
                                                    if (!string.IsNullOrEmpty(Tenant.Monthly_Subscription) && (Tenant.Monthly_Subscription.ToLower() != "no"))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("Reporting Requested is a 'Past Only' product, however, Monthly_Subscription is neither BLANK nor 'No'.");
                                                    }
                                                    else
                                                    {
                                                        if ((Tenant.Renewal_Status_Yr_1.ToLower() != "paid") && (Tenant.Renewal_Status_Yr_1.ToLower() != "free"))
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Reporting Requested is a 'Past Only' product AND Monthly Subscription is 'Yes', however, Renewal Status Yr 1 is neither 'Paid' nor 'Free'.");
                                                        }
                                                    }
                                                }

                                                // 2 tasks: email date 5/4 Double check 0012, 0016  & 0015 are the same amount - logic:  17a is 05 or 11 or 13 then 0012=0016 = 0015).  Error & write note if not.  Don't Fix. 
                                                if ((Tenant.A_Rental_Lease_Status == "05") || (Tenant.A_Rental_Lease_Status == "11") || (Tenant.A_Rental_Lease_Status == "13"))
                                                {
                                                    if ((Tenant.Total_Rental_Obligation_Amount != Tenant.Rental_Lease_Payment_Amount) || (Tenant.Total_Rental_Obligation_Amount != Tenant.Rental_Lease_Payment_Amount_Confirmed))
                                                    {
                                                        if (Tenant.Pending_Close.ToLower() != "delinquent current")
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Rental Lease Status is 05, 11, or 13 BUT 0012, 0015, and 0016 are not all the same.");
                                                        }
                                                    }
                                                }

                                                //
                                                // Validate tradeline
                                                //
                                                TradeLineProvider PHV = new TradeLineProvider(Tenant.Payment_History);
                                                if (!PHV.IsValid)
                                                {
                                                    bool firstitem = true;
                                                    string TLErrorLines = "Tradeline is invalid (";
                                                    foreach (string Error in PHV.Failures)
                                                    {
                                                        if (firstitem)
                                                        {
                                                            TLErrorLines += Error;
                                                            firstitem = false;
                                                        }
                                                        else
                                                            TLErrorLines += ", " + Error;
                                                    }
                                                    TLErrorLines += ")";

                                                    ErrorItems.Add(TLErrorLines);
                                                    nonFixableErrors++;
                                                }
                                                else
                                                {
                                                    //------------------------------------------------------------------------------------------------------------------------------------
                                                    //-  If either last batch TU or EQ date is blank, make sure tradeline is in current month, if not advance
                                                    //-  Adv w/ 0, G or B.   Can we use 'current logic' quickly, if not then set Batch Error.  batch error & write note 
                                                    //-------------------------------------------------------------------------------------------------------------------------------------- 
                                                    if (string.IsNullOrEmpty(Tenant.Last_Batch) || string.IsNullOrEmpty(Tenant.Last_Batch_EQ))
                                                    {
                                                        if (PHV.IsStale(DateTime.Now.Year, DateTime.Now.Month))
                                                        {
                                                            if (TradeLineProvider.MonthsOutOfDate(PHV.ReportingDate, ((DateTime.Now.Year * 100) + DateTime.Now.Month)) == 1)
                                                            {
                                                                // Master Tech Doc V 1_20 Error:  Tradeline is 1 month stale: Fix: If reporting has current in it, then update to current month & Drop last character and add a 0.
                                                                if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                                {
                                                                    PHV.UpdateHistoryByMonths(1, '0');
                                                                    FixedItems += string.Format(", \"Payment_History\":\"{0}\"", PHV.ToString());
                                                                }

                                                                // Master Tech Doc V 1_20 Error:  Tradeline is 1 month stale: 
                                                                if (HasPastOnlyProduct(Tenant.Reporting_Requested))
                                                                {
                                                                    // Fix: If reporting has past only in it and still live in home = yes, then update tradeline to current month &Drop last character and add a 0 first character.
                                                                    if (Tenant.Still_Live_in_Home.ToLower() == "yes")
                                                                    {
                                                                        PHV.UpdateHistoryByMonths(1, '0');
                                                                        FixedItems += string.Format(", \"Payment_History\":\"{0}\"", PHV.ToString());
                                                                    }
                                                                    // Fix: If reporting has past only in it and still live in home = no, then update tradeline to current month &Drop last character and add a D as first character
                                                                    if (Tenant.Still_Live_in_Home.ToLower() == "no")
                                                                    {
                                                                        PHV.UpdateHistoryByMonths(1, 'D');
                                                                        FixedItems += string.Format(", \"Payment_History\":\"{0}\"", PHV.ToString());
                                                                    }
                                                                }

                                                                fixableErrors++;
                                                                ErrorItems.Add(string.Format("Tradeline is {0} months stale. FIXED.", TradeLineProvider.MonthsOutOfDate(PHV.ReportingDate, ((DateTime.Now.Year * 100) + DateTime.Now.Month))));
                                                            }
                                                            else
                                                            {
                                                                nonFixableErrors++;
                                                                ErrorItems.Add(string.Format("Tradeline is {0} months stale.*", TradeLineProvider.MonthsOutOfDate(PHV.ReportingDate, ((DateTime.Now.Year * 100) + DateTime.Now.Month))));
                                                            }
                                                        }
                                                    }

                                                    // -  Make sure tradeline does not contain history prior to Lease Start Date
                                                    // I.e. should have B's.  Can we use 'current logic' quickly, if not then set Batch Error.  batch error & write note 
                                                    if (!PHV.NoReportingBefore(Tenant.Rental_Obligation_Lease_Start_Date))
                                                    {
                                                        // Master Tech Doc V 1_20 Error: Tradeline contains data prior to Lease Start Date. Fix: If there are only 0's, B's, &D's, rebuild the tradeline.    Example: Jayla Smith
                                                        if (PHV.Cleanable(Tenant.Rental_Obligation_Lease_Start_Date))
                                                        {
                                                            fixableErrors++;
                                                            ErrorItems.Add("Tradeline contains data prior to Lease Start Date. FIXED");
                                                            PHV.CleanReportingBefore(Tenant.Rental_Obligation_Lease_Start_Date);
                                                            FixedItems += string.Format(", \"Payment_History\":\"{0}\"", PHV.ToString());
                                                        }
                                                        else
                                                        {
                                                            nonFixableErrors++;
                                                            ErrorItems.Add("Tradeline contains data prior to Lease Start Date.*");
                                                        }
                                                    }
                                                }

                                                // Proof of Ownership - Check 
                                                // Email - Weekly Batch Task Pivot and a couple other items for today 9/15/2021
                                                if (string.IsNullOrEmpty(Tenant.Missing_Doc_1) &&
                                                    string.IsNullOrEmpty(Tenant.Missing_Doc_2) &&
                                                    string.IsNullOrEmpty(Tenant.Missing_Doc_3) &&
                                                    string.IsNullOrEmpty(Tenant.Missing_Doc_4) &&
                                                    string.IsNullOrEmpty(Tenant.Missing_Doc_5) &&
                                                    string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                                                {
                                                    if (((Tenant.L_Missing_Doc_1 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_2 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_3 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_4 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_5 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_6 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("The only Missing Doc is Proof of Ownership.*");
                                                    }
                                                }
                                                if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1) &&
                                                    string.IsNullOrEmpty(Tenant.L_Missing_Doc_2) &&
                                                    string.IsNullOrEmpty(Tenant.L_Missing_Doc_3) &&
                                                    string.IsNullOrEmpty(Tenant.L_Missing_Doc_4) &&
                                                    string.IsNullOrEmpty(Tenant.L_Missing_Doc_5) &&
                                                    string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                                                {
                                                    if (((Tenant.Missing_Doc_1 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                        ((Tenant.Missing_Doc_2 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                        ((Tenant.Missing_Doc_3 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                        ((Tenant.Missing_Doc_4 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                        ((Tenant.Missing_Doc_5 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                        ((Tenant.Missing_Doc_6 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5))))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("The only Missing Doc is Proof of Ownership.*");
                                                    }
                                                }
                                                if (((Tenant.Missing_Doc_1 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                    ((Tenant.Missing_Doc_2 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                    ((Tenant.Missing_Doc_3 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                    ((Tenant.Missing_Doc_4 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                    ((Tenant.Missing_Doc_5 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_6))) ||
                                                    ((Tenant.Missing_Doc_6 == "Landlord Proof of Ownership") && (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.Missing_Doc_5))))
                                                {
                                                    if (((Tenant.L_Missing_Doc_1 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_2 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_3 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_4 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_5 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))) ||
                                                        ((Tenant.L_Missing_Doc_6 == "Proof of Ownership") && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) && (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))))
                                                    {
                                                        nonFixableErrors++;
                                                        ErrorItems.Add("The only Missing Doc is Proof of Ownership.*");
                                                    }
                                                }

                                                // Update Tenant
                                                if (ErrorItems.Count > 0)
                                                {
                                                    recordswitherrors++;
                                                    if (gTestRunWeeklyJob)
                                                    {
                                                        recordsupdated++;
                                                        WriteReportEntry(Tenant, TestRunFile, ErrorItems.ToArray());
                                                    }
                                                    else
                                                    {
                                                        // Updating Items that are being corrected
                                                        // AND setting the batch error
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        if (nonFixableErrors > 0)
                                                            cu.Append("\"Batch_Error\": \"Yes\"");
                                                        else
                                                            cu.Append("\"Batch_Error\": \"Fixed\"");
                                                        cu.Append(",\"CM_Upload\": \"Yes\"");
                                                        if (UpdateReporting)
                                                            cu.Append(",\"Reporting\": \"Reporting\"");
                                                        if (UpdateNextVerify)
                                                            cu.Append(string.Format(",\"Last_Verify\": \"{1:0000}-{0:00}-05\"", DateTime.Now.Month, DateTime.Now.Year));
                                                        if (HasPunctuation(Tenant.Street))
                                                            cu.Append(string.Format(",\"Street\": \"{0}\"", parseNoPunctuation(Tenant.Street)));
                                                        if (HasPunctuation(Tenant.City))
                                                            cu.Append(string.Format(",\"City\": \"{0}\"", parseNoPunctuation(Tenant.City)));
                                                        if (!string.IsNullOrEmpty(FixedItems))
                                                            cu.Append(FixedItems);

                                                        if (SetFileError)
                                                        {
                                                            if (string.IsNullOrEmpty(Tenant.File_Error))
                                                                Tenant.File_Error = "Subscription";
                                                            else
                                                                Tenant.File_Error = Tenant.File_Error + ",Subscription";

                                                            cu.Append(string.Format(",\"File_Error\": \"{0}\"", Tenant.File_Error));
                                                        }

                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                        }
                                                        else
                                                        {
                                                            //recordsupdated++;
                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                            int li = 0;
                                                            StringBuilder ed = new StringBuilder("Error List\\r\\n");
                                                            foreach (string Error in ErrorItems)
                                                            {
                                                                li++;
                                                                ed.Append(string.Format("{0:00} - {1}\\r\\n", li, Error));
                                                            }
#region Write Notes
                                                            CountAPICall("notecontact");
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.AddContactNote);
                                                            ZM.AddToContactNotes(Tenant.id, "Weekly Job Errors", ed.ToString());
#endregion
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    // Updating Items that are being corrected
                                                    recordswithouterrors++;
                                                    if (!gTestRunWeeklyJob)
                                                    {
                                                        StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                        cu.Append("{ ");
                                                        cu.Append("\"CM_Upload\": \"Yes\"");
                                                        if (UpdateReporting)
                                                            cu.Append(",\"Reporting\": \"Reporting\"");
                                                        if (UpdateNextVerify)
                                                            cu.Append(string.Format(",\"Last_Verify\": \"{1:0000}-{0:00}-05\"", DateTime.Now.Month, DateTime.Now.Year));
                                                        if (HasPunctuation(Tenant.Street))
                                                            cu.Append(string.Format(",\"Street\": \"{0}\"", parseNoPunctuation(Tenant.Street)));
                                                        if (HasPunctuation(Tenant.City))
                                                            cu.Append(string.Format(",\"City\": \"{0}\"", parseNoPunctuation(Tenant.City)));
                                                        // 2 tasks: email 5/4/2021 Sate needs to be all caps, -  You can just Fix this instead of erroring and writing note.
                                                        if (Tenant.State1 != Tenant.State1.ToUpper())
                                                            cu.Append(string.Format(",\"State1\": \"{0}\"", Tenant.State1.ToUpper()));
                                                        cu.Append(" }");
                                                        cu.Append("], \"trigger\":[]}");

                                                        CountAPICall("updatecontact");
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateContact);
                                                        if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                        {
                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                        }
                                                        else
                                                        {
                                                            if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job Reporting Files::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }

                        } //while !EOF
#endregion

                        if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Update Reporting Files Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Weekly Job Reporting Files Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    Page = 1;
                    EOF = false;
                    CRMFeedback = string.Empty;
                    ErrorLines = string.Empty;
                    ErrorItems = new List<string>();

                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Update Non-Reporting Files Started.", EventLogEntryType.Warning);

                    WriteWeeklyReportNonReportingHeader(TestRunFile);

                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        ZohoSubscriptionManager ZS = new ZohoSubscriptionManager(this.gConnectionString, gSubscriptionOrganization, gSubscriptionSecret, gSubscriptionClientID);
                        ZS.UsingCRBServer = true;

                        ContactsFeedBack Tenants = null;
#region Weekly Non-Reporting Files Processing
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("(Contact_Status:starts_with:01)OR(Contact_Status:starts_with:02)OR(Contact_Status:starts_with:03)OR(Contact_Status:starts_with:04)OR(Contact_Status:starts_with:05)OR(Contact_Status:starts_with:06)OR(Contact_Status:starts_with:07)OR(Contact_Status:starts_with:09)OR(Contact_Status:starts_with:10)", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(string.Format("Weekly Job Non-Reporting Files::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job {0} Non-Reporting Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        if (string.IsNullOrEmpty(Tenant.A_Rental_Lease_Status)) Tenant.A_Rental_Lease_Status = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.B_Payment_Rating)) Tenant.B_Payment_Rating = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_First_Delinquency)) Tenant.Date_of_First_Delinquency = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_of_Last_Payment)) Tenant.Date_of_Last_Payment = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Date_Closed)) Tenant.Date_Closed = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Rental_Obligation_Lease_Start_Date)) Tenant.Rental_Obligation_Lease_Start_Date = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Verify)) Tenant.Last_Verify = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Payment_History)) Tenant.Payment_History = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Landlord)) Tenant.Monthly_Landlord = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Pending_Close)) Tenant.Pending_Close = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_1)) Tenant.Renewal_Status_Yr_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_2)) Tenant.Renewal_Status_Yr_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Yr_3)) Tenant.Renewal_Status_Yr_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Monthly_Subscription)) Tenant.Monthly_Subscription = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Street)) Tenant.Street = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.City)) Tenant.City = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Still_Live_in_Home)) Tenant.Still_Live_in_Home = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_1)) Tenant.Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_2)) Tenant.Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_3)) Tenant.Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_4)) Tenant.Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_5)) Tenant.Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Missing_Doc_6)) Tenant.Missing_Doc_6 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1)) Tenant.L_Missing_Doc_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2)) Tenant.L_Missing_Doc_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3)) Tenant.L_Missing_Doc_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4)) Tenant.L_Missing_Doc_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5)) Tenant.L_Missing_Doc_5 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6)) Tenant.L_Missing_Doc_6 = string.Empty;

                                        recordsin++;
                                        ErrorItems.Clear();

                                        // Master tech Doc V 1_20 If tenant status = cancelled or inactive, make sure tenant does not have an active sub in zoho Subs (maybe base on sub number), it has an active sub, error and write note 
                                        if ((Tenant.Contact_Status.ToLower() == "09. inactive") || (Tenant.Contact_Status.ToLower() == "10. cancelled"))
                                        {
                                            // cepsuberror
                                            if (!string.IsNullOrEmpty(Tenant.Subscription_Number))
                                            {
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "Subscriptions", APITracker.APICalls.GetSubscription);
                                                string SubscriptionJSON = ZS.GetSubscription(Tenant.Subscription_Number);
                                                if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                {
                                                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                    if ((Sub.subscription.status.ToLower() == "live") ||
                                                        (Sub.subscription.status.ToLower() == "trial") ||
                                                        (Sub.subscription.status.ToLower() == "dunning") ||
                                                        (Sub.subscription.status.ToLower() == "unpaid") ||
                                                        (Sub.subscription.status.ToLower() == "non_renewing") ||
                                                        (Sub.subscription.status.ToLower() == "future"))
                                                    {
                                                        ErrorItems.Add("Tenant is Inactive or Cancelled , however, the Monthly Subscription is in 'Active' state.");
                                                    }
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(Tenant.Monthly_Sub_Number))
                                            {
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "Subscriptions", APITracker.APICalls.GetSubscription);
                                                string SubscriptionJSON = ZS.GetSubscription(Tenant.Monthly_Sub_Number);
                                                if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                {
                                                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                    if ((Sub.subscription.status.ToLower() == "live") ||
                                                        (Sub.subscription.status.ToLower() == "trial") ||
                                                        (Sub.subscription.status.ToLower() == "dunning") ||
                                                        (Sub.subscription.status.ToLower() == "unpaid") ||
                                                        (Sub.subscription.status.ToLower() == "non_renewing") ||
                                                        (Sub.subscription.status.ToLower() == "future"))
                                                    {
                                                        ErrorItems.Add("Tenant is Inactive or Cancelled , however, the Monthly Subscription is in 'Active' state.");
                                                    }
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(Tenant.Annual_Sub_Number))
                                            {
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "Subscriptions", APITracker.APICalls.GetSubscription);
                                                string SubscriptionJSON = ZS.GetSubscription(Tenant.Annual_Sub_Number);
                                                if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                {
                                                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                                                    if ((Sub.subscription.status.ToLower() == "live") ||
                                                        (Sub.subscription.status.ToLower() == "trial") ||
                                                        (Sub.subscription.status.ToLower() == "dunning") ||
                                                        (Sub.subscription.status.ToLower() == "unpaid") ||
                                                        (Sub.subscription.status.ToLower() == "non_renewing") ||
                                                        (Sub.subscription.status.ToLower() == "future"))
                                                    {
                                                        ErrorItems.Add("Tenant is Inactive or Cancelled , however, the Annual Subscription is in 'Active' state.");
                                                    }
                                                }
                                            }
                                        }

                                        if ((Tenant.Contact_Status.ToLower() != "09. inactive") && (Tenant.Contact_Status.ToLower() != "10. cancelled"))
                                        {
                                            if ((Tenant.Missing_Doc_1.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_2.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_3.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_4.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_5.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_6.ToLower() == "verification of rent (requested from landlord)") ||
                                            (Tenant.Missing_Doc_1.ToLower() == "verification of rent") ||
                                            (Tenant.Missing_Doc_2.ToLower() == "verification of rent") ||
                                            (Tenant.Missing_Doc_3.ToLower() == "verification of rent") ||
                                            (Tenant.Missing_Doc_4.ToLower() == "verification of rent") ||
                                            (Tenant.Missing_Doc_5.ToLower() == "verification of rent") ||
                                            (Tenant.Missing_Doc_6.ToLower() == "verification of rent") ||
                                            (Tenant.L_Missing_Doc_1.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_2.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_3.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_4.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_5.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_6.ToLower() == "vor form (sent - not received)") ||
                                            (Tenant.L_Missing_Doc_1.ToLower() == "vor not sent yet") ||
                                            (Tenant.L_Missing_Doc_2.ToLower() == "vor not sent yet") ||
                                            (Tenant.L_Missing_Doc_3.ToLower() == "vor not sent yet)") ||
                                            (Tenant.L_Missing_Doc_4.ToLower() == "vor not sent yet") ||
                                            (Tenant.L_Missing_Doc_5.ToLower() == "vor not sent yet") ||
                                            (Tenant.L_Missing_Doc_6.ToLower() == "vor not sent yet"))
                                            {
                                                using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                                                {
                                                    dbc.Open();

                                                    string theSQL = string.Format("SELECT * FROM crbdb.mt_filesystem WHERE (filecategory IN (13,14)) AND (contactid = '{0}') AND (deleted = false) AND (filestatus = 4);", Tenant.id);
                                                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                                    {
                                                        dbcc.CommandType = CommandType.Text;
                                                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                                                        {
                                                            if (dbr.HasRows)
                                                            {
                                                                ErrorItems.Add("Tenant is waiting on a VOR, however, the Tenant has an approved Past or Current Lease.");
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                            if (Tenant.A_Rental_Lease_Status == "11")
                                            {
                                                if (Tenant.Still_Live_in_Home.ToLower() != "yes")
                                                {
                                                    ErrorItems.Add("Rental Lease Status is '11' but Still Live in Home is NOT 'Yes'.");
                                                }
                                            }

                                            // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                            if (Tenant.A_Rental_Lease_Status == "05")
                                            {
                                                if (Tenant.Still_Live_in_Home.ToLower() != "yes")
                                                {
                                                    ErrorItems.Add("Rental Lease Status is '05' but Still Live in Home is NOT 'Yes'.");
                                                }
                                            }

                                            // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                            if (Tenant.A_Rental_Lease_Status == "13")
                                            {
                                                if (Tenant.Still_Live_in_Home.ToLower() != "no")
                                                {
                                                    ErrorItems.Add("Rental Lease Status is '13' but Still Live in Home is NOT 'No'.");
                                                }
                                            }

                                            // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                            if (HasCurrentProduct(Tenant.Reporting_Requested))
                                            {
                                                if (Tenant.Still_Live_in_Home.ToLower() != "yes")
                                                {
                                                    ErrorItems.Add("Reporting Requested is 'Current' product but Still Live in Home is NOT 'Yes'.");
                                                }
                                            }

                                            // Email 4/2/2021 Subject Line: Enhancement - Weekly Batch Program as of 4/2/2021
                                            if (HasPastOnlyProduct(Tenant.Reporting_Requested))
                                            {
                                                if (Tenant.A_Rental_Lease_Status == "05")
                                                {
                                                    if (Tenant.Still_Live_in_Home.ToLower() != "yes")
                                                    {
                                                        ErrorItems.Add("Reporting Requested is 'Past Only' product and Rental Lease Status is '05' but Still Live in Home is NOT 'Yes'.");
                                                    }
                                                }

                                                if (Tenant.A_Rental_Lease_Status == "13")
                                                {
                                                    if (Tenant.Still_Live_in_Home.ToLower() != "no")
                                                    {
                                                        ErrorItems.Add("Reporting Requested is 'Past Only' product and Rental Lease Status is '13' but Still Live in Home is NOT 'No'.");
                                                    }
                                                }
                                            }
                                        }

                                        if (ErrorItems.Count > 0)
                                        {
                                            recordswitherrors++;
                                            if (gTestRunWeeklyJob)
                                            {
                                                recordsupdated++;
                                                WriteReportEntry(Tenant, TestRunFile, ErrorItems.ToArray());
                                            }
                                            else
                                            {
                                                // Updating Items that are being corrected
                                                // AND setting the batch error
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                cu.Append("\"Batch_Error\": \"Yes\"");
                                                cu.Append(",\"CM_Upload\": \"Yes\"");
                                                if (HasPunctuation(Tenant.Street))
                                                    cu.Append(string.Format(",\"Street\": \"{0}\"", parseNoPunctuation(Tenant.Street)));
                                                if (HasPunctuation(Tenant.City))
                                                    cu.Append(string.Format(",\"City\": \"{0}\"", parseNoPunctuation(Tenant.City)));
                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                }
                                                else
                                                {
                                                    //recordsupdated++;
                                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                    int li = 0;
                                                    StringBuilder ed = new StringBuilder("Error List\\r\\n");
                                                    foreach (string Error in ErrorItems)
                                                    {
                                                        li++;
                                                        ed.Append(string.Format("{0:00} - {1}\\r\\n", li, Error));
                                                    }
#region Write Notes
                                                    CountAPICall("notecontact");
                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.AddContactNote);
                                                    ZM.AddToContactNotes(Tenant.id, "Weekly Job Errors", ed.ToString());
#endregion
                                                }
                                            }
                                        }
                                        else
                                        {
                                            // Updating Items that are being corrected
                                            recordswithouterrors++;
                                            if (!gTestRunWeeklyJob)
                                            {
                                                StringBuilder cu = new StringBuilder("{ \"data\": [");
                                                cu.Append("{ ");
                                                cu.Append("\"CM_Upload\": \"Yes\"");
                                                if (HasPunctuation(Tenant.Street))
                                                    cu.Append(string.Format(",\"Street\": \"{0}\"", parseNoPunctuation(Tenant.Street)));
                                                if (HasPunctuation(Tenant.City))
                                                    cu.Append(string.Format(",\"City\": \"{0}\"", parseNoPunctuation(Tenant.City)));
                                                cu.Append(" }");
                                                cu.Append("], \"trigger\":[]}");

                                                CountAPICall("updatecontact");
                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessWeeklyJob", "CRM", APITracker.APICalls.UpdateContact);
                                                if (!ZM.UpdateContact(Tenant.id, cu.ToString()))
                                                {
                                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", Tenant.id, ZM.DebugText, cu.ToString()), EventLogEntryType.Error);
                                                }
                                                else
                                                {
                                                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job::{0} - Zoho Contact Updated.", Tenant.id), EventLogEntryType.Warning);
                                                }
                                            }
                                        }
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessWeeklyJobDebugging) EventLog.WriteEntry(string.Format("Weekly Job Non-Reporting Files::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }

                        } //while !EOF
#endregion

                        if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Update Non-Reporting Files Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Weekly Job Non-Reporting Files Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }


                    runStop = DateTime.Now;
                    TimeSpan Elapsed = runStop - runStart;

                    if (gTestRunWeeklyJob) WriteReportFooter(TestRunFile, recordsin, recordsupdated, recordswitherrors, recordswithouterrors, Elapsed);

                    using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                    {
                        dbc.Open();

                        string theSQL = string.Format("UPDATE crbdb.tt_weeklyjobentries SET endstamp = '{0:yyyy-MM-dd HH:mm:ss}', finished = true WHERE id = {1};", DateTime.Now, entryrecordid);
                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                        {
                            dbcc.CommandType = CommandType.Text;
                            dbcc.ExecuteNonQuery();
                        }
                    }

                    lock (this.gWeeklyJobLock)
                    {
                        this.gTestRunWeeklyJob = false;
                        this.gWeeklyJobIsRunning = false;
                    }
                    // Wait to start for all subsequent times until a minute of 0, 15, 30, or 45
                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGateB.WaitOne();
                    if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingWeeklyJob)
                    {
                        continueRunning = false;
                        if (gProcessWeeklyJobDebugging) EventLog.WriteEntry("Weekly Job gStopProcessingWeeklyJob Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingWeeklyJob

        } // ProcessWeeklyJob
        private void ProcessRenewalEmails()
        {
            bool continueRunning = true;

            if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGateC.WaitOne();
            if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Gate Opened (initial).", EventLogEntryType.Warning);

            if (!this.gStopProcessingAnnualRenewals)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    int Page = 1;
                    bool EOF = false;
                    string CRMFeedback = string.Empty;

                    if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Started.", EventLogEntryType.Warning);

                    try
                    {
                        ZOHOCRMProvider ZM = new ZOHOCRMProvider(this.gConnectionString, this.gClientID, this.gClientSecret);
                        ZM.UseTLS12 = true;

                        ZohoSubscriptionManager ZS = new ZohoSubscriptionManager(this.gConnectionString, gSubscriptionOrganization, gSubscriptionSecret, gSubscriptionClientID);
                        ZS.UsingCRBServer = true;

                        ContactsFeedBack Tenants = null;

                        #region Annual Renewals Processing
                        while (!EOF)
                        {
                            CountAPICall("searchcontact");
                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.SearchContacts);
                            if (ZM.SearchContacts("(Contact_Status:equals:08. Reporting)AND(Renewal_Status:equals:Subscription Yearly)", Page, out CRMFeedback))
                            {
                                try
                                {
                                    Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                                }
                                catch (Exception ce)
                                {
                                    EventLog.WriteEntry(string.Format("Annual Renewals::JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                                    Tenants = null;
                                }

                                if (Tenants != null)
                                {
                                    if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry(string.Format("Annual Renewals {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);

                                    foreach (Contact Tenant in Tenants.data)
                                    {
                                        string jsonData = string.Empty;

                                        if (string.IsNullOrEmpty(Tenant.Annual_Sub_Number)) Tenant.Annual_Sub_Number = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status_Through)) Tenant.Renewal_Status_Through = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Call)) Tenant.Renewal_Call = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Renewal_Status)) Tenant.Renewal_Status = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Follow_Up)) Tenant.Follow_Up = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.First_Name)) Tenant.First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_First_Name)) Tenant.R1_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_First_Name)) Tenant.R2_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_First_Name)) Tenant.R3_First_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Last_Name)) Tenant.Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R1_Last_Name)) Tenant.R1_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R2_Last_Name)) Tenant.R2_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.R3_Last_Name)) Tenant.R3_Last_Name = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.File_Error)) Tenant.File_Error = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Pending_Close)) Tenant.Pending_Close = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_1)) Tenant.Delq_Pymt_Date_1 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_2)) Tenant.Delq_Pymt_Date_2 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_3)) Tenant.Delq_Pymt_Date_3 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_4)) Tenant.Delq_Pymt_Date_4 = string.Empty;
                                        if (string.IsNullOrEmpty(Tenant.Testing)) Tenant.Testing = string.Empty;

                                        //if (Tenant.Testing.ToLower() == "renewal")
                                        //{
                                            if (!Tenant.File_Error.ToLower().Contains("renewal"))
                                            {
                                                if (Tenant.Pending_Close.ToLower() != "yes")
                                                {
                                                    if ((string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_1)) &&
                                                        (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_2)) &&
                                                        (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_3)) &&
                                                        (string.IsNullOrEmpty(Tenant.Delq_Pymt_Date_4)))
                                                    {
                                                        if (!string.IsNullOrEmpty(Tenant.Annual_Sub_Number))
                                                        {
                                                        //string SubscriptionJSON = ZS.GetSubscription(Tenant.Annual_Sub_Number);
                                                        //if (!string.IsNullOrEmpty(SubscriptionJSON))
                                                        //{
                                                        //    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);

                                                        //    if (Sub != null)
                                                        //    {
                                                        //        if (Sub.subscription != null)
                                                        //        {

                                                        if (!string.IsNullOrEmpty(Tenant.Renewal_Status_Through)) //if (!string.IsNullOrEmpty(Sub.subscription.next_billing_at))
                                                        {
                                                            if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                            {
                                                                DateTime nextBillDate = DateTime.Parse(Tenant.Renewal_Status_Through); // DateTime.Parse(Sub.subscription.next_billing_at);
                                                                string NextBillingDate = string.Format("{0:MM-dd-yyyy}", nextBillDate);

                                                                // initial emails
                                                                if (string.IsNullOrEmpty(Tenant.Renewal_Call) && string.IsNullOrEmpty(Tenant.Follow_Up))
                                                                {
                                                                    DateTime RenewalDate = (!string.IsNullOrEmpty(Tenant.Renewal_Status_Through)) ? (DateTime.Parse(Tenant.Renewal_Status_Through)) : DateTime.MaxValue;
                                                                    int DaysTillRenewal = DateTime.Now.Subtract(RenewalDate).Days;

                                                                    if (DaysTillRenewal == -30)
                                                                    {
                                                                        // Send Email
                                                                        EmailProvider EP = new EmailProvider();
                                                                        EP.SendAnnualRenewalEmail("andy@creditrentboost.com", Tenant, NextBillingDate);
                                                                        EP = null;

                                                                        // Update ZOHO
                                                                        jsonData = string.Format("{{ \"data\": [ {{\"Renewal_Call\":\"Auto Email 1\",  \"Follow_Up\" : {0:yyyy-MM-dd} }} ], \"trigger\": [\"workflow\"] }}", DateTime.Now.AddDays(7.00));
                                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.UpdateContact);
                                                                        if (ZM.UpdateContact(Tenant.id, jsonData))
                                                                        {
                                                                            // Write Note
                                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.AddContactNote);
                                                                            ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Sent Email 1");
                                                                        }
                                                                        else
                                                                            EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                                    }
                                                                }
                                                                else
                                                                // follow up emails max = 4
                                                                {
                                                                    if ((Tenant.Renewal_Call.ToLower() == "auto email 1") ||
                                                                            (Tenant.Renewal_Call.ToLower() == "auto email 2") ||
                                                                            (Tenant.Renewal_Call.ToLower() == "auto email 3"))
                                                                    {
                                                                        string followUpDate = string.Format("{0:yyyy-MM-dd}", DateTime.Now);

                                                                        if (Tenant.Follow_Up == followUpDate)
                                                                        {
                                                                            // Send Email
                                                                            EmailProvider EP = new EmailProvider();
                                                                            EP.SendAnnualRenewalEmail("andy@creditrentboost.com", Tenant, NextBillingDate);
                                                                            EP = null;

                                                                            // Update ZOHO
                                                                            string nextEmail = string.Empty;
                                                                            string NextEmail = string.Empty;
                                                                            if (Tenant.Renewal_Call.ToLower() == "auto email 1")
                                                                            {
                                                                                nextEmail = "Auto Email 2";
                                                                                jsonData = string.Format("{{ \"data\": [ {{\"Renewal_Call\":\"{1}\",  \"Follow_Up\" : {0:yyyy-MM-dd} }} ], \"trigger\": [\"workflow\"] }}", DateTime.Now.AddDays(7.00), nextEmail);
                                                                            }
                                                                            else if (Tenant.Renewal_Call.ToLower() == "auto email 2")
                                                                            {
                                                                                nextEmail = "Auto Email 3";
                                                                                jsonData = string.Format("{{ \"data\": [ {{\"Renewal_Call\":\"{1}\",  \"Follow_Up\" : {0:yyyy-MM-dd} }} ], \"trigger\": [\"workflow\"] }}", DateTime.Now.AddDays(7.00), nextEmail);
                                                                            }
                                                                            else if (Tenant.Renewal_Call.ToLower() == "auto email 3")
                                                                            {
                                                                                nextEmail = "Auto Email 4";
                                                                                jsonData = string.Format("{{ \"data\": [ {{\"Renewal_Call\":\"{1}\",  \"Follow_Up\" : null }} ], \"trigger\": [\"workflow\"] }}", DateTime.Now.AddDays(7.00), nextEmail);
                                                                            }

                                                                            //jsonData = string.Format("{{ \"data\": [ {{\"Renewal_Call\":\"{1}\",  \"Follow_Up\" : {0:yyyy-MM-dd} }} ], \"trigger\": [\"workflow\"] }}", DateTime.Now.AddDays(7.00), nextEmail);
                                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.UpdateContact);
                                                                            if (ZM.UpdateContact(Tenant.id, jsonData))
                                                                            {
                                                                                // Write Note
                                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.AddContactNote);
                                                                                ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", nextEmail.Replace("Auto", "Sent"));
                                                                            }
                                                                            else
                                                                                EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.File_Error))
                                                                    Tenant.File_Error = "Renewal";
                                                                else
                                                                    Tenant.File_Error = Tenant.File_Error + ",Renewal";

                                                                //jsonData = "{ \"data\": [ {\"File_Error\":\"Renewal\" } ], \"trigger\": [\"workflow\"] }";
                                                                jsonData = "{ \"data\": [ {\"File_Error\":\"" + Tenant.File_Error + "\" } ], \"trigger\": [\"workflow\"] }";
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.UpdateContact);
                                                                if (ZM.UpdateContact(Tenant.id, jsonData))
                                                                {
                                                                    // Write Note
                                                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.AddContactNote);
                                                                    ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Unable to send renewal alert - Subscription is missing a Next Bill Date.");
                                                                }
                                                                else
                                                                    EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                            }
                                                        }
                                                                
                                                        //        }
                                                        //        else
                                                        //        {
                                                        //            if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                        //            {
                                                        //                jsonData = "{ \"data\": [ {\"File_Error\":\"Renewal\" } ], \"trigger\": [\"workflow\"] }";

                                                        //                if (ZM.UpdateContact(Tenant.id, jsonData))
                                                        //                {
                                                        //                    // Write Note
                                                        //                    ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Unable to send renewal alert with the annual subscription number. Subscription was not able to be read.");
                                                        //                }
                                                        //                else
                                                        //                    EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                        //            }
                                                        //        }
                                                        //    }
                                                        //    else
                                                        //    {
                                                        //        if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                        //        {
                                                        //            jsonData = "{ \"data\": [ {\"File_Error\":\"Renewal\" } ], \"trigger\": [\"workflow\"] }";

                                                        //            if (ZM.UpdateContact(Tenant.id, jsonData))
                                                        //            {
                                                        //                // Write Note
                                                        //                ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Unable to send renewal alert with the annual subscription number. Subscription was not able to be read (null).");
                                                        //            }
                                                        //            else
                                                        //                EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                        //        }
                                                        //    }
                                                        //}
                                                        //else
                                                        //{
                                                        //    if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                        //    {
                                                        //        jsonData = "{ \"data\": [ {\"File_Error\":\"Renewal\" } ], \"trigger\": [\"workflow\"] }";

                                                        //        if (ZM.UpdateContact(Tenant.id, jsonData))
                                                        //        {
                                                        //            // Write Note
                                                        //            ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Unable to send renewal alert with the annual subscription number. Subscription was not able to be read.");
                                                        //        }
                                                        //        else
                                                        //            EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                        //    }
                                                        //}
                                                        }
                                                        else
                                                        {
                                                            if (HasCurrentProduct(Tenant.Reporting_Requested))
                                                            {
                                                                if (string.IsNullOrEmpty(Tenant.File_Error))
                                                                    Tenant.File_Error = "Renewal";
                                                                else
                                                                    Tenant.File_Error = Tenant.File_Error + ",Renewal";

                                                                //jsonData = "{ \"data\": [ {\"File_Error\":\"Renewal\" } ], \"trigger\": [\"workflow\"] }}";
                                                                jsonData = "{ \"data\": [ {\"File_Error\":\"" + Tenant.File_Error + "\" } ], \"trigger\": [\"workflow\"] }}";
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.UpdateContact);
                                                            if (ZM.UpdateContact(Tenant.id, jsonData))
                                                                {
                                                                // Write Note
                                                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ProcessRenewalEmails", "CRM", APITracker.APICalls.AddContactNote);
                                                                ZM.AddToContactNotes(Tenant.id, "Annual Renewal Email Alert", "Renewal Status is Subscription Yearly but File is missing an annual subscription number.");
                                                                }
                                                                else
                                                                    EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Update Error:: Tenant-{0} feedback:{1}", Tenant.id, ZM.DebugText), EventLogEntryType.Error);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        //}
                                    }

                                    if (Tenants.info.more_records)
                                        Page++;
                                    else
                                        EOF = true;
                                }
                                else
                                    EOF = true;
                            }
                            else
                            {
                                if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry(string.Format("Annual Renewals::CRM API Error::{0}", ZM.DebugText), EventLogEntryType.Error);
                                EOF = true;
                            }

                        } //while !EOF
                        #endregion

                        if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Annual Renewals Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Reaching Gate (Ongoing).", EventLogEntryType.Warning);

                    this.gGateC.WaitOne();
                    if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingAnnualRenewals)
                    {
                        continueRunning = false;
                        if (gProcessAnnualRenewalsDebugging) EventLog.WriteEntry("Annual Renewals gStopProcessingAnnualRenewals Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingWeeklyJob

        } // ProcessRenewalEmails
        private void ProcessEnrollmentSummary()
        {
            bool continueRunning = true;

            if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGateD.WaitOne();
            if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Gate Opened (initial).", EventLogEntryType.Warning);

            if (!this.gStopProcessingEnrollmentSummary)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Started.", EventLogEntryType.Warning);

                    try
                    {
                        using (MySqlConnection dbc = new MySqlConnection(gConnectionString))
                        {
                            dbc.Open();

                            DataTable Enrollments = new DataTable();
                            string theSQL = "SELECT id, i_completed, i_reportedon, i_enrolled, p_subscription, p_current, p_past12, p_past24, p_expedited, v_eventid, m_subscription, m_expedited, (m_subscription + m_pastreporting + m_expedited + m_setupfee + m_current - m_bankfee) as m_sales FROM crbdb.tt_signups WHERE (r_summarized = false) AND (v_eventid is not null);";
                            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                            {
                                dbcc.CommandType = CommandType.Text;

                                using (MySqlDataAdapter dba = new MySqlDataAdapter(dbcc))
                                {
                                    dba.Fill(Enrollments);
                                }
                            }

                            if (Enrollments.Rows.Count > 0)
                            {
                                foreach (DataRow dbr in Enrollments.Rows)
                                {
                                    string recID = dbr[0].ToString();
                                    DateTime EnrollmentStamp = DateTime.Parse(dbr[1].ToString());
                                    int sqlYear = EnrollmentStamp.Year;
                                    int sqlMonth = EnrollmentStamp.Month;
                                    int sqlDay = EnrollmentStamp.Day;
                                    int sqlHour = EnrollmentStamp.Hour;
                                    int recordsUpdated = 0;

                                    bool IsASubscription = false;
                                    bool IsExpedited = false;

                                    if (dbr[4].ToString() == "1") IsASubscription = true;
                                    if (dbr[8].ToString() == "1") IsExpedited = true;

                                    string SQLUpdate = "UPDATE crbdb.tt_enrollmentsummary SET enrollments = enrollments + 1";
                                    string SQLSubscriptions = string.Empty;
                                    string SQLExpedites = string.Empty;
                                    string SQLUpdateSelection = " WHERE (year = @p0) AND (month = @p1) AND (day = @p2) AND (hour = @p3);";

                                    string SQLSalesUpdate = string.Format(", sales = sales + {0}", dbr[12]);
                                    string SQLSubscriptionSalesUpdate = string.Format(", subscriptionsales = subscriptionsales + {0}", dbr[10]);
                                    string SQLExpediteSalesUpdate = string.Format(", expeditesales = expeditesales + {0}", dbr[11]);

                                    if (IsASubscription) SQLSubscriptions = ", subscriptions = subscriptions + 1" + SQLSubscriptionSalesUpdate;
                                    if (IsExpedited) SQLExpedites = ", expedites = expedites + 1" + SQLExpediteSalesUpdate;

                                    //theSQL = "UPDATE crbdb.tt_enrollmentsummary SET enrollments = enrollments + 1, subscriptions = subscription + 1 WHERE (year = @p0) AND (month = @p1) AND (day = @p2) AND (hour = @p3);";
                                    theSQL = SQLUpdate + SQLSalesUpdate + SQLSubscriptions + SQLExpedites + SQLUpdateSelection;
                                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                    {
                                        dbcc.CommandType = CommandType.Text;
                                        dbcc.Parameters.AddWithValue("@p0", sqlYear);
                                        dbcc.Parameters.AddWithValue("@p1", sqlMonth);
                                        dbcc.Parameters.AddWithValue("@p2", sqlDay);
                                        dbcc.Parameters.AddWithValue("@p3", sqlHour);

                                        recordsUpdated = dbcc.ExecuteNonQuery();
                                    }

                                    if (recordsUpdated == 0)
                                    {
                                        theSQL = "INSERT INTO crbdb.tt_enrollmentsummary (year, month, day, hour, enrollments, adjustments, subscriptions, subscriptionsadjustments, expedites, sales, subscriptionsales, expeditesales) VALUES(@p0, @p1, @p2, @p3, 1, 0, @p4, 0, @p5, @p6, @p7, @p8);";
                                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                        {
                                            dbcc.CommandType = CommandType.Text;
                                            dbcc.Parameters.AddWithValue("@p0", sqlYear);
                                            dbcc.Parameters.AddWithValue("@p1", sqlMonth);
                                            dbcc.Parameters.AddWithValue("@p2", sqlDay);
                                            dbcc.Parameters.AddWithValue("@p3", sqlHour);
                                            dbcc.Parameters.AddWithValue("@p4", IsASubscription ? 1 : 0);
                                            dbcc.Parameters.AddWithValue("@p5", IsExpedited ? 1 : 0);
                                            dbcc.Parameters.AddWithValue("@p6", dbr[12]);
                                            dbcc.Parameters.AddWithValue("@p7", dbr[10]);
                                            dbcc.Parameters.AddWithValue("@p8", dbr[11]);

                                            dbcc.ExecuteNonQuery();
                                        }
                                    }

                                    theSQL = "UPDATE crbdb.tt_signups SET r_summarized = true WHERE id = @p0;";
                                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                    {
                                        dbcc.CommandType = CommandType.Text;
                                        dbcc.Parameters.AddWithValue("@p0", recID);

                                        dbcc.ExecuteNonQuery();
                                    }
                                }
                            }
                        }

                        if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Completed.", EventLogEntryType.Warning);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("CRBService::Process Enrollment Summary Errored at {0:yyyy-MM-dd HH:mm:ss}. Error::{1} \r\n {2}", DateTime.Now, ce.Message, ce.StackTrace), EventLogEntryType.Error);
                    }

                    if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Reaching Gate (Ongoing).", EventLogEntryType.Warning);

                    this.gGateD.WaitOne();
                    if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingEnrollmentSummary)
                    {
                        continueRunning = false;
                        if (gProcessEnrollmentSummarysDebugging) EventLog.WriteEntry("Enrollment Summary gStopProcessingEnrollmentSummary Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingWeeklyJob

        } // ProcessEnrollmentSummary
        //private void EnsureLandlordInvite(string Accountid, ZOHOCRMProvider ZM, out string LLName, out string LLUser, out string LLPwd)
        private void EnsureLandlordInvite(string Accountid, ZOHOCRMProvider ZM, string LLName, ref string LLUser, ref string LLPwd)
        {
            //LLName = string.Empty;
            //LLUser = string.Empty;
            //LLPwd = string.Empty;
            bool isInvited = false;
            bool hasRecord = false;

            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
            {
                dbc.Open();

                string theSQL = string.Format("SELECT userid, userpwd, invited, username FROM crbdb.mt_landlordusers WHERE zohoid = '{0}';", Accountid);
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.HasRows)
                        {
                            if (dbr.Read())
                            {
                                hasRecord = true;
                                if (dbr[2].ToString() == "1") isInvited = true;
                                LLUser = dbr[0].ToString();
                                //LLName = dbr[3].ToString();
                                string temppwd = dbr[1].ToString();
                                EncryptionProvider EP = new EncryptionProvider(EncryptionKeyFamily.PrivateKey);
                                LLPwd = EP.Decrypt(temppwd);
                                EP = null;
                            }
                        }
                    }
                }

                if (!isInvited)
                {
                    theSQL = string.Format("SELECT b.userid, b.userpwd, b.invited, b.username FROM crbdb.mt_landlordaccounts a LEFT OUTER JOIN crbdb.mt_landlordusers b ON a.profileid = b.id WHERE b.zohoid = '{0}';", Accountid);
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                        {
                            if (dbr.HasRows)
                            {
                                if (dbr.Read())
                                {
                                    hasRecord = true;
                                    if (dbr[2].ToString() == "1") isInvited = true;
                                    LLUser = dbr[0].ToString();
                                    //LLName = dbr[3].ToString();
                                    string temppwd = dbr[1].ToString();
                                    EncryptionProvider EP = new EncryptionProvider(EncryptionKeyFamily.PrivateKey);
                                    LLPwd = EP.Decrypt(temppwd);
                                    EP = null;
                                }
                            }
                        }
                    }
                }

                if (!isInvited)
                {
                    int pricingrecord = 0;

                    theSQL = string.Format("SELECT email1, primarycontact, pricingrecord, accountname FROM crbdb.mt_crmlandlords WHERE zohoid = '{0}';", Accountid);
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        using (MySqlDataReader dbr = dbcc.ExecuteReader())
                        {
                            if (dbr.HasRows)
                            {
                                if (dbr.Read())
                                {
                                    string tempuserid = dbr.GetString(0);
                                    //string tempusername = dbr.GetString(3);

                                    if (!string.IsNullOrEmpty(tempuserid))
                                        LLUser = tempuserid; //LLUser = dbr.GetString(0); //dbr[0].ToString();
                                    //if (!string.IsNullOrEmpty(tempusername))
                                    //    LLName = tempusername;//LLName = dbr.GetString(1); //dbr[1].ToString();
                                    if (Convert.IsDBNull(dbr[2]))
                                        pricingrecord = 0;
                                    else
                                        pricingrecord = dbr.GetInt32(2); //int.Parse(dbr[2].ToString());
                                }
                            }
                        }
                    }

                    //    c) Set(Accounts) Portal_Access = Yes
                    string accountdata = "{ \"data\" : [ { \"Portal_Access\" : \"Yes\" } ] }";
                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "EnsureLandlordInvite", "CRM", APITracker.APICalls.UpdateAccount);
                    ZM.UpdateAccount(Accountid, accountdata);

                    if (pricingrecord == 0)
                        theSQL = string.Format("UPDATE crbdb.mt_crmlandlords SET portalaccess = 'Yes', pricingrecord = 1 WHERE id = {0};", Accountid);
                    else
                        theSQL = string.Format("UPDATE crbdb.mt_crmlandlords SET portalaccess = 'Yes' WHERE id = {0};", Accountid);
                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                    {
                        dbcc.CommandType = CommandType.Text;
                        dbcc.ExecuteNonQuery();
                    }

                    if (hasRecord)
                    {
                        theSQL = string.Format("UPDATE crbdb.mt_landlordusers SET invited = true WHERE zohoid = '{0}';", Accountid);
                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                        {
                            dbcc.CommandType = CommandType.Text;
                            dbcc.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        // Need to create invite
                        PasswordProvider PP = new PasswordProvider();
                        LLPwd = PP.CreateRandomPassword();
                        PP = null;

                        EncryptionProvider EP = new EncryptionProvider(EncryptionKeyFamily.PrivateKey);
                        string dbpassword = EP.Encrypt(LLPwd);
                        EP = null;

                        theSQL = "INSERT INTO crbdb.mt_landlordusers (userid, username, userpwd, zohoid, isadmin, avatar, email, invited) VALUES(@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7);";
                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                        {
                            dbcc.CommandType = CommandType.Text;
                            dbcc.Parameters.AddWithValue("@p0", LLUser);
                            dbcc.Parameters.AddWithValue("@p1", LLName);
                            dbcc.Parameters.AddWithValue("@p2", dbpassword);
                            dbcc.Parameters.AddWithValue("@p3", Accountid);
                            dbcc.Parameters.AddWithValue("@p4", true);
                            dbcc.Parameters.AddWithValue("@p5", "/images/avatars/avatar2.png");
                            dbcc.Parameters.AddWithValue("@p6", LLUser);
                            dbcc.Parameters.AddWithValue("@p7", false);

                            dbcc.ExecuteNonQuery();
                        }
                    }
                }
            }
        }
        private string GetLandlordPortalPassword(string AccountID)
        {
            string theResult = string.Empty;

            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
            {
                dbc.Open();

                string theSQL = string.Format("SELECT userpwd FROM crbdb.mt_landlordusers WHERE zohoid = '{0}';", AccountID);
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.HasRows)
                        {
                            if (dbr.Read())
                            {
                                string temppwd = dbr[0].ToString();
                                EncryptionProvider EP = new EncryptionProvider(EncryptionKeyFamily.PrivateKey);
                                theResult = EP.Decrypt(temppwd);
                                EP = null;
                            }
                        }
                    }
                }
            }

            return theResult;
        }
        private TradeLineBuildFeedback BuildInitialTradeLine(Contact Tenant, PaymentHistoryDate RentalStartDate, PaymentHistoryDate RunDate, PaymentHistoryDate RptDate)
        {
            TradeLineBuildFeedback theResult = new TradeLineBuildFeedback();
            theResult.HasError = false;
            theResult.TradeLine = string.Empty;
            theResult.AdvancingCharacter = '0';
            theResult.Errors = new List<string>();

            string DateCLosed = string.Empty;
            string DateCloseD = string.Empty;
            int monthcount = 0;
            bool skipthisrecord = false;

            PaymentHistory ph = null;
            PaymentHistoryEntry pe = null;

            DateCLosed = Tenant.Date_Closed;
            DateCloseD = Tenant.Date_Closed;

            PaymentHistoryDate ROLS = new PaymentHistoryDate(Tenant.Rental_Obligation_Lease_Start_Date);
            if (ROLS.IsValid)
            {
                if (ROLS.CompareTo(RptDate) >= 0)
                    ph = new PaymentHistory(ROLS.PayMonth, ROLS.PayYear);
                else
                    ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);
            }
            else
                ph = new PaymentHistory(RptDate.PayMonth, RptDate.PayYear);

            switch (Tenant.A_Rental_Lease_Status)
            {
                case "05":  // Transferred
                    switch (Tenant.Reporting_Requested[0])
                    {
                        case "Past 12 Months Only":
                            for (int idx = 0; idx < 24; idx++)
                            {
                                pe = ph[idx];
                                if (pe.EntryDate < RentalStartDate.PayDate)
                                    break;
                                if (monthcount > 12)
                                    break;
                                pe.EntryState = "0";
                                monthcount++;
                            }
                            break;
                        case "Past 24 Months Only":
                            for (int idx = 0; idx < 24; idx++)
                            {
                                pe = ph[idx];
                                if (pe.EntryDate < RentalStartDate.PayDate)
                                    break;
                                pe.EntryState = "0";
                                monthcount++;
                            }
                            break;
                        default:    // Reporting we don't know how to handle - tell somebody
                            theResult.HasError = true;
                            theResult.Errors.Add("Error::Rental Lease Status is 05 but reporting requested not past 12 or 24 months.");
                            skipthisrecord = true;
                            break;
                    }
                    if (!skipthisrecord)
                    {
                        theResult.TradeLine = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                        if (!ph.ToString().Contains("0"))
                        {
                            theResult.HasError = true;
                            theResult.Errors.Add("Error::Payment History does not contain at least 1 ZERO(0).");
                        }
                    }
                    break;
                case "11":  // Current - never have closed date, never have Ds
                    switch (Tenant.Reporting_Requested[0])
                    {
                        case "Current Rent Only":
                            pe = ph[0];
                            pe.EntryState = "0";
                            break;
                        case "Current & Past 12 Months":
                            for (int idx = 0; idx < 24; idx++)
                            {
                                pe = ph[idx];
                                if (pe.EntryDate < RentalStartDate.PayDate)
                                    break;
                                if (monthcount > 12)
                                    break;
                                pe.EntryState = "0";
                                monthcount++;
                            }
                            break;
                        case "Current & Past 24 Months":
                            for (int idx = 0; idx < 24; idx++)
                            {
                                pe = ph[idx];
                                if (pe.EntryDate < RentalStartDate.PayDate)
                                    break;
                                pe.EntryState = "0";
                                monthcount++;
                            }
                            break;
                        default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                            theResult.HasError = true;
                            theResult.Errors.Add("Error::Rental Lease Status is 11 but reporting requested is not current, current and past 12, or current and past 24 months.");
                            skipthisrecord = true;
                            break;
                    }
                    if (!skipthisrecord)
                    {
                        theResult.TradeLine = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                        if (!ph.ToString().Contains("0"))
                        {
                            theResult.HasError = true;
                            theResult.Errors.Add("Error::Payment History does not contain at least 1 ZERO(0).");
                        }
                    }
                    break;
                case "13":  // Paid Closed 
                    theResult.AdvancingCharacter = 'D';
                    string replacement = "D";
                    if (!string.IsNullOrEmpty(DateCloseD))
                    {
                        PaymentHistoryDate ClosedDate = new PaymentHistoryDate(DateCloseD);
                        if (ClosedDate.IsValid)
                        {
                            switch (Tenant.Reporting_Requested[0])
                            {
                                case "Past 12 Months Only":
                                    for (int idx = 0; idx < 24; idx++)
                                    {
                                        pe = ph[idx];
                                        if (pe.EntryDate <= ClosedDate.PayDate)
                                            replacement = "0";
                                        if (pe.EntryDate < RentalStartDate.PayDate)
                                            break;
                                        if (monthcount > 12)
                                            break;
                                        pe.EntryState = replacement;
                                        monthcount++;
                                    }
                                    break;
                                case "Past 24 Months Only":
                                    for (int idx = 0; idx < 24; idx++)
                                    {
                                        pe = ph[idx];
                                        if (pe.EntryDate <= ClosedDate.PayDate)
                                            replacement = "0";
                                        if (pe.EntryDate < RentalStartDate.PayDate)
                                            break;
                                        pe.EntryState = replacement;
                                        monthcount++;
                                    }
                                    break;
                                default:                            // Reporting I don't know to deal with - Don't touch it - Tell Somebody
                                    skipthisrecord = true;
                                    theResult.HasError = true;
                                    theResult.Errors.Add("Error::Rental Lease Status is 13 but reporting requested is not past 12 or past 24 months.");
                                    break;
                            }
                            if (!skipthisrecord)
                            {
                                theResult.TradeLine = string.Format("{0}:{1}", RunDate.PayDateAsString, ph.ToString());
                                if (!ph.ToString().Contains("0"))
                                {
                                    theResult.HasError = true;
                                    theResult.Errors.Add("Error::Payment History does not contain at least 1 ZERO(0).");
                                }
                            }
                        }
                        else
                        {
                            // Date Closed is bad - tell somebody
                            theResult.HasError = true;
                            theResult.Errors.Add(string.Format("Error::Tenant Status uses Closed Date to calculate Payment History but it is not valid. Actual Date Value[{0}]. Payment History Not Updated.", DateCLosed));
                        }
                    }
                    else
                    {
                        // Date Closed is bad - tell somebody
                        theResult.HasError = true;
                        theResult.Errors.Add("Tenant Status uses Closed Date to calculate Payment History but it is not set. Payment History Not Updated.");
                    }
                    break;
                default:    // Status is one I'm NOT touching right now
                    theResult.HasError = true;
                    theResult.Errors.Add("Tenant Rental Lease Status is NOT 05, 11, or 13.");
                    break;
            }

            return theResult;
        }
        private APIResult ReportingClosingAccountError(ZOHOCRMProvider ZM, string TenantID, string ErrorNotes)
        {
            APIResult theResult = null;

            StringBuilder cu = new StringBuilder("{ \"data\": [");
            cu.Append("{ ");
            cu.Append("\"Pending_Close\": \"Error Automation\"");
            cu.Append(" }");
            cu.Append("], \"trigger\":[]}");

            CountAPICall("updatecontact");
            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ReportingClosingAccountError", "CRM", APITracker.APICalls.UpdateContact);
            if (!ZM.UpdateContact(TenantID, cu.ToString()))
            {
                theResult = new APIResult(false, string.Format("Closing Accounts::{0} - Zoho Contact Update Failed. Reason = {1} \r\n\r\n {2}", TenantID, ZM.DebugText, cu.ToString()));
            }
            else
                theResult = new APIResult(true, string.Format("Closing Accounts::{0} - Zoho Contact Updated.", TenantID));

            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "ReportingClosingAccountError", "CRM", APITracker.APICalls.AddContactNote);
            ZM.AddToContactNotes(TenantID, "Closing Accounts Service", ErrorNotes);

            return theResult;
        }
        private string DetermineSubscriptionCancellationID(string testreason)
        {
            string cancelMessageID = "1600393000004377696";

            if (testreason == "closed - bought home") cancelMessageID = "1600393000004377696";
            if (testreason == "closed - moved") cancelMessageID = "1600393000004377696";
            if (testreason == "closed - deceased") cancelMessageID = "1600393000004377696";
            if (testreason == "closed - non renewal") cancelMessageID = "1600393000004377700";
            if (testreason == "closed - non payment") cancelMessageID = "1600393000004377698";
            if (testreason == "closed - left owing") cancelMessageID = "1600393000004377698";
            if (testreason == "closed - bk") cancelMessageID = "1600393000004377698";
            if (testreason == "closed - deleted") cancelMessageID = "1600393000004377698";
            if (testreason == "closed - chargeback dispute") cancelMessageID = "1600393000004377698";
            if (testreason == "closed – pmc collection") cancelMessageID = "1600393000004377698";

            return cancelMessageID;
        }
        private bool CancelledSubscription(string Tenantid, string Subscription_Number, string Annual_Sub_Number, string Monthly_Sub_Number, string Payment_Sub_Number, string CancellationReasonID, ZohoSubscriptionManager ZS, ZOHOCRMProvider ZM)
        {
            bool theResult = true;

            if (!string.IsNullOrEmpty(Subscription_Number))
            {
                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                string SubscriptionJSON = ZS.GetSubscription(Subscription_Number);
                if (!string.IsNullOrEmpty(SubscriptionJSON))
                {
                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                    if (SubscriptionNeedsCancelling(Sub.subscription.status))
                    {
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                        if (!ZS.CancelSubscriptionEx(Subscription_Number, CancellationReasonID, true))
                        {
                            theResult = false;
                            string SubscriptionErrorText = "Unable to cancel the monthly subscription. " + ZS.DebugText;
                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                            if (ReportedError.Successful)
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning);
                            }
                            else
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error);
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(Annual_Sub_Number))
            {
                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                string SubscriptionJSON = ZS.GetSubscription(Annual_Sub_Number);
                if (!string.IsNullOrEmpty(SubscriptionJSON))
                {
                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                    if (SubscriptionNeedsCancelling(Sub.subscription.status))
                    {
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                        if (!ZS.CancelSubscriptionEx(Annual_Sub_Number, CancellationReasonID, true))
                        {
                            theResult = false;
                            string SubscriptionErrorText = "Unable to cancel the annual subscription. " + ZS.DebugText;
                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                            if (ReportedError.Successful)
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning);
                            }
                            else
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error);
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(Monthly_Sub_Number))
            {
                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                string SubscriptionJSON = ZS.GetSubscription(Monthly_Sub_Number);
                if (!string.IsNullOrEmpty(SubscriptionJSON))
                {
                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                    if (SubscriptionNeedsCancelling(Sub.subscription.status))
                    {
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                        if (!ZS.CancelSubscriptionEx(Monthly_Sub_Number, CancellationReasonID, true))
                        {
                            theResult = false;
                            string SubscriptionErrorText = "Unable to cancel the monthly_sub subscription. " + ZS.DebugText;
                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                            if (ReportedError.Successful)
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning);
                            }
                            else
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error);
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(Payment_Sub_Number))
            {
                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                string SubscriptionJSON = ZS.GetSubscription(Payment_Sub_Number);
                if (!string.IsNullOrEmpty(SubscriptionJSON))
                {
                    SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                    if (SubscriptionNeedsCancelling(Sub.subscription.status))
                    {
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                        if (!ZS.CancelSubscriptionEx(Payment_Sub_Number, CancellationReasonID, true))
                        {
                            theResult = false;
                            string SubscriptionErrorText = "Unable to cancel the payment subscription. " + ZS.DebugText;
                            APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                            if (ReportedError.Successful)
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning);
                            }
                            else
                            {
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error);
                            }
                        }
                    }
                }
            }

            return theResult;
        } // CancelledSubscription
        private bool CancelledSubscription(string Tenantid, string Subscription_Number, string Annual_Sub_Number, string Monthly_Sub_Number, string Payment_Sub_Number, string CancellationReasonID, ZohoSubscriptionManager ZS, ZOHOCRMProvider ZM, out string VoidedInvoicesReport)
        {
            bool theResult = true;
            VoidedInvoicesReport = string.Empty;
            string logname = @"C:\IIS_App_Logs\Subscription_Invoice-" + string.Format("{0:yyyyMMdd}.log", DateTime.Now);

            using (Mutex gateway = new Mutex(false, "CRBInvoiceVoiding"))
            {
                if (gateway.WaitOne())
                {
                    if (!System.IO.File.Exists(logname))
                    {
                        using (System.IO.File.Create(logname)) { }

                        FileSecurity fsec = new FileSecurity();
                        fsec.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\SYSTEM", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"NT AUTHORITY\IUSR", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"CREATOR OWNER", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Administrators", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\Users", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\IIS_IUSRS", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.AddAccessRule(new FileSystemAccessRule(@"NS1007190\DMSUser", FileSystemRights.FullControl, AccessControlType.Allow));
                        fsec.SetAccessRuleProtection(true, true);
                        System.IO.File.SetAccessControl(logname, fsec);
                    }

                    RecordLogEntry(logname, "=========================================================================================================================================");
                    RecordLogEntry(logname, string.Format("Tenant ID: {0} - Reason: {1}", Tenantid, CancellationReasonID));
                    RecordLogEntry(logname, " ");

                    if (!string.IsNullOrEmpty(Subscription_Number))
                    {
                        RecordLogEntry(logname, string.Format("Found Subscription_Number [{0}].", Subscription_Number));
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a Subscription Number of '{1}'. Processing.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                        string SubscriptionJSON = ZS.GetSubscription(Subscription_Number);
                        if (!string.IsNullOrEmpty(SubscriptionJSON))
                        {
                            RecordLogEntry(logname, string.Format("Retrieved data for Subscription_Number [{0}].", Subscription_Number));
                            SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                            if (SubscriptionNeedsCancelling(Sub.subscription.status))
                            {
                                RecordLogEntry(logname, string.Format("Subscription_Number [{0}] Needs Cancelling.", Subscription_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Subscription Number of '{1}' needs cancelling.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                                if (!ZS.CancelSubscriptionEx(Subscription_Number, CancellationReasonID, true))
                                {
                                    theResult = false;
                                    string SubscriptionErrorText = "Unable to cancel the Subscription_Number. " + ZS.DebugText;
                                    RecordLogEntry(logname, SubscriptionErrorText);
                                    APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                                    if (ReportedError.Successful)
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8350);
                                    }
                                    else
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8350);
                                    }
                                }
                                else
                                {
                                    RecordLogEntry(logname, string.Format("Successfully Canceled Subscription_Number [{0}].", Subscription_Number));
                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Subscription Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                    string tempReport = "Subscription Invoice(s) Voided\r\n";
                                    bool SomethingWasCancelled = false;
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                    string InvoiceFeedBack = ZS.GetInvoices(Subscription_Number, 1, 200);
                                    if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                    {
                                        InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                        if (Invoices != null)
                                        {
                                            if (Invoices.invoices != null)
                                            {
                                                if (Invoices.invoices.Count > 0)
                                                {
                                                    foreach (Invoice invoice in Invoices.invoices)
                                                    {
                                                        RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                        if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                        {
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                            string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                            SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                            if (SFB != null)
                                                            {
                                                                if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;

                                                                if (SFB.code == "0")
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                    SomethingWasCancelled = true;
                                                                    tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                                }
                                                                else
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                                }
                                                            }
                                                            else
                                                                RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tempReport += "\r\n\r\n";

                                    if (SomethingWasCancelled)
                                    {
                                        VoidedInvoicesReport += tempReport;
                                    }
                                }
                            }
                            else
                            {
                                RecordLogEntry(logname, string.Format("Subscription_Number [{0}] already cancelled - going to make sure all invoices are voided.", Subscription_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Subscription Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                string tempReport = "Subscription Invoice(s) Voided\r\n";
                                bool SomethingWasCancelled = false;
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                string InvoiceFeedBack = ZS.GetInvoices(Subscription_Number, 1, 200);
                                if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                {
                                    InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                    if (Invoices != null)
                                    {
                                        if (Invoices.invoices != null)
                                        {
                                            if (Invoices.invoices.Count > 0)
                                            {
                                                foreach (Invoice invoice in Invoices.invoices)
                                                {
                                                    RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                    if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                    {
                                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                        string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                        SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                        if (SFB != null)
                                                        {
                                                            if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;

                                                            if (SFB.code == "0")
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                SomethingWasCancelled = true;
                                                                tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                            }
                                                            else
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                            }
                                                        }
                                                        else
                                                            RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                tempReport += "\r\n\r\n";

                                if (SomethingWasCancelled)
                                {
                                    VoidedInvoicesReport += tempReport;
                                }
                            }
                            //RecordLogEntry(logname, string.Format("Subscription_Number [{0}] doesn't need Cancelling with a status of {1}.", Subscription_Number, Sub.subscription.status));
                        }
                    }

                    if (!string.IsNullOrEmpty(Annual_Sub_Number))
                    {
                        RecordLogEntry(logname, string.Format("Found Annual_Sub_Number [{0}].", Annual_Sub_Number));
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a Annual Sub Number of '{1}'. Processing.", Tenantid, Annual_Sub_Number), EventLogEntryType.Information, 8115);
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                        string SubscriptionJSON = ZS.GetSubscription(Annual_Sub_Number);
                        if (!string.IsNullOrEmpty(SubscriptionJSON))
                        {
                            RecordLogEntry(logname, string.Format("Retrieved data for Annual_Sub_Number [{0}].", Annual_Sub_Number));
                            SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                            if (SubscriptionNeedsCancelling(Sub.subscription.status))
                            {
                                RecordLogEntry(logname, string.Format("Annual_Sub_Number [{0}] Needs Cancelling.", Annual_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Annual Sub Number of '{1}' needs cancelling.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                                if (!ZS.CancelSubscriptionEx(Annual_Sub_Number, CancellationReasonID, true))
                                {
                                    theResult = false;
                                    string SubscriptionErrorText = "Unable to cancel the annual subscription. " + ZS.DebugText;
                                    RecordLogEntry(logname, SubscriptionErrorText);
                                    APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                                    if (ReportedError.Successful)
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8350);
                                    }
                                    else
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8350);
                                    }
                                }
                                else
                                {
                                    RecordLogEntry(logname, string.Format("Successfully Canceled Annual_Sub_Number [{0}].", Annual_Sub_Number));
                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Annual Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                    string tempReport = "Annual Subscription Invoice(s) Voided\r\n";
                                    bool SomethingWasCancelled = false;
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                    string InvoiceFeedBack = ZS.GetInvoices(Annual_Sub_Number, 1, 200);
                                    if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                    {
                                        InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                        if (Invoices != null)
                                        {
                                            if (Invoices.invoices != null)
                                            {
                                                if (Invoices.invoices.Count > 0)
                                                {
                                                    foreach (Invoice invoice in Invoices.invoices)
                                                    {
                                                        RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                        if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                        {
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                            string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                            SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                            if (SFB != null)
                                                            {
                                                                if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                                if (SFB.code == "0")
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                    SomethingWasCancelled = true;
                                                                    tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                                }
                                                                else
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                                }
                                                            }
                                                            else
                                                                RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tempReport += "\r\n\r\n";

                                    if (SomethingWasCancelled)
                                    {
                                        VoidedInvoicesReport += tempReport;
                                    }
                                }
                            }
                            else
                            {
                                RecordLogEntry(logname, string.Format("Annual_Sub_Number [{0}] already cancelled - going to make sure all invoices are voided.", Annual_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Annual Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                string tempReport = "Annual Subscription Invoice(s) Voided\r\n";
                                bool SomethingWasCancelled = false;
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                string InvoiceFeedBack = ZS.GetInvoices(Annual_Sub_Number, 1, 200);
                                if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                {
                                    InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                    if (Invoices != null)
                                    {
                                        if (Invoices.invoices != null)
                                        {
                                            if (Invoices.invoices.Count > 0)
                                            {
                                                foreach (Invoice invoice in Invoices.invoices)
                                                {
                                                    RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                    if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                    {
                                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                        string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                        SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                        if (SFB != null)
                                                        {
                                                            if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                            if (SFB.code == "0")
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                SomethingWasCancelled = true;
                                                                tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                            }
                                                            else
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                            }
                                                        }
                                                        else
                                                            RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                tempReport += "\r\n\r\n";

                                if (SomethingWasCancelled)
                                {
                                    VoidedInvoicesReport += tempReport;
                                }
                            }
                            //RecordLogEntry(logname, string.Format("Annual_Sub_Number [{0}] doesn't need Cancelling with a status of {1}.", Annual_Sub_Number, Sub.subscription.status));
                        }
                    }

                    if (!string.IsNullOrEmpty(Monthly_Sub_Number))
                    {
                        RecordLogEntry(logname, string.Format("Found Monthly_Sub_Number [{0}].", Monthly_Sub_Number));
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a Monthly Sub Number of '{1}'. Processing.", Tenantid, Monthly_Sub_Number), EventLogEntryType.Information, 8115);
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                        string SubscriptionJSON = ZS.GetSubscription(Monthly_Sub_Number);
                        if (!string.IsNullOrEmpty(SubscriptionJSON))
                        {
                            RecordLogEntry(logname, string.Format("Retrieved data for Monthly_Sub_Number [{0}].", Monthly_Sub_Number));
                            SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                            if (SubscriptionNeedsCancelling(Sub.subscription.status))
                            {
                                RecordLogEntry(logname, string.Format("Monthly_Sub_Number [{0}] Needs Cancelling.", Monthly_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Monthly Sub Number of '{1}' needs cancelling.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                                if (!ZS.CancelSubscriptionEx(Monthly_Sub_Number, CancellationReasonID, true))
                                {
                                    theResult = false;
                                    string SubscriptionErrorText = "Unable to cancel the monthly_sub subscription. " + ZS.DebugText;
                                    RecordLogEntry(logname, SubscriptionErrorText);
                                    APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                                    if (ReportedError.Successful)
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8350);
                                    }
                                    else
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8350);
                                    }
                                }
                                else
                                {
                                    RecordLogEntry(logname, string.Format("Successfully Canceled Monthly_Sub_Number [{0}].", Monthly_Sub_Number));
                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Monthly Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                    string tempReport = "Monthly Subscription Invoice(s) Voided\r\n";
                                    bool SomethingWasCancelled = false;
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                    string InvoiceFeedBack = ZS.GetInvoices(Monthly_Sub_Number, 1, 200);
                                    if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                    {
                                        InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                        if (Invoices != null)
                                        {
                                            if (Invoices.invoices != null)
                                            {
                                                if (Invoices.invoices.Count > 0)
                                                {
                                                    foreach (Invoice invoice in Invoices.invoices)
                                                    {
                                                        RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                        if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                        {
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                            string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                            SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                            if (SFB != null)
                                                            {
                                                                if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                                if (SFB.code == "0")
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                    SomethingWasCancelled = true;
                                                                    tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                                }
                                                                else
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                                }
                                                            }
                                                            else
                                                                RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tempReport += "\r\n\r\n";

                                    if (SomethingWasCancelled)
                                    {
                                        VoidedInvoicesReport += tempReport;
                                    }
                                }
                            }
                            else
                            {
                                RecordLogEntry(logname, string.Format("Monthly_Sub_Number [{0}] already cancelled - going to make sure all invoices are voided.", Monthly_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Monthly Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                string tempReport = "Monthly Subscription Invoice(s) Voided\r\n";
                                bool SomethingWasCancelled = false;
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                string InvoiceFeedBack = ZS.GetInvoices(Monthly_Sub_Number, 1, 200);
                                if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                {
                                    InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                    if (Invoices != null)
                                    {
                                        if (Invoices.invoices != null)
                                        {
                                            if (Invoices.invoices.Count > 0)
                                            {
                                                foreach (Invoice invoice in Invoices.invoices)
                                                {
                                                    RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                    if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                    {
                                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                        string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                        SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                        if (SFB != null)
                                                        {
                                                            if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                            if (SFB.code == "0")
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                SomethingWasCancelled = true;
                                                                tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                            }
                                                            else
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                            }
                                                        }
                                                        else
                                                            RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                tempReport += "\r\n\r\n";

                                if (SomethingWasCancelled)
                                {
                                    VoidedInvoicesReport += tempReport;
                                }
                            }
                            //RecordLogEntry(logname, string.Format("Monthly_Sub_Number [{0}] doesn't need Cancelling with a status of {1}.", Monthly_Sub_Number, Sub.subscription.status));
                        }
                    }

                    if (!string.IsNullOrEmpty(Payment_Sub_Number))
                    {
                        RecordLogEntry(logname, string.Format("Found Payment_Sub_Number [{0}].", Payment_Sub_Number));
                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} has a Payment Sub Number of '{1}'. Processing.", Tenantid, Payment_Sub_Number), EventLogEntryType.Information, 8115);
                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetSubscription);
                        string SubscriptionJSON = ZS.GetSubscription(Payment_Sub_Number);
                        if (!string.IsNullOrEmpty(SubscriptionJSON))
                        {
                            SubscriptionFeedBack Sub = JsonConvert.DeserializeObject<SubscriptionFeedBack>(SubscriptionJSON);
                            if (SubscriptionNeedsCancelling(Sub.subscription.status))
                            {
                                RecordLogEntry(logname, string.Format("Payment_Sub_Number [{0}] Needs Cancelling.", Payment_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Payment Sub Number of '{1}' needs cancelling.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.CancelSubscription);
                                if (!ZS.CancelSubscriptionEx(Payment_Sub_Number, CancellationReasonID, true))
                                {
                                    theResult = false;
                                    string SubscriptionErrorText = "Unable to cancel the payment subscription. " + ZS.DebugText;
                                    RecordLogEntry(logname, SubscriptionErrorText);
                                    APIResult ReportedError = ReportingClosingAccountError(ZM, Tenantid, SubscriptionErrorText.Replace("\r", "\\r").Replace("\n", "\\n"));
                                    if (ReportedError.Successful)
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Warning, 8350);
                                    }
                                    else
                                    {
                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(ReportedError.FeedBack, EventLogEntryType.Error, 8350);
                                    }
                                }
                                else
                                {
                                    RecordLogEntry(logname, string.Format("Successfully Canceled Payment_Sub_Number [{0}].", Payment_Sub_Number));
                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Payment Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                    string tempReport = "Payment Subscription Invoice(s) Voided\r\n";
                                    bool SomethingWasCancelled = false;
                                    APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                    string InvoiceFeedBack = ZS.GetInvoices(Payment_Sub_Number, 1, 200);
                                    if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                    {
                                        InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                        if (Invoices != null)
                                        {
                                            if (Invoices.invoices != null)
                                            {
                                                if (Invoices.invoices.Count > 0)
                                                {
                                                    foreach (Invoice invoice in Invoices.invoices)
                                                    {
                                                        RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                        if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                        {
                                                            if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                            APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                            string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                            SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                            if (SFB != null)
                                                            {
                                                                if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                                if (SFB.code == "0")
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                    SomethingWasCancelled = true;
                                                                    tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                                }
                                                                else
                                                                {
                                                                    RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                    if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                                }
                                                            }
                                                            else
                                                                RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    tempReport += "\r\n\r\n";

                                    if (SomethingWasCancelled)
                                    {
                                        VoidedInvoicesReport += tempReport;
                                    }
                                }
                            }
                            else
                            {
                                RecordLogEntry(logname, string.Format("Payment_Sub_Number [{0}] already cancelled - going to make sure all invoices are voided.", Payment_Sub_Number));
                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Tenant {0} Payment Sub Number of '{1}' cancelled successfully - voiding invoices.", Tenantid, Subscription_Number), EventLogEntryType.Information, 8115);
                                string tempReport = "Payment Subscription Invoice(s) Voided\r\n";
                                bool SomethingWasCancelled = false;
                                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.GetInvoices);
                                string InvoiceFeedBack = ZS.GetInvoices(Payment_Sub_Number, 1, 200);
                                if (!string.IsNullOrEmpty(InvoiceFeedBack))
                                {
                                    InvoicesFeedBack Invoices = JsonConvert.DeserializeObject<InvoicesFeedBack>(InvoiceFeedBack);
                                    if (Invoices != null)
                                    {
                                        if (Invoices.invoices != null)
                                        {
                                            if (Invoices.invoices.Count > 0)
                                            {
                                                foreach (Invoice invoice in Invoices.invoices)
                                                {
                                                    RecordLogEntry(logname, string.Format("Found Invoice {0} - {1} for {2:C} status {3}.", invoice.invoice_number, invoice.invoice_date, invoice.total, invoice.status));
                                                    if ((invoice.status.ToLower() == "sent") || (invoice.status.ToLower() == "overdue") || (invoice.status.ToLower() == "partially_paid"))
                                                    {
                                                        if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} - {1} for {2:C} needs voiding.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total), EventLogEntryType.Information, 8115);
                                                        APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "CancelledSubscription", "Subscriptions", APITracker.APICalls.VoidInvoice);
                                                        string VoidFeedBack = ZS.VoidInvoice(invoice.invoice_id);
                                                        SimpleFeedBack SFB = JsonConvert.DeserializeObject<SimpleFeedBack>(VoidFeedBack);
                                                        if (SFB != null)
                                                        {
                                                            if (string.IsNullOrEmpty(SFB.code)) SFB.code = string.Empty;
                                                            if (SFB.code == "0")
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(string.Format("Invoice {0} was voided.\r\n", invoice.invoice_number), EventLogEntryType.Information, 8115);
                                                                SomethingWasCancelled = true;
                                                                tempReport += string.Format("Invoice {0} - {1} for {2:C} was voided.\r\n", invoice.invoice_number, invoice.invoice_date, invoice.total);
                                                            }
                                                            else
                                                            {
                                                                RecordLogEntry(logname, string.Format("Invoice Void API Call yielded response code other than 0 - considered a failure to void. Feedback: {0}", VoidFeedBack));
                                                                if (gProcessClosingAccountsDebugging) EventLog.WriteEntry(VoidFeedBack, EventLogEntryType.Error, 8350);
                                                            }
                                                        }
                                                        else
                                                            RecordLogEntry(logname, "Invoice Void API Call yielded null/empty response - considered a failure to void.");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                tempReport += "\r\n\r\n";

                                if (SomethingWasCancelled)
                                {
                                    VoidedInvoicesReport += tempReport;
                                }
                            }
                            //RecordLogEntry(logname, string.Format("Payment_Sub_Number [{0}] doesn't need Cancelling with a status of {1}.", Payment_Sub_Number, Sub.subscription.status));
                        }
                    }

                }
            }
            return theResult;
        } // CancelledSubscription
        private string DetermineDateOfLastPaymentFrom(DateField CloseFileOnDate)
        {
            string theResult = string.Empty;
            DateField DateOfLastPayment = new DateField(CloseFileOnDate.PayDateAsZohoDate);

            if ((CloseFileOnDate.PayDay >= 1) && (CloseFileOnDate.PayDay <= 5))
            {
                DateOfLastPayment.DecrementDate();
                theResult = string.Format("{1:00}{2:00}{0:0000}", DateOfLastPayment.PayYear, DateOfLastPayment.PayMonth, 5);
            }
            else
            {
                if (CloseFileOnDate.PayDay >= 6)
                {
                    theResult = string.Format("{1:00}{2:00}{0:0000}", CloseFileOnDate.PayYear, CloseFileOnDate.PayMonth, 5);
                }
            }

            return theResult;
        }
        private string extractStreetNumber(string street)
        {
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < street.Length; idx++)
            {
                if (char.IsDigit(street[idx]))
                    sb.Append(street[idx]);
            }

            string tempNumber = sb.ToString();

            if (tempNumber.Length >= 5)
                tempNumber = tempNumber.Substring(0, 5);
            else
                tempNumber = new string('0', (5 - tempNumber.Length)) + tempNumber;

            return tempNumber;
        }
        private bool hasRoommate(Contact Tenant)
        {
            bool theResult = false;

            if (!string.IsNullOrEmpty(Tenant.R1_Last_Name)) theResult = true;
            if (!string.IsNullOrEmpty(Tenant.R2_Last_Name)) theResult = true;
            if (!string.IsNullOrEmpty(Tenant.R3_Last_Name)) theResult = true;

            return theResult;
        }
        private void CountAPICall(string CallName)
        {
            lock (this.queueLock)
            {
                APIEntry AE = new APIEntry();
                AE.CallName = CallName;
                AE.CallCount = 1;
                AE.CallTime = DateTime.Now;
                APICalls.Enqueue(AE);
            }
        }
        private void CountAPICall(string CallName, int CallCount)
        {
            lock (this.queueLock)
            {
                APIEntry AE = new APIEntry();
                AE.CallName = CallName;
                AE.CallCount = CallCount;
                AE.CallTime = DateTime.Now;
                APICalls.Enqueue(AE);
            }
        }
        private void ProcessCount()
        {
            bool continueRunning = true;

            // Wait to start for the first time 
            if (gDebugging) EventLog.WriteEntry("API Count Reaching Gate (initial).", EventLogEntryType.Warning);
            this.gGate3.WaitOne();
            if (gDebugging) EventLog.WriteEntry("API Count Gate Opened (initial).", EventLogEntryType.Warning);
            // Check for immediate shutdown before first run...
            if (!this.gStopProcessingCounts)
            {
                // Running for the first here - do work then wait for next signal
                while (continueRunning)
                {
                    lock (queueLock)
                    {
                        if (APICalls.Count > 0)
                        {
                            using (MySqlConnection dbc = new MySqlConnection(this.gConnectionString))
                            {
                                dbc.Open();

                                for (int idx = 0; idx < APICalls.Count; idx++)
                                {
                                    int recordsUpdated = 0;

                                    APIEntry AE = APICalls.Dequeue();
                                    string theSQL = string.Format("UPDATE crbdb.tt_apicounts SET {0} = {0} + {3} WHERE calldate = '{1:yyyy-MM-dd}' and callhour = {2};", AE.CallName, AE.CallTime, AE.CallTime.Hour, AE.CallCount);
                                    // insert or update count in database
                                    using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                    {
                                        dbcc.CommandType = CommandType.Text;
                                        recordsUpdated = dbcc.ExecuteNonQuery();
                                    }

                                    if (recordsUpdated == 0)
                                    {
                                        theSQL = string.Format("INSERT INTO crbdb.tt_apicounts (calldate, callhour, {0}) VALUES('{1:yyyy-MM-dd}', {2}, {3});", AE.CallName, AE.CallTime, AE.CallTime.Hour, AE.CallCount);
                                        using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                                        {
                                            dbcc.CommandType = CommandType.Text;
                                            recordsUpdated = dbcc.ExecuteNonQuery();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // Wait to start for all subsequent times
                    if (gDebugging) EventLog.WriteEntry("API Count Reaching Gate (Ongoing).", EventLogEntryType.Warning);
                    this.gGate3.WaitOne();
                    if (gDebugging) EventLog.WriteEntry("API Count Gate Opened (Ongoing).", EventLogEntryType.Warning);
                    if (this.gStopProcessingCounts)
                    {
                        continueRunning = false;
                        if (gDebugging) EventLog.WriteEntry("gStopProcessingCounts Flag True - Dropping out.", EventLogEntryType.Warning);
                    }

                } // while continueRunning

            } // if !this.gStopProcessingCounts

        } // ProcessCount
        private int DifferenceInMonths(DateTime FirstDate, DateTime SecondDate)
        {
            int Months = 0;
            int Years = 0;
            int Result = 0;

            if (FirstDate < SecondDate)
            {
                Months = SecondDate.Month - FirstDate.Month;
                Years = (SecondDate.Year - FirstDate.Year) * 12;
                Result = (Months + Years);
            }
            else
            {
                Months = FirstDate.Month - SecondDate.Month;
                Years = (FirstDate.Year - SecondDate.Year) * 12;
                Result = (Months + Years);
            }

            return Result;
        }
        private void LogItem(string EventData)
        {
            string LogFile = string.Format("C:\\IIS_App_Logs\\ZOHOCRM_OAuth\\PortalUpdates_{0:yyyyMMdd}.log", DateTime.Now);
            using (StreamWriter tw = new StreamWriter(LogFile, true, System.Text.Encoding.UTF8))
            {
                tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, EventData);
                tw.Flush();
            }
        }
        private string DetermineAgeGroup(int AgeInYears)
        {
            string theResult = "- None -";

            if (AgeInYears <= 25)
            {
                theResult = "20-25";
            }
            else
            {
                if (AgeInYears >= 66)
                {
                    theResult = "65+";
                }
                else
                {
                    if ((AgeInYears >= 26) && (AgeInYears <= 35)) theResult = "26-35";
                    if ((AgeInYears >= 36) && (AgeInYears <= 45)) theResult = "36-45";
                    if ((AgeInYears >= 46) && (AgeInYears <= 55)) theResult = "46-55";
                    if ((AgeInYears >= 56) && (AgeInYears <= 65)) theResult = "56-65";
                }
            }

            return theResult;
        }
        private string ListItems(string[] Items)
        {
            bool FirstItem = true;
            StringBuilder sb = new StringBuilder();

            foreach (string Item in Items)
            {
                if (FirstItem)
                {
                    sb.Append(Item);
                    FirstItem = false;
                }
                else
                    sb.Append(", " + Item);
            }

            return sb.ToString();
        }
        private string CoelesceValue(string Item)
        {
            if (string.IsNullOrEmpty(Item))
                return string.Empty;
            else
                return Item;
        }
        private bool SubscriptionNeedsCancelling(string SubscriptionStatus)
        {
            bool theResult = true;

            switch (SubscriptionStatus)
            {
                case "live":
                    break;
                case "trial":
                    break;
                case "dunning":
                    break;
                case "unpaid":
                    break;
                case "non_renewing":
                    break;
                case "cancelled":
                    theResult = false;
                    break;
                case "creation_failed":
                    theResult = false;
                    break;
                case "cancelled_from_dunning":
                    theResult = false;
                    break;
                case "expired":
                    theResult = false;
                    break;
                case "trial_expired":
                    theResult = false;
                    break;
                case "future":
                    break;
            }

            return theResult;
        }
        private string UploadTID(string ZohoID)
        {
            StringBuilder sb = new StringBuilder("{ \"data\": [");
            sb.Append("{ ");
            sb.Append("\"Layout\":{\"id\":\"2558861000001894216\"},");
            sb.Append(string.Format("\"T_ID\": \"{0}\"", ZohoID));
            sb.Append(" }");
            sb.Append("], \"trigger\":[]}");
            return sb.ToString();
        }
        private string ScrubItem(string data)
        {
            string numbers = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < data.Length; idx++)
            {
                char thisCharacter = data[idx];
                if (numbers.Contains(thisCharacter))
                    sb.Append(data[idx]);
            }
            return sb.ToString();
        }
        private string ResolveStateCode(string CurrentCode)
        {
            string[] statecode = { "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "AA", "AE", "AP", "APO", "FPO" };

            if (statecode.Contains<string>(CurrentCode.ToUpper())) return CurrentCode.ToUpper();

            if (CurrentCode.ToLower() == "alabama") return "AL";
            if (CurrentCode.ToLower() == "alaska") return "AK";
            if (CurrentCode.ToLower() == "arizona") return "AZ";
            if (CurrentCode.ToLower() == "arkansas") return "AR";
            if (CurrentCode.ToLower() == "california") return "CA";
            if (CurrentCode.ToLower() == "colorado") return "CO";
            if (CurrentCode.ToLower() == "connecticut") return "CT";
            if (CurrentCode.ToLower() == "delaware") return "DE";
            if (CurrentCode.ToLower() == "district of columbia") return "DC";
            if (CurrentCode.ToLower() == "florida") return "FL";
            if (CurrentCode.ToLower() == "georgia") return "GA";
            if (CurrentCode.ToLower() == "hawaii") return "HI";
            if (CurrentCode.ToLower() == "idaho") return "ID";
            if (CurrentCode.ToLower() == "illinois") return "IL";
            if (CurrentCode.ToLower() == "indiana") return "IN";
            if (CurrentCode.ToLower() == "iowa") return "IA";
            if (CurrentCode.ToLower() == "kansas") return "KS";
            if (CurrentCode.ToLower() == "kentucky") return "KY";
            if (CurrentCode.ToLower() == "louisiana") return "LA";
            if (CurrentCode.ToLower() == "maine") return "ME";
            if (CurrentCode.ToLower() == "maryland") return "MD";
            if (CurrentCode.ToLower() == "massachusetts") return "MA";
            if (CurrentCode.ToLower() == "michigan") return "MI";
            if (CurrentCode.ToLower() == "minnesota") return "MN";
            if (CurrentCode.ToLower() == "mississippi") return "MS";
            if (CurrentCode.ToLower() == "missouri") return "MO";
            if (CurrentCode.ToLower() == "montana") return "MT";
            if (CurrentCode.ToLower() == "nebraska") return "NE";
            if (CurrentCode.ToLower() == "nevada") return "NV";
            if (CurrentCode.ToLower() == "new hampshire") return "NH";
            if (CurrentCode.ToLower() == "new jersey") return "NJ";
            if (CurrentCode.ToLower() == "new mexico") return "NM";
            if (CurrentCode.ToLower() == "new york") return "NY";
            if (CurrentCode.ToLower() == "north carolina") return "NC";
            if (CurrentCode.ToLower() == "north dakota") return "ND";
            if (CurrentCode.ToLower() == "ohio") return "OH";
            if (CurrentCode.ToLower() == "oklahoma") return "OK";
            if (CurrentCode.ToLower() == "oregon") return "OR";
            if (CurrentCode.ToLower() == "pennsylvania") return "PA";
            if (CurrentCode.ToLower() == "puerto rico") return "PR";
            if (CurrentCode.ToLower() == "rhode island") return "RI";
            if (CurrentCode.ToLower() == "south carolina") return "SC";
            if (CurrentCode.ToLower() == "south dakota") return "SD";
            if (CurrentCode.ToLower() == "tennessee") return "TN";
            if (CurrentCode.ToLower() == "texas") return "TX";
            if (CurrentCode.ToLower() == "utah") return "UT";
            if (CurrentCode.ToLower() == "vermont") return "VT";
            if (CurrentCode.ToLower() == "virginia") return "VA";
            if (CurrentCode.ToLower() == "washington") return "WA";
            if (CurrentCode.ToLower() == "west virginia") return "WV";
            if (CurrentCode.ToLower() == "wisconsin") return "WI";
            if (CurrentCode.ToLower() == "wyoming") return "WY";
            if (CurrentCode.ToLower() == "armed forces (the) americas") return "AA";
            if (CurrentCode.ToLower() == "armed forces americas") return "AA";
            if (CurrentCode.ToLower() == "armed forces europe") return "AE";
            if (CurrentCode.ToLower() == "armed forces pacific") return "AP";
            if (CurrentCode.ToLower() == "army post office (u.s. army and u.s. air force)") return "APO";
            if (CurrentCode.ToLower() == "army post office") return "APO";
            if (CurrentCode.ToLower() == "fleet post office (u.s. navy and u.s. marine corps)") return "FPO";
            if (CurrentCode.ToLower() == "fleet post office") return "FPO";

            return string.Empty;
        }
        private string RemoveGenerationalCodes(string NameString)
        {
            string[] GenCodes = { "sr", "sr.", "jr", "jr.", "i", "1st", "ii", "2nd", "iii", "3rd", "iv", "4th", "5th", "6th", "7th", "8th", "9th", "v", "vi", "vii", "viii", "ix", "mr", "mr.", "miss", "ms", "ms.", "mrs", "mrs." };
            string[] NameElements = NameString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            StringBuilder theResult = new StringBuilder();

            for (int idx = 0; idx < NameElements.Length; idx++)
            {
                if (GenCodes.Contains<string>(NameElements[idx].ToLower()))
                    NameElements[idx] = string.Empty;
                theResult.Append(NameElements[idx] + " ");
            }

            return theResult.ToString().Trim();
        }
        private bool HasCurrentOnlyProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("current"))
                {
                    if (!product.ToLower().Contains("past"))
                    {
                        theResult = true;
                        break;
                    }
                }
            }

            return theResult;
        }
        private bool HasCurrentAndPastProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("current"))
                {
                    if (product.ToLower().Contains("past"))
                    {
                        theResult = true;
                        break;
                    }
                }
            }

            return theResult;
        }
        private bool HasCurrentProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("current"))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private bool HasCurrentOrCollectionProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("current"))
                {
                    theResult = true;
                    break;
                }
                if (product.ToLower().Contains("collection"))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private bool HasPastOnlyProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("months only"))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private bool HasClosedOrCollectionProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("closed"))
                {
                    theResult = true;
                    break;
                }
                if (product.ToLower().Contains("collection"))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private bool HasCollectionProduct(string[] Products)
        {
            bool theResult = false;

            foreach (string product in Products)
            {
                if (product.ToLower().Contains("collection"))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private int AccountHasCurrentTenants(string AccountID, string TenantID, ZOHOCRMProvider ZM)
        {
            int Page = 1;
            int theResult = 0;
            bool EOF = false;
            string Criteria = string.Format("Account_Name.name:equals:{0}", AccountID);
            string CRMFeedback = string.Empty;
            ContactsFeedBack Tenants = null;

            while (!EOF)
            {
                CountAPICall("searchcontact");
                APITracker.TrackAPICall(this.gConnectionString, APITracker.Projects.CRBService, "AccountHasCurrentTenants", "CRM", APITracker.APICalls.SearchContacts);
                if (ZM.SearchContacts(Criteria, Page, out CRMFeedback))
                {
                    try
                    {
                        Tenants = JsonConvert.DeserializeObject<ContactsFeedBack>(CRMFeedback);
                    }
                    catch (Exception ce)
                    {
                        EventLog.WriteEntry(string.Format("TU Fields::Compliance Review(AccountHasCurrentTenants) JSON Deserializing Error::{0} \r\n {1}", ce.Message, CRMFeedback), EventLogEntryType.Error);
                        Tenants = null;
                    }

                    if (Tenants != null)
                    {
                        if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::Compliance Review(AccountHasCurrentTenants) {0} Contacts Found to Process.", Tenants.data.Length), EventLogEntryType.Warning);
                        foreach (Contact Tenant in Tenants.data)
                        {
                            if (Tenant.id != TenantID)
                            {
                                if (HasCurrentProduct(Tenant.Reporting_Requested))
                                    theResult++;
                            }
                        }

                        if (Tenants.info.more_records)
                            Page++;
                        else
                            EOF = true;
                    }
                    else
                        EOF = true;
                }
                else
                {
                    if (gProcessTUFieldsDebugging) EventLog.WriteEntry(string.Format("TU Fields::CRM API Error::Compliance Review(AccountHasCurrentTenants) {0}", ZM.DebugText), EventLogEntryType.Error);
                    EOF = true;
                }

            } //while !EOF

            return theResult;
        }
        private bool HasNumbers(string TestData)
        {
            bool theResult = false;
            char[] numbers = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

            foreach (char thisChar in TestData)
            {
                if (numbers.Contains<char>(thisChar)) theResult = true;
            }

            return theResult;
        }
        private string TenantAccountListEntry(Contact Tenant)
        {
            bool snFound = false;
            bool anFound = false;
            string theResult = string.Empty;

            if (!string.IsNullOrEmpty(Tenant.Street))
            {
                string[] StreetElements = Tenant.Street.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                for (int idx = 0; idx < StreetElements.Length; idx++)
                {
                    if (HasNumbers(StreetElements[idx]))
                    {
                        if (snFound)
                        {
                            if (idx == (StreetElements.Length - 1))
                            {
                                if (!anFound)
                                {
                                    anFound = true;
                                    theResult += " - Apt " + StreetElements[idx].Trim();
                                }
                            }
                        }
                        else
                        {
                            snFound = true;
                            theResult += StreetElements[idx].Trim();
                        }
                    }
                    else
                    {
                        if ((StreetElements[idx].Trim().ToLower() == "unit") || (StreetElements[idx].Trim().ToLower() == "apt") || (StreetElements[idx].Trim().ToLower() == "apartment") || (StreetElements[idx].Trim().ToLower() == "ste") || (StreetElements[idx].Trim().ToLower() == "suite"))
                        {
                            if ((idx + 1) <= (StreetElements.Length - 1))
                            {
                                if (!anFound)
                                {
                                    anFound = true;
                                    theResult += " - Apt " + StreetElements[(idx + 1)].Trim();
                                }
                            }
                            idx++;
                        }
                    }
                }

                theResult += " - " + TextProcessingProvider.ProperCase(Tenant.First_Name.Trim()) + " " + TextProcessingProvider.ProperCase(Tenant.Last_Name.Trim());

                if (!string.IsNullOrEmpty(Tenant.R1_Last_Name))
                {
                    theResult += " & " + TextProcessingProvider.ProperCase(Tenant.R1_First_Name.Trim()) + " " + TextProcessingProvider.ProperCase(Tenant.R1_Last_Name.Trim());
                }

                if (!string.IsNullOrEmpty(Tenant.R2_Last_Name))
                {
                    theResult += " & " + TextProcessingProvider.ProperCase(Tenant.R2_First_Name.Trim()) + " " + TextProcessingProvider.ProperCase(Tenant.R2_Last_Name.Trim());
                }

                if (!string.IsNullOrEmpty(Tenant.R3_Last_Name))
                {
                    theResult += " & " + TextProcessingProvider.ProperCase(Tenant.R3_First_Name.Trim()) + " " + TextProcessingProvider.ProperCase(Tenant.R3_Last_Name.Trim());
                }
            }

            return theResult;
        }
        private string[] ResolveTenantList(string Tenant_List_1, string Tenant_List_2, string Tenant_List_3, string TenantAccountListEntry)
        {
            string[] theResult = null;
            string[] list1 = null;
            string[] list2 = null;
            string[] list3 = null;
            int totalEntries = 0;
            int startIndex = 0;
            bool TenantAccountListEntryWasFound = false;

            if (!string.IsNullOrEmpty(Tenant_List_1))
            {
                list1 = Tenant_List_1.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
                totalEntries += list1.Length;
                if (list1.Contains<string>(TenantAccountListEntry)) TenantAccountListEntryWasFound = true;
            }
            if (!string.IsNullOrEmpty(Tenant_List_2))
            {
                list2 = Tenant_List_2.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
                totalEntries += list2.Length;
                if (list2.Contains<string>(TenantAccountListEntry)) TenantAccountListEntryWasFound = true;
            }
            if (!string.IsNullOrEmpty(Tenant_List_3))
            {
                list3 = Tenant_List_3.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
                totalEntries += list3.Length;
                if (list3.Contains<string>(TenantAccountListEntry)) TenantAccountListEntryWasFound = true;
            }

            if (!TenantAccountListEntryWasFound)
                totalEntries++;

            theResult = new string[totalEntries];

            if (list1 != null)
            {
                list1.CopyTo(theResult, startIndex);
                startIndex += list1.Length;
            }

            if (list2 != null)
            {
                list2.CopyTo(theResult, startIndex);
                startIndex += list2.Length;
            }

            if (list3 != null)
            {
                list3.CopyTo(theResult, startIndex);
            }

            if (!TenantAccountListEntryWasFound)
                theResult[theResult.Length - 1] = TenantAccountListEntry;

            Array.Sort(theResult);

            return theResult;
        }
        private bool UpgradeAllowed(string[] RequestedProducts)
        {
            bool theResult = true;
            foreach (string Product in RequestedProducts)
            {
                if (Product.ToLower() == "current & past 24 months") theResult = false;
                if (Product.ToLower() == "collection") theResult = false;
                if (Product.ToLower() == "closed - new Lease") theResult = false;
                if (Product.ToLower() == "closed - bought home") theResult = false;
                if (Product.ToLower() == "closed - moved") theResult = false;
                if (Product.ToLower() == "closed - cCancelled") theResult = false;
                if (Product.ToLower() == "closed - deceased") theResult = false;
                if (Product.ToLower() == "closed - non renewal") theResult = false;
                if (Product.ToLower() == "closed - non payment") theResult = false;
            }
            return theResult;
        }
        private bool RequestedProductsContains(string[] RequestedProducts, string RequestedProduct)
        {
            bool theResult = false;

            foreach (string Product in RequestedProducts)
            {
                if (Product.ToLower() == RequestedProduct.ToLower()) theResult = true;
            }

            return theResult;
        }
        private bool IsBadEmail(string Result, string Reason)
        {
            bool theResult = false;

            if (Result.ToLower() == "bad")
            {
                theResult = true;
            }

            if (Result.ToLower() == "unverifiable")
            {
                //if (Reason.ToLower() == "none")            20220209 per Gregg Text - wants this to be considered good now
                //    theResult = true;
                if (Reason.ToLower() == "domainiswellknowndea")
                    theResult = true;
            }

            return theResult;
        }
        private string TenantDirectoryName(Contact Tenant)
        {
            bool snFound = false;
            bool anFound = false;
            string theResult = TextProcessingProvider.ProperCase(Tenant.Last_Name.Trim()) + ", " + TextProcessingProvider.ProperCase(Tenant.First_Name.Trim());

            if (!string.IsNullOrEmpty(Tenant.Street))
            {
                string[] StreetElements = Tenant.Street.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                for (int idx = 0; idx < StreetElements.Length; idx++)
                {
                    if (HasNumbers(StreetElements[idx]))
                    {
                        if (snFound)
                        {
                            if (idx == (StreetElements.Length - 1))
                            {
                                if (!anFound)
                                {
                                    anFound = true;
                                    theResult += " " + StreetElements[idx].Trim();
                                }
                            }
                        }
                        else
                        {
                            snFound = true;
                            theResult += " " + StreetElements[idx].Trim();
                        }
                    }
                    else
                    {
                        if ((StreetElements[idx].Trim().ToLower() == "unit") || (StreetElements[idx].Trim().ToLower() == "apt") || (StreetElements[idx].Trim().ToLower() == "apartment") || (StreetElements[idx].Trim().ToLower() == "ste") || (StreetElements[idx].Trim().ToLower() == "suite"))
                        {
                            if ((idx + 1) <= (StreetElements.Length - 1))
                            {
                                if (!anFound)
                                {
                                    anFound = true;
                                    theResult += " " + StreetElements[(idx + 1)].Trim();
                                }
                            }
                            idx++;
                        }
                    }
                }

                theResult += " " + Tenant.State1;

            }

            return theResult;
        }
        private string ResolvePhysicalDirectoryName(string FromData)
        {
            string numbers = "0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < FromData.Length; idx++)
            {
                char thisCharacter = FromData[idx];
                if (numbers.Contains(thisCharacter))
                    sb.Append(FromData[idx]);
            }

            return sb.ToString();
        }
        private string TenantReplaceable(Contact Tenant)
        {
            bool snFound = false;
            string theResult = string.Empty;

            if (!string.IsNullOrEmpty(Tenant.Street))
            {
                string[] StreetElements = Tenant.Street.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                for (int idx = 0; idx < StreetElements.Length; idx++)
                {
                    if (HasNumbers(StreetElements[idx]))
                    {
                        if (!snFound)
                        {
                            snFound = true;
                            theResult += StreetElements[idx].Trim();
                        }
                    }
                }

                theResult += Tenant.Last_Name.Trim() + " " + Tenant.State1;
            }

            return theResult;
        }
        private string ResolvePhysicalNameEx(string FromData)
        {
            string numbers = "0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
            StringBuilder sb = new StringBuilder();

            for (int idx = 0; idx < FromData.Length; idx++)
            {
                char thisCharacter = FromData[idx];
                if (numbers.Contains(thisCharacter))
                    sb.Append(FromData[idx]);
            }

            string tempname = sb.ToString();
            string tempextension = Path.GetExtension(tempname).Trim();
            string tempnamewithstamp = Path.GetFileNameWithoutExtension(tempname).Trim() + string.Format("{0:yyyyMMddHHmmss}", DateTime.Now);

            return tempnamewithstamp + tempextension; //sb.ToString(); //tempnamewithstamp;
        }
        private PathEntry GetTenantDirectory(string Tenantid, MySqlConnection dbc)
        {
            PathEntry theResult = null;
            string theSQL = string.Format("SELECT id, parent, child, level, sort, title, landlorditem, tenantitem, isactive, location, cancontainfolders, cancontaindocuments, leadid, contactid, accountid, firstname, lastname, r1firstname, r1lastname, r2firstname, r2lastname, r3firstname, r3lastname FROM crbdb.mt_filesystempaths WHERE (tenantitem = true) AND (contactid = '{0}') AND (parent = 2);", Tenantid);

            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                using (MySqlDataReader dbr = dbcc.ExecuteReader())
                {
                    if (dbr.HasRows)
                    {
                        if (dbr.Read())
                        {
                            theResult = new PathEntry();
                            theResult.Id = dbr.GetInt32(0);
                            theResult.Parent = dbr.GetInt32(1);
                            theResult.Child = dbr.GetInt32(2);
                            theResult.Level = dbr.GetInt32(3);
                            theResult.Sort = dbr.GetInt32(4);
                            if (Convert.IsDBNull(dbr[5]))
                                theResult.Title = "No Title";
                            else
                                theResult.Title = dbr.GetString(5);
                            theResult.LandlordItem = dbr.GetBoolean(6);
                            theResult.TenantItem = dbr.GetBoolean(7);
                            theResult.IsActive = dbr.GetBoolean(8);
                            if (Convert.IsDBNull(dbr[9]))
                                theResult.Location = "C:\\DocumentSystem";
                            else
                                theResult.Location = dbr.GetString(9);
                            theResult.CanContainFolders = dbr.GetBoolean(10);
                            theResult.CanContainDocuments = dbr.GetBoolean(11);
                            if (Convert.IsDBNull(dbr[12]))
                                theResult.LeadID = string.Empty;
                            else
                                theResult.LeadID = dbr.GetString(12);
                            if (Convert.IsDBNull(dbr[13]))
                                theResult.ContactID = string.Empty;
                            else
                                theResult.ContactID = dbr.GetString(13);
                            if (Convert.IsDBNull(dbr[14]))
                                theResult.LandlordID = string.Empty;
                            else
                                theResult.LandlordID = dbr.GetString(14);

                            if (Convert.IsDBNull(dbr[15]))
                                theResult.FirstName = string.Empty;
                            else
                                theResult.FirstName = dbr.GetString(15);
                            if (Convert.IsDBNull(dbr[16]))
                                theResult.LastName = string.Empty;
                            else
                                theResult.LastName = dbr.GetString(16);
                            if (Convert.IsDBNull(dbr[17]))
                                theResult.R1FirstName = string.Empty;
                            else
                                theResult.R1FirstName = dbr.GetString(17);
                            if (Convert.IsDBNull(dbr[18]))
                                theResult.R1LastName = string.Empty;
                            else
                                theResult.R1LastName = dbr.GetString(18);
                            if (Convert.IsDBNull(dbr[19]))
                                theResult.R2FirstName = string.Empty;
                            else
                                theResult.R2FirstName = dbr.GetString(19);
                            if (Convert.IsDBNull(dbr[20]))
                                theResult.R2LastName = string.Empty;
                            else
                                theResult.R2LastName = dbr.GetString(20);
                            if (Convert.IsDBNull(dbr[21]))
                                theResult.R3FirstName = string.Empty;
                            else
                                theResult.R3FirstName = dbr.GetString(21);
                            if (Convert.IsDBNull(dbr[22]))
                                theResult.R3LastName = string.Empty;
                            else
                                theResult.R3LastName = dbr.GetString(22);
                        }
                    }
                }
            }

            return theResult;
        }
        private bool CreateDocument(int affiliate, int pathid, string displayname, string physicalname, int filecategory, string filetype, int filestatus, int priorlockstatus, bool landlorditem, bool tenantitem, string leadid, string contactid, string landlordid, string uploadedby, DateTime uploadedon, string comment, bool deleted, MySqlConnection dbc, out int newkey)
        {
            newkey = 0;
            int recordsaffected = 0;
            bool theResult = false;
            string theSQL = "INSERT INTO crbdb.mt_filesystem (affiliate, pathid, displayname, physicalname, filecategory, filetype, filestatus, priorlockstatus, landlorditem, tenantitem, leadid, contactid, landlordid, uploadedby, uploadedon, comment, deleted) VALUES(@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);";

            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                dbcc.Parameters.AddWithValue("@p0", affiliate);
                dbcc.Parameters.AddWithValue("@p1", pathid);
                dbcc.Parameters.AddWithValue("@p2", displayname);
                dbcc.Parameters.AddWithValue("@p3", physicalname);
                dbcc.Parameters.AddWithValue("@p4", filecategory);
                dbcc.Parameters.AddWithValue("@p5", filetype);
                dbcc.Parameters.AddWithValue("@p6", filestatus);
                dbcc.Parameters.AddWithValue("@p7", priorlockstatus);
                dbcc.Parameters.AddWithValue("@p8", landlorditem);
                dbcc.Parameters.AddWithValue("@p9", tenantitem);
                dbcc.Parameters.AddWithValue("@p10", leadid);
                dbcc.Parameters.AddWithValue("@p11", contactid);
                dbcc.Parameters.AddWithValue("@p12", landlordid);
                dbcc.Parameters.AddWithValue("@p13", uploadedby);
                dbcc.Parameters.AddWithValue("@p14", uploadedon);
                dbcc.Parameters.AddWithValue("@p15", comment);
                dbcc.Parameters.AddWithValue("@p16", deleted);

                recordsaffected = dbcc.ExecuteNonQuery();
            }

            if (recordsaffected > 0)
            {
                theResult = true;
                theSQL = "SELECT LAST_INSERT_ID()";
                using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
                {
                    dbcc.CommandType = CommandType.Text;
                    using (MySqlDataReader dbr = dbcc.ExecuteReader())
                    {
                        if (dbr.HasRows)
                        {
                            if (dbr.Read())
                            {
                                newkey = dbr.GetInt32(0);
                            }
                        }
                    }
                }
            }
            return theResult;
        }
        private bool UpdateDocumentTimeLine(int Activity, string Description, int UserID, int Id, MySqlConnection dbc)
        {
            int recordsaffected = 0;
            bool theResult = false;
            string theSQL = "INSERT INTO crbdb.tt_filesystemactivity (fileid, activity, activitystamp, activityby, activitydescription) VALUES(@p0, @p1, @p2, @p3, @p4);";

            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                dbcc.CommandType = CommandType.Text;
                dbcc.Parameters.AddWithValue("@p0", Id);
                dbcc.Parameters.AddWithValue("@p1", Activity);
                dbcc.Parameters.AddWithValue("@p2", DateTime.Now);
                dbcc.Parameters.AddWithValue("@p3", UserID);
                dbcc.Parameters.AddWithValue("@p4", Description);

                recordsaffected = dbcc.ExecuteNonQuery();
            }

            if (recordsaffected > 0)
            {
                theResult = true;
            }

            return theResult;
        }
        private void WriteToLogFile(string LogFile, string LogData)
        {
            using (StreamWriter tw = new StreamWriter(LogFile, true, System.Text.Encoding.UTF8))
            {
                tw.WriteLine("{0:HH:mm:ss} - {1}", DateTime.Now, LogData);
                tw.Flush();
            }
        }
        private void WriteToLogFileEx(string LogFile, string LogData)
        {
            using (StreamWriter tw = new StreamWriter(LogFile, true, System.Text.Encoding.UTF8))
            {
                tw.WriteLine("{0:yyyyMMdd-HH:mm:ss} - {1}", DateTime.Now, LogData);
                tw.Flush();
            }
        }

        private bool IsEmpty(string field)
        {
            bool theResult = false;
            if (string.IsNullOrEmpty(field))
                theResult = true;
            else
            {
                if (field.Length < 2)
                    theResult = true;
            }
                return theResult;
        }
        private int TenantCount(Contact Tenant)
        {
            int theResult = 0;

            if ((!IsEmpty(Tenant.First_Name)) && (!IsEmpty(Tenant.Last_Name))) theResult++;
            if ((!IsEmpty(Tenant.R1_First_Name)) && (!IsEmpty(Tenant.R1_Last_Name))) theResult++;
            if ((!IsEmpty(Tenant.R2_First_Name)) && (!IsEmpty(Tenant.R2_Last_Name))) theResult++;
            if ((!IsEmpty(Tenant.R3_First_Name)) && (!IsEmpty(Tenant.R3_Last_Name))) theResult++;

            return theResult;
        }

        private bool HasPunctuation(string FromData)
        {
            bool theResult = false;
            string validcharacters = "0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz ";

            for (int idx = 0; idx < FromData.Length; idx++)
            {
                char thisCharacter = FromData[idx];
                if (!validcharacters.Contains(thisCharacter))
                {
                    theResult = true;
                    break;
                }
            }

            return theResult;
        }
        private bool DMSHasThisDocument(string ContactID, int DocumentCategory, MySqlConnection dbc)
        {
            bool theResult = false;
            string theSQL = string.Format("SELECT id FROM crbdb.mt_filesystem WHERE (contactid = '{0}') AND (filecategory = {1}) AND ((filestatus = 4) AND (deleted = false))", ContactID, DocumentCategory);

            using (MySqlCommand dbcc = new MySqlCommand(theSQL, dbc))
            {
                using (MySqlDataReader dbr = dbcc.ExecuteReader())
                {
                    if (dbr.HasRows)
                        theResult = true;
                }
            }

            return theResult;
        }
        private string PutInMissingDocs(Contact Tenant, string Message, bool TenantSide, out bool Overflowed)
        {
            string theResult = string.Empty;
            bool installed = false;
            Overflowed = false;

            if (TenantSide)
            {
                if ((Tenant.Missing_Doc_1 != Message) &&
                    (Tenant.Missing_Doc_2 != Message) &&
                    (Tenant.Missing_Doc_3 != Message) &&
                    (Tenant.Missing_Doc_4 != Message) &&
                    (Tenant.Missing_Doc_5 != Message) &&
                    (Tenant.Missing_Doc_6 != Message))
                {
                    if (string.IsNullOrEmpty(Tenant.Missing_Doc_1))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_1\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_1 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_2))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_2\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_2 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_3))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_3\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_3 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_4))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_4\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_4 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_5))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_5\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_5 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.Missing_Doc_6))
                    {
                        installed = true;
                        theResult = string.Format("\"Missing_Doc_6\" : \"{0}\"", Message);
                        Tenant.Missing_Doc_6 = Message;
                    }

                    if (!installed)
                    {
                        theResult = string.Format("Signed Up Automation attempted to write (TMD:{0}), but all missing doc spaces were occupied.", Message);
                        Overflowed = true;
                    }
                }
            }
            else
            {
                if ((Tenant.L_Missing_Doc_1 != Message) &&
                    (Tenant.L_Missing_Doc_2 != Message) &&
                    (Tenant.L_Missing_Doc_3 != Message) &&
                    (Tenant.L_Missing_Doc_4 != Message) &&
                    (Tenant.L_Missing_Doc_5 != Message) &&
                    (Tenant.L_Missing_Doc_6 != Message))
                {
                    if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_1))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_1\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_1 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_2))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_2\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_2 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_3))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_3\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_3 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_4))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_4\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_4 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_5))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_5\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_5 = Message;
                    }
                    else if (string.IsNullOrEmpty(Tenant.L_Missing_Doc_6))
                    {
                        installed = true;
                        theResult = string.Format("\"L_Missing_Doc_6\" : \"{0}\"", Message);
                        Tenant.L_Missing_Doc_6 = Message;
                    }

                    if (!installed)
                    {
                        theResult = string.Format("Signed Up Automation attempted to write (LMD:{0}), but all missing doc spaces were occupied.", Message);
                        Overflowed = true;
                    }
                }
            }

            return theResult;
        }
        private void WriteReportHeader(string TestRunFile, string JobName)
        {
            using (StreamWriter sw = new StreamWriter(TestRunFile, true, System.Text.Encoding.UTF8))
            {
                sw.WriteLine("  {1} Report - Test Run {0:MM-dd-yyyy HH:mm:ss}\r\n", DateTime.Now, JobName);
                sw.Flush();
            }
        }
        private void WriteWeeklyReportNonReportingHeader(string TestRunFile)
        {
            using (StreamWriter sw = new StreamWriter(TestRunFile, true, System.Text.Encoding.UTF8))
            {
                sw.WriteLine("====================================================================================================================================");
                sw.WriteLine("=                                       N O N - R E P O R T I N G    F I L E S                                                     =");
                sw.WriteLine("====================================================================================================================================");
                sw.WriteLine();
                sw.Flush();
            }
        }
        private void WriteReportEntry(Contact Tenant, string TestRunFile, string[] ErrorLines)
        {
            string TenantAddress = string.Format("{0} {1}, {2} {3}", Tenant.Street, Tenant.City, Tenant.State1, Tenant.Zip);
            int idx = 0;

            using (StreamWriter sw = new StreamWriter(TestRunFile, true, System.Text.Encoding.UTF8))
            {
                sw.WriteLine("------------------------------------------------------------------------------------------------------------------------------------");
                sw.WriteLine("     {0, -35}  {1, -55}  [{2}]", Tenant.Last_Name, TenantAddress, Tenant.id);
                sw.WriteLine();
                foreach (string Error in ErrorLines)
                {
                    idx++;
                    sw.WriteLine("          {0:00}  {1, -100}", idx, Error);
                }
                sw.WriteLine();
                sw.Flush();
            }
        }
        private void WriteReportFooter(string TestRunFile, int recordsread, int recordsupdated, int recordswitherrors, int recordswithouterrors, TimeSpan Elapsed)
        {
            using (StreamWriter sw = new StreamWriter(TestRunFile, true, System.Text.Encoding.UTF8))
            {
                sw.WriteLine(string.Format("\r\nRead: {0}   No Errors: {1}   With Errors: {2}   Updated: {3}", recordsread, recordswithouterrors, recordswitherrors, recordsupdated));
                sw.WriteLine("\r\n********************** END OF REPORT *************************");
                sw.WriteLine(string.Format("\r\nRun Time: {0} minutes  {1} seconds.", Elapsed.Minutes, Elapsed.Seconds));
                sw.Flush();
            }
        }

        private bool updateTradeLine(PaymentHistoryDate RunDate, string CurrentTradeLine, string UpdateCharacter, List<string> ErrorLines, string reportTemplate, Contact Tenant, bool UseBenchmark, out string UpdatedTradeLine)
        {
            bool theResult = true;
            string[] PaymentHistorySegments;

            UpdatedTradeLine = CurrentTradeLine;

            PaymentHistorySegments = CurrentTradeLine.Split(new char[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
            int TradeLineDate = int.Parse(PaymentHistorySegments[0]);
            DateTime BenchMark = DateTime.Now.AddMonths(-12);
            int BenchMarkDate = (BenchMark.Year * 100) + BenchMark.Month;

            if (PaymentHistorySegments[0] != RunDate.PayDateAsString)
            {
                PaymentHistoryDate testdate = new PaymentHistoryDate(RunDate.PayDateAsCondensedDate); //PaymentHistoryDate(RunDate.PayDateAsFormatted);
                testdate.DecrementDate();

                if (testdate.PayDateAsString == PaymentHistorySegments[0])
                {
                    // Different Dates, need to update
                    if (PaymentHistorySegments[1].Length == 24)
                    {
                        if (!UseBenchmark || (UseBenchmark && (TradeLineDate > BenchMarkDate)))
                        {
                            string newHistory = UpdateCharacter + PaymentHistorySegments[1].Substring(0, 23);
                            UpdatedTradeLine = string.Format("{0}:{1}", RunDate.PayDateAsString, newHistory);
                        }
                        else
                            theResult = false;
                    }
                    else
                    {
                        theResult = false;
                        ErrorLines.Add(string.Format(reportTemplate, Tenant.Rental_Lease_Number, Tenant.Full_Name, Tenant.Email, Tenant.Contact_Status, Tenant.A_Rental_Lease_Status, FormatDate(Tenant.Rental_Obligation_Lease_Start_Date), FormatDate(Tenant.Date_of_Last_Payment), FormatDate(Tenant.Date_Closed), Tenant.Reporting_Requested[0], "Ignoring: Payment History less than expected Size."));
                    }
                }
                else
                {
                    theResult = false;
                    ErrorLines.Add(string.Format(reportTemplate, Tenant.Rental_Lease_Number, Tenant.Full_Name, Tenant.Email, Tenant.Contact_Status, Tenant.A_Rental_Lease_Status, FormatDate(Tenant.Rental_Obligation_Lease_Start_Date), FormatDate(Tenant.Date_of_Last_Payment), FormatDate(Tenant.Date_Closed), Tenant.Reporting_Requested[0], string.Format("Error: '{0}' Payment History is more than one month behind.", Tenant.Payment_History)));
                }
            }
            else
            {
                theResult = false;
                ErrorLines.Add(string.Format(reportTemplate, Tenant.Rental_Lease_Number, Tenant.Full_Name, Tenant.Email, Tenant.Contact_Status, Tenant.A_Rental_Lease_Status, FormatDate(Tenant.Rental_Obligation_Lease_Start_Date), FormatDate(Tenant.Date_of_Last_Payment), FormatDate(Tenant.Date_Closed), Tenant.Reporting_Requested[0], string.Format("Ignoring: '{0}' Payment History is up-to-date.", Tenant.Payment_History)));
            }

            return theResult;
        }
        private string FormatDate(string OriginalDate)
        {
            string theResult = string.Empty;

            if (!string.IsNullOrEmpty(OriginalDate))
            {
                if (OriginalDate.Length == 8)
                    theResult = OriginalDate.Substring(0, 2) + "/" + OriginalDate.Substring(2, 2) + "/" + OriginalDate.Substring(4, 4);
            }

            return theResult;
        }
        private void RecordLogEntry(string logname, string data)
        {
            using (StreamWriter sw = new StreamWriter(logname, true, Encoding.UTF8))
            {
                sw.WriteLine("{0:HH:mm:ss} :: {1}", DateTime.Now, data);
                sw.Flush();
            }
        }
    } // class
} // namespace
